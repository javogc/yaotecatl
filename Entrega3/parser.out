Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC
Rule 2     auxprogram -> vars auxprogram
Rule 3     auxprogram -> function auxprogram
Rule 4     auxprogram -> <empty>
Rule 5     array -> ID LFTBRACSQR exp RGTBRACSQR
Rule 6     arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR
Rule 7     arrayvaluesaux -> constant
Rule 8     arrayvaluesaux -> constant COMMA arrayvaluesaux
Rule 9     assignment -> assignmentaux EQUAL expression SEMICOLON
Rule 10    assignmentaux -> ID
Rule 11    assignmentaux -> array
Rule 12    blockreturn -> LFTBRAC blockneutral RGTBRAC
Rule 13    blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC
Rule 14    blockneutral -> statement blockneutral
Rule 15    blockneutral -> vars blockneutral
Rule 16    blockneutral -> empty
Rule 17    block -> LFTBRAC blockneutral RGTBRAC
Rule 18    condition -> IF conditionaux
Rule 19    condition -> IF conditionaux ELSE block
Rule 20    conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2
Rule 21    conditionaux2 -> ELSEIF conditionaux
Rule 22    conditionaux2 -> empty
Rule 23    constant -> ID
Rule 24    constant -> array
Rule 25    constant -> cteN
Rule 26    constant -> cteS
Rule 27    constant -> TRUE
Rule 28    constant -> FALSE
Rule 29    constant -> call2
Rule 30    cteN -> FLOAT
Rule 31    cteN -> INT
Rule 32    cteS -> STRING
Rule 33    exp -> term
Rule 34    exp -> term PLUS exp
Rule 35    exp -> term MINUS exp
Rule 36    factor -> PLUS constant
Rule 37    factor -> MINUS constant
Rule 38    factor -> LFTPAREN expression RGTPAREN
Rule 39    factor -> constant
Rule 40    expression -> exp
Rule 41    expression -> exp expressionaux exp
Rule 42    expressionaux -> AND
Rule 43    expressionaux -> DOUBEQUAL
Rule 44    expressionaux -> NOT
Rule 45    expressionaux -> OR
Rule 46    expressionaux -> LESSTHANEQUAL
Rule 47    expressionaux -> GREATTHANEQUAL
Rule 48    expressionaux -> GREATTHAN
Rule 49    expressionaux -> LESSTHAN
Rule 50    loop -> WHILE LFTPAREN expression RGTPAREN block
Rule 51    write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON
Rule 52    parameter -> type ID codeAddParameters
Rule 53    parameter -> type ID codeAddParameters COMMA parameter
Rule 54    parameter -> empty
Rule 55    term -> factor MULTIPLICATION term
Rule 56    term -> factor DIVISION term
Rule 57    term -> factor
Rule 58    statement -> assignment
Rule 59    statement -> condition
Rule 60    statement -> loop
Rule 61    statement -> write
Rule 62    statement -> read
Rule 63    statement -> call
Rule 64    type -> INT checkType
Rule 65    type -> FLOAT checkType
Rule 66    type -> CHAR checkType
Rule 67    type -> BOOL checkType
Rule 68    type -> STRING checkType
Rule 69    main -> PRIOMH codeScope block
Rule 70    function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
Rule 71    functionaux -> VOID codeTypeVoid checkType
Rule 72    functionaux -> funcIndicator type
Rule 73    vars -> type varsaux
Rule 74    varsaux -> ID codeAddVar EQUAL expression SEMICOLON
Rule 75    varsaux -> ID codeAddVar EQUAL expression COMMA varsaux
Rule 76    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
Rule 77    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux
Rule 78    call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON
Rule 79    callaux -> COMMA exp callaux
Rule 80    callaux -> empty
Rule 81    call2 -> ID LFTPAREN exp callaux RGTPAREN
Rule 82    read -> READ LFTPAREN readaux RGTPAREN SEMICOLON
Rule 83    readaux -> ID
Rule 84    readaux -> array
Rule 85    empty -> <empty>
Rule 86    codeScope -> <empty>
Rule 87    checkType -> <empty>
Rule 88    codeAddVar -> <empty>
Rule 89    codeAddVarArreglo -> <empty>
Rule 90    codeAddParameters -> <empty>
Rule 91    codeNameOfFunct -> <empty>
Rule 92    codeTypeVoid -> <empty>
Rule 93    funcIndicator -> <empty>

Terminals, with rules where they appear

AND                  : 42
BOOL                 : 67
CHAR                 : 66
COMMA                : 8 53 75 77 79
DIVISION             : 56
DOUBEQUAL            : 43
ELSE                 : 19
ELSEIF               : 21
EQUAL                : 9 74 75 76 77
FALSE                : 28
FLOAT                : 30 65
FUNCTION             : 70
GREATTHAN            : 48
GREATTHANEQUAL       : 47
ID                   : 1 5 10 23 52 53 70 74 75 76 77 78 81 83
IF                   : 18 19
INT                  : 31 64 76 77
LESSTHAN             : 49
LESSTHANEQUAL        : 46
LFTBRAC              : 1 12 13 17
LFTBRACSQR           : 5 6 76 77
LFTPAREN             : 20 38 50 51 70 78 81 82
MINUS                : 35 37
MULTIPLICATION       : 55
NOT                  : 44
OR                   : 45
PLUS                 : 34 36
PRINT                : 51
PRIOMH               : 69
PROGRAM              : 1
READ                 : 82
RETURN               : 13
RGTBRAC              : 1 12 13 17
RGTBRACSQR           : 5 6 76 77
RGTPAREN             : 20 38 50 51 70 78 81 82
SEMICOLON            : 9 13 51 74 76 78 82
STRING               : 32 68
TRUE                 : 27
VOID                 : 71
WHILE                : 50
error                : 

Nonterminals, with rules where they appear

array                : 11 24 84
arrayvalues          : 76 77
arrayvaluesaux       : 6 8
assignment           : 58
assignmentaux        : 9
auxprogram           : 1 2 3
block                : 19 20 50 69
blockneutral         : 12 13 14 15 17
blockreturn          : 70
call                 : 63
call2                : 29
callaux              : 78 79 81
checkType            : 64 65 66 67 68 71
codeAddParameters    : 52 53
codeAddVar           : 74 75
codeAddVarArreglo    : 76 77
codeNameOfFunct      : 70
codeScope            : 69 70 70
codeTypeVoid         : 71
condition            : 59
conditionaux         : 18 19 21
conditionaux2        : 20
constant             : 7 8 36 37 39 51
cteN                 : 25
cteS                 : 26
empty                : 16 22 54 80
exp                  : 5 13 34 35 40 41 41 78 79 81
expression           : 9 20 38 50 74 75
expressionaux        : 41
factor               : 55 56 57
funcIndicator        : 72
function             : 3
functionaux          : 70
loop                 : 60
main                 : 1
parameter            : 53 70
program              : 0
read                 : 62
readaux              : 82
statement            : 14
term                 : 33 34 35 55 56
type                 : 52 53 72 73
vars                 : 2 15
varsaux              : 73 75 77
write                : 61

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LFTBRAC auxprogram main RGTBRAC

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LFTBRAC auxprogram main RGTBRAC

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LFTBRAC auxprogram main RGTBRAC

    LFTBRAC         shift and go to state 4


state 4

    (1) program -> PROGRAM ID LFTBRAC . auxprogram main RGTBRAC
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> .
    (73) vars -> . type varsaux
    (70) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType

    PRIOMH          reduce using rule 4 (auxprogram -> .)
    FUNCTION        shift and go to state 5
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    function                       shift and go to state 9
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 8
    type                           shift and go to state 12

state 5

    (70) function -> FUNCTION . codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (86) codeScope -> .

    VOID            reduce using rule 86 (codeScope -> .)
    INT             reduce using rule 86 (codeScope -> .)
    FLOAT           reduce using rule 86 (codeScope -> .)
    CHAR            reduce using rule 86 (codeScope -> .)
    BOOL            reduce using rule 86 (codeScope -> .)
    STRING          reduce using rule 86 (codeScope -> .)

    codeScope                      shift and go to state 15

state 6

    (2) auxprogram -> vars . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> .
    (73) vars -> . type varsaux
    (70) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType

    PRIOMH          reduce using rule 4 (auxprogram -> .)
    FUNCTION        shift and go to state 5
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    function                       shift and go to state 9
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 16
    type                           shift and go to state 12

state 7

    (66) type -> CHAR . checkType
    (87) checkType -> .

    ID              reduce using rule 87 (checkType -> .)

    checkType                      shift and go to state 17

state 8

    (1) program -> PROGRAM ID LFTBRAC auxprogram . main RGTBRAC
    (69) main -> . PRIOMH codeScope block

    PRIOMH          shift and go to state 18

    main                           shift and go to state 19

state 9

    (3) auxprogram -> function . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> .
    (73) vars -> . type varsaux
    (70) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType

    PRIOMH          reduce using rule 4 (auxprogram -> .)
    FUNCTION        shift and go to state 5
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    function                       shift and go to state 9
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 20
    type                           shift and go to state 12

state 10

    (68) type -> STRING . checkType
    (87) checkType -> .

    ID              reduce using rule 87 (checkType -> .)

    checkType                      shift and go to state 21

state 11

    (64) type -> INT . checkType
    (87) checkType -> .

    ID              reduce using rule 87 (checkType -> .)

    checkType                      shift and go to state 22

state 12

    (73) vars -> type . varsaux
    (74) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (75) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (76) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 24

state 13

    (65) type -> FLOAT . checkType
    (87) checkType -> .

    ID              reduce using rule 87 (checkType -> .)

    checkType                      shift and go to state 25

state 14

    (67) type -> BOOL . checkType
    (87) checkType -> .

    ID              reduce using rule 87 (checkType -> .)

    checkType                      shift and go to state 26

state 15

    (70) function -> FUNCTION codeScope . functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (71) functionaux -> . VOID codeTypeVoid checkType
    (72) functionaux -> . funcIndicator type
    (93) funcIndicator -> .

    VOID            shift and go to state 29
    INT             reduce using rule 93 (funcIndicator -> .)
    FLOAT           reduce using rule 93 (funcIndicator -> .)
    CHAR            reduce using rule 93 (funcIndicator -> .)
    BOOL            reduce using rule 93 (funcIndicator -> .)
    STRING          reduce using rule 93 (funcIndicator -> .)

    functionaux                    shift and go to state 27
    funcIndicator                  shift and go to state 28

state 16

    (2) auxprogram -> vars auxprogram .

    PRIOMH          reduce using rule 2 (auxprogram -> vars auxprogram .)


state 17

    (66) type -> CHAR checkType .

    ID              reduce using rule 66 (type -> CHAR checkType .)


state 18

    (69) main -> PRIOMH . codeScope block
    (86) codeScope -> .

    LFTBRAC         reduce using rule 86 (codeScope -> .)

    codeScope                      shift and go to state 30

state 19

    (1) program -> PROGRAM ID LFTBRAC auxprogram main . RGTBRAC

    RGTBRAC         shift and go to state 31


state 20

    (3) auxprogram -> function auxprogram .

    PRIOMH          reduce using rule 3 (auxprogram -> function auxprogram .)


state 21

    (68) type -> STRING checkType .

    ID              reduce using rule 68 (type -> STRING checkType .)


state 22

    (64) type -> INT checkType .

    ID              reduce using rule 64 (type -> INT checkType .)


state 23

    (74) varsaux -> ID . codeAddVar EQUAL expression SEMICOLON
    (75) varsaux -> ID . codeAddVar EQUAL expression COMMA varsaux
    (76) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux
    (88) codeAddVar -> .
    (89) codeAddVarArreglo -> .

    EQUAL           reduce using rule 88 (codeAddVar -> .)
    LFTBRACSQR      reduce using rule 89 (codeAddVarArreglo -> .)

    codeAddVarArreglo              shift and go to state 32
    codeAddVar                     shift and go to state 33

state 24

    (73) vars -> type varsaux .

    IF              reduce using rule 73 (vars -> type varsaux .)
    WHILE           reduce using rule 73 (vars -> type varsaux .)
    PRINT           reduce using rule 73 (vars -> type varsaux .)
    READ            reduce using rule 73 (vars -> type varsaux .)
    ID              reduce using rule 73 (vars -> type varsaux .)
    INT             reduce using rule 73 (vars -> type varsaux .)
    FLOAT           reduce using rule 73 (vars -> type varsaux .)
    CHAR            reduce using rule 73 (vars -> type varsaux .)
    BOOL            reduce using rule 73 (vars -> type varsaux .)
    STRING          reduce using rule 73 (vars -> type varsaux .)
    RGTBRAC         reduce using rule 73 (vars -> type varsaux .)
    RETURN          reduce using rule 73 (vars -> type varsaux .)
    FUNCTION        reduce using rule 73 (vars -> type varsaux .)
    PRIOMH          reduce using rule 73 (vars -> type varsaux .)


state 25

    (65) type -> FLOAT checkType .

    ID              reduce using rule 65 (type -> FLOAT checkType .)


state 26

    (67) type -> BOOL checkType .

    ID              reduce using rule 67 (type -> BOOL checkType .)


state 27

    (70) function -> FUNCTION codeScope functionaux . ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope

    ID              shift and go to state 34


state 28

    (72) functionaux -> funcIndicator . type
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    type                           shift and go to state 35

state 29

    (71) functionaux -> VOID . codeTypeVoid checkType
    (92) codeTypeVoid -> .

    ID              reduce using rule 92 (codeTypeVoid -> .)

    codeTypeVoid                   shift and go to state 36

state 30

    (69) main -> PRIOMH codeScope . block
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 37

    block                          shift and go to state 38

state 31

    (1) program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .

    $end            reduce using rule 1 (program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .)


state 32

    (76) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    LFTBRACSQR      shift and go to state 39


state 33

    (74) varsaux -> ID codeAddVar . EQUAL expression SEMICOLON
    (75) varsaux -> ID codeAddVar . EQUAL expression COMMA varsaux

    EQUAL           shift and go to state 40


state 34

    (70) function -> FUNCTION codeScope functionaux ID . codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (91) codeNameOfFunct -> .

    LFTPAREN        reduce using rule 91 (codeNameOfFunct -> .)

    codeNameOfFunct                shift and go to state 41

state 35

    (72) functionaux -> funcIndicator type .

    ID              reduce using rule 72 (functionaux -> funcIndicator type .)


state 36

    (71) functionaux -> VOID codeTypeVoid . checkType
    (87) checkType -> .

    ID              reduce using rule 87 (checkType -> .)

    checkType                      shift and go to state 42

state 37

    (17) block -> LFTBRAC . blockneutral RGTBRAC
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (58) statement -> . assignment
    (59) statement -> . condition
    (60) statement -> . loop
    (61) statement -> . write
    (62) statement -> . read
    (63) statement -> . call
    (73) vars -> . type varsaux
    (85) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (50) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (51) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (82) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (78) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 85 (empty -> .)
    IF              shift and go to state 57
    WHILE           shift and go to state 45
    PRINT           shift and go to state 46
    READ            shift and go to state 44
    ID              shift and go to state 55
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 43
    array                          shift and go to state 47
    write                          shift and go to state 48
    call                           shift and go to state 50
    statement                      shift and go to state 51
    type                           shift and go to state 12
    empty                          shift and go to state 52
    read                           shift and go to state 49
    assignment                     shift and go to state 53
    assignmentaux                  shift and go to state 54
    condition                      shift and go to state 56
    blockneutral                   shift and go to state 58
    loop                           shift and go to state 59

state 38

    (69) main -> PRIOMH codeScope block .

    RGTBRAC         reduce using rule 69 (main -> PRIOMH codeScope block .)


state 39

    (76) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    INT             shift and go to state 60


state 40

    (74) varsaux -> ID codeAddVar EQUAL . expression SEMICOLON
    (75) varsaux -> ID codeAddVar EQUAL . expression COMMA varsaux
    (40) expression -> . exp
    (41) expression -> . exp expressionaux exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    term                           shift and go to state 73
    constant                       shift and go to state 61
    cteS                           shift and go to state 62
    cteN                           shift and go to state 64
    call2                          shift and go to state 66
    exp                            shift and go to state 77
    factor                         shift and go to state 68
    array                          shift and go to state 63
    expression                     shift and go to state 78

state 41

    (70) function -> FUNCTION codeScope functionaux ID codeNameOfFunct . LFTPAREN parameter RGTPAREN blockreturn codeScope

    LFTPAREN        shift and go to state 79


state 42

    (71) functionaux -> VOID codeTypeVoid checkType .

    ID              reduce using rule 71 (functionaux -> VOID codeTypeVoid checkType .)


state 43

    (15) blockneutral -> vars . blockneutral
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (58) statement -> . assignment
    (59) statement -> . condition
    (60) statement -> . loop
    (61) statement -> . write
    (62) statement -> . read
    (63) statement -> . call
    (73) vars -> . type varsaux
    (85) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (50) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (51) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (82) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (78) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    IF              shift and go to state 57
    WHILE           shift and go to state 45
    PRINT           shift and go to state 46
    READ            shift and go to state 44
    ID              shift and go to state 55
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 43
    array                          shift and go to state 47
    write                          shift and go to state 48
    call                           shift and go to state 50
    statement                      shift and go to state 51
    type                           shift and go to state 12
    empty                          shift and go to state 52
    read                           shift and go to state 49
    assignment                     shift and go to state 53
    assignmentaux                  shift and go to state 54
    condition                      shift and go to state 56
    blockneutral                   shift and go to state 80
    loop                           shift and go to state 59

state 44

    (82) read -> READ . LFTPAREN readaux RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 81


state 45

    (50) loop -> WHILE . LFTPAREN expression RGTPAREN block

    LFTPAREN        shift and go to state 82


state 46

    (51) write -> PRINT . LFTPAREN constant RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 83


state 47

    (11) assignmentaux -> array .

    EQUAL           reduce using rule 11 (assignmentaux -> array .)


state 48

    (61) statement -> write .

    IF              reduce using rule 61 (statement -> write .)
    WHILE           reduce using rule 61 (statement -> write .)
    PRINT           reduce using rule 61 (statement -> write .)
    READ            reduce using rule 61 (statement -> write .)
    ID              reduce using rule 61 (statement -> write .)
    INT             reduce using rule 61 (statement -> write .)
    FLOAT           reduce using rule 61 (statement -> write .)
    CHAR            reduce using rule 61 (statement -> write .)
    BOOL            reduce using rule 61 (statement -> write .)
    STRING          reduce using rule 61 (statement -> write .)
    RGTBRAC         reduce using rule 61 (statement -> write .)
    RETURN          reduce using rule 61 (statement -> write .)


state 49

    (62) statement -> read .

    IF              reduce using rule 62 (statement -> read .)
    WHILE           reduce using rule 62 (statement -> read .)
    PRINT           reduce using rule 62 (statement -> read .)
    READ            reduce using rule 62 (statement -> read .)
    ID              reduce using rule 62 (statement -> read .)
    INT             reduce using rule 62 (statement -> read .)
    FLOAT           reduce using rule 62 (statement -> read .)
    CHAR            reduce using rule 62 (statement -> read .)
    BOOL            reduce using rule 62 (statement -> read .)
    STRING          reduce using rule 62 (statement -> read .)
    RGTBRAC         reduce using rule 62 (statement -> read .)
    RETURN          reduce using rule 62 (statement -> read .)


state 50

    (63) statement -> call .

    IF              reduce using rule 63 (statement -> call .)
    WHILE           reduce using rule 63 (statement -> call .)
    PRINT           reduce using rule 63 (statement -> call .)
    READ            reduce using rule 63 (statement -> call .)
    ID              reduce using rule 63 (statement -> call .)
    INT             reduce using rule 63 (statement -> call .)
    FLOAT           reduce using rule 63 (statement -> call .)
    CHAR            reduce using rule 63 (statement -> call .)
    BOOL            reduce using rule 63 (statement -> call .)
    STRING          reduce using rule 63 (statement -> call .)
    RGTBRAC         reduce using rule 63 (statement -> call .)
    RETURN          reduce using rule 63 (statement -> call .)


state 51

    (14) blockneutral -> statement . blockneutral
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (58) statement -> . assignment
    (59) statement -> . condition
    (60) statement -> . loop
    (61) statement -> . write
    (62) statement -> . read
    (63) statement -> . call
    (73) vars -> . type varsaux
    (85) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (50) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (51) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (82) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (78) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    IF              shift and go to state 57
    WHILE           shift and go to state 45
    PRINT           shift and go to state 46
    READ            shift and go to state 44
    ID              shift and go to state 55
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 43
    array                          shift and go to state 47
    write                          shift and go to state 48
    call                           shift and go to state 50
    statement                      shift and go to state 51
    type                           shift and go to state 12
    empty                          shift and go to state 52
    read                           shift and go to state 49
    assignment                     shift and go to state 53
    assignmentaux                  shift and go to state 54
    condition                      shift and go to state 56
    blockneutral                   shift and go to state 84
    loop                           shift and go to state 59

state 52

    (16) blockneutral -> empty .

    RGTBRAC         reduce using rule 16 (blockneutral -> empty .)
    RETURN          reduce using rule 16 (blockneutral -> empty .)


state 53

    (58) statement -> assignment .

    IF              reduce using rule 58 (statement -> assignment .)
    WHILE           reduce using rule 58 (statement -> assignment .)
    PRINT           reduce using rule 58 (statement -> assignment .)
    READ            reduce using rule 58 (statement -> assignment .)
    ID              reduce using rule 58 (statement -> assignment .)
    INT             reduce using rule 58 (statement -> assignment .)
    FLOAT           reduce using rule 58 (statement -> assignment .)
    CHAR            reduce using rule 58 (statement -> assignment .)
    BOOL            reduce using rule 58 (statement -> assignment .)
    STRING          reduce using rule 58 (statement -> assignment .)
    RGTBRAC         reduce using rule 58 (statement -> assignment .)
    RETURN          reduce using rule 58 (statement -> assignment .)


state 54

    (9) assignment -> assignmentaux . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 85


state 55

    (78) call -> ID . LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    LFTPAREN        shift and go to state 86
    EQUAL           reduce using rule 10 (assignmentaux -> ID .)
    LFTBRACSQR      shift and go to state 87


state 56

    (59) statement -> condition .

    IF              reduce using rule 59 (statement -> condition .)
    WHILE           reduce using rule 59 (statement -> condition .)
    PRINT           reduce using rule 59 (statement -> condition .)
    READ            reduce using rule 59 (statement -> condition .)
    ID              reduce using rule 59 (statement -> condition .)
    INT             reduce using rule 59 (statement -> condition .)
    FLOAT           reduce using rule 59 (statement -> condition .)
    CHAR            reduce using rule 59 (statement -> condition .)
    BOOL            reduce using rule 59 (statement -> condition .)
    STRING          reduce using rule 59 (statement -> condition .)
    RGTBRAC         reduce using rule 59 (statement -> condition .)
    RETURN          reduce using rule 59 (statement -> condition .)


state 57

    (18) condition -> IF . conditionaux
    (19) condition -> IF . conditionaux ELSE block
    (20) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 88

    conditionaux                   shift and go to state 89

state 58

    (17) block -> LFTBRAC blockneutral . RGTBRAC

    RGTBRAC         shift and go to state 90


state 59

    (60) statement -> loop .

    IF              reduce using rule 60 (statement -> loop .)
    WHILE           reduce using rule 60 (statement -> loop .)
    PRINT           reduce using rule 60 (statement -> loop .)
    READ            reduce using rule 60 (statement -> loop .)
    ID              reduce using rule 60 (statement -> loop .)
    INT             reduce using rule 60 (statement -> loop .)
    FLOAT           reduce using rule 60 (statement -> loop .)
    CHAR            reduce using rule 60 (statement -> loop .)
    BOOL            reduce using rule 60 (statement -> loop .)
    STRING          reduce using rule 60 (statement -> loop .)
    RGTBRAC         reduce using rule 60 (statement -> loop .)
    RETURN          reduce using rule 60 (statement -> loop .)


state 60

    (76) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    RGTBRACSQR      shift and go to state 91


state 61

    (39) factor -> constant .

    MULTIPLICATION  reduce using rule 39 (factor -> constant .)
    DIVISION        reduce using rule 39 (factor -> constant .)
    PLUS            reduce using rule 39 (factor -> constant .)
    MINUS           reduce using rule 39 (factor -> constant .)
    SEMICOLON       reduce using rule 39 (factor -> constant .)
    COMMA           reduce using rule 39 (factor -> constant .)
    RGTPAREN        reduce using rule 39 (factor -> constant .)
    AND             reduce using rule 39 (factor -> constant .)
    DOUBEQUAL       reduce using rule 39 (factor -> constant .)
    NOT             reduce using rule 39 (factor -> constant .)
    OR              reduce using rule 39 (factor -> constant .)
    LESSTHANEQUAL   reduce using rule 39 (factor -> constant .)
    GREATTHANEQUAL  reduce using rule 39 (factor -> constant .)
    GREATTHAN       reduce using rule 39 (factor -> constant .)
    LESSTHAN        reduce using rule 39 (factor -> constant .)
    RGTBRACSQR      reduce using rule 39 (factor -> constant .)


state 62

    (26) constant -> cteS .

    MULTIPLICATION  reduce using rule 26 (constant -> cteS .)
    DIVISION        reduce using rule 26 (constant -> cteS .)
    PLUS            reduce using rule 26 (constant -> cteS .)
    MINUS           reduce using rule 26 (constant -> cteS .)
    AND             reduce using rule 26 (constant -> cteS .)
    DOUBEQUAL       reduce using rule 26 (constant -> cteS .)
    NOT             reduce using rule 26 (constant -> cteS .)
    OR              reduce using rule 26 (constant -> cteS .)
    LESSTHANEQUAL   reduce using rule 26 (constant -> cteS .)
    GREATTHANEQUAL  reduce using rule 26 (constant -> cteS .)
    GREATTHAN       reduce using rule 26 (constant -> cteS .)
    LESSTHAN        reduce using rule 26 (constant -> cteS .)
    SEMICOLON       reduce using rule 26 (constant -> cteS .)
    COMMA           reduce using rule 26 (constant -> cteS .)
    RGTPAREN        reduce using rule 26 (constant -> cteS .)
    RGTBRACSQR      reduce using rule 26 (constant -> cteS .)


state 63

    (24) constant -> array .

    MULTIPLICATION  reduce using rule 24 (constant -> array .)
    DIVISION        reduce using rule 24 (constant -> array .)
    PLUS            reduce using rule 24 (constant -> array .)
    MINUS           reduce using rule 24 (constant -> array .)
    AND             reduce using rule 24 (constant -> array .)
    DOUBEQUAL       reduce using rule 24 (constant -> array .)
    NOT             reduce using rule 24 (constant -> array .)
    OR              reduce using rule 24 (constant -> array .)
    LESSTHANEQUAL   reduce using rule 24 (constant -> array .)
    GREATTHANEQUAL  reduce using rule 24 (constant -> array .)
    GREATTHAN       reduce using rule 24 (constant -> array .)
    LESSTHAN        reduce using rule 24 (constant -> array .)
    SEMICOLON       reduce using rule 24 (constant -> array .)
    COMMA           reduce using rule 24 (constant -> array .)
    RGTPAREN        reduce using rule 24 (constant -> array .)
    RGTBRACSQR      reduce using rule 24 (constant -> array .)


state 64

    (25) constant -> cteN .

    MULTIPLICATION  reduce using rule 25 (constant -> cteN .)
    DIVISION        reduce using rule 25 (constant -> cteN .)
    PLUS            reduce using rule 25 (constant -> cteN .)
    MINUS           reduce using rule 25 (constant -> cteN .)
    AND             reduce using rule 25 (constant -> cteN .)
    DOUBEQUAL       reduce using rule 25 (constant -> cteN .)
    NOT             reduce using rule 25 (constant -> cteN .)
    OR              reduce using rule 25 (constant -> cteN .)
    LESSTHANEQUAL   reduce using rule 25 (constant -> cteN .)
    GREATTHANEQUAL  reduce using rule 25 (constant -> cteN .)
    GREATTHAN       reduce using rule 25 (constant -> cteN .)
    LESSTHAN        reduce using rule 25 (constant -> cteN .)
    SEMICOLON       reduce using rule 25 (constant -> cteN .)
    COMMA           reduce using rule 25 (constant -> cteN .)
    RGTPAREN        reduce using rule 25 (constant -> cteN .)
    RGTBRACSQR      reduce using rule 25 (constant -> cteN .)


state 65

    (37) factor -> MINUS . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    constant                       shift and go to state 92
    call2                          shift and go to state 66
    array                          shift and go to state 63
    cteN                           shift and go to state 64

state 66

    (29) constant -> call2 .

    MULTIPLICATION  reduce using rule 29 (constant -> call2 .)
    DIVISION        reduce using rule 29 (constant -> call2 .)
    PLUS            reduce using rule 29 (constant -> call2 .)
    MINUS           reduce using rule 29 (constant -> call2 .)
    AND             reduce using rule 29 (constant -> call2 .)
    DOUBEQUAL       reduce using rule 29 (constant -> call2 .)
    NOT             reduce using rule 29 (constant -> call2 .)
    OR              reduce using rule 29 (constant -> call2 .)
    LESSTHANEQUAL   reduce using rule 29 (constant -> call2 .)
    GREATTHANEQUAL  reduce using rule 29 (constant -> call2 .)
    GREATTHAN       reduce using rule 29 (constant -> call2 .)
    LESSTHAN        reduce using rule 29 (constant -> call2 .)
    SEMICOLON       reduce using rule 29 (constant -> call2 .)
    COMMA           reduce using rule 29 (constant -> call2 .)
    RGTPAREN        reduce using rule 29 (constant -> call2 .)
    RGTBRACSQR      reduce using rule 29 (constant -> call2 .)


state 67

    (27) constant -> TRUE .

    MULTIPLICATION  reduce using rule 27 (constant -> TRUE .)
    DIVISION        reduce using rule 27 (constant -> TRUE .)
    PLUS            reduce using rule 27 (constant -> TRUE .)
    MINUS           reduce using rule 27 (constant -> TRUE .)
    AND             reduce using rule 27 (constant -> TRUE .)
    DOUBEQUAL       reduce using rule 27 (constant -> TRUE .)
    NOT             reduce using rule 27 (constant -> TRUE .)
    OR              reduce using rule 27 (constant -> TRUE .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> TRUE .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> TRUE .)
    GREATTHAN       reduce using rule 27 (constant -> TRUE .)
    LESSTHAN        reduce using rule 27 (constant -> TRUE .)
    SEMICOLON       reduce using rule 27 (constant -> TRUE .)
    COMMA           reduce using rule 27 (constant -> TRUE .)
    RGTPAREN        reduce using rule 27 (constant -> TRUE .)
    RGTBRACSQR      reduce using rule 27 (constant -> TRUE .)


state 68

    (55) term -> factor . MULTIPLICATION term
    (56) term -> factor . DIVISION term
    (57) term -> factor .

    MULTIPLICATION  shift and go to state 93
    DIVISION        shift and go to state 94
    PLUS            reduce using rule 57 (term -> factor .)
    MINUS           reduce using rule 57 (term -> factor .)
    SEMICOLON       reduce using rule 57 (term -> factor .)
    COMMA           reduce using rule 57 (term -> factor .)
    RGTPAREN        reduce using rule 57 (term -> factor .)
    AND             reduce using rule 57 (term -> factor .)
    DOUBEQUAL       reduce using rule 57 (term -> factor .)
    NOT             reduce using rule 57 (term -> factor .)
    OR              reduce using rule 57 (term -> factor .)
    LESSTHANEQUAL   reduce using rule 57 (term -> factor .)
    GREATTHANEQUAL  reduce using rule 57 (term -> factor .)
    GREATTHAN       reduce using rule 57 (term -> factor .)
    LESSTHAN        reduce using rule 57 (term -> factor .)
    RGTBRACSQR      reduce using rule 57 (term -> factor .)


state 69

    (36) factor -> PLUS . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    constant                       shift and go to state 95
    call2                          shift and go to state 66
    array                          shift and go to state 63
    cteN                           shift and go to state 64

state 70

    (32) cteS -> STRING .

    MULTIPLICATION  reduce using rule 32 (cteS -> STRING .)
    DIVISION        reduce using rule 32 (cteS -> STRING .)
    PLUS            reduce using rule 32 (cteS -> STRING .)
    MINUS           reduce using rule 32 (cteS -> STRING .)
    AND             reduce using rule 32 (cteS -> STRING .)
    DOUBEQUAL       reduce using rule 32 (cteS -> STRING .)
    NOT             reduce using rule 32 (cteS -> STRING .)
    OR              reduce using rule 32 (cteS -> STRING .)
    LESSTHANEQUAL   reduce using rule 32 (cteS -> STRING .)
    GREATTHANEQUAL  reduce using rule 32 (cteS -> STRING .)
    GREATTHAN       reduce using rule 32 (cteS -> STRING .)
    LESSTHAN        reduce using rule 32 (cteS -> STRING .)
    RGTPAREN        reduce using rule 32 (cteS -> STRING .)
    SEMICOLON       reduce using rule 32 (cteS -> STRING .)
    COMMA           reduce using rule 32 (cteS -> STRING .)
    RGTBRACSQR      reduce using rule 32 (cteS -> STRING .)


state 71

    (38) factor -> LFTPAREN . expression RGTPAREN
    (40) expression -> . exp
    (41) expression -> . exp expressionaux exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    term                           shift and go to state 73
    constant                       shift and go to state 61
    cteS                           shift and go to state 62
    cteN                           shift and go to state 64
    call2                          shift and go to state 66
    exp                            shift and go to state 77
    factor                         shift and go to state 68
    array                          shift and go to state 63
    expression                     shift and go to state 96

state 72

    (23) constant -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR
    (81) call2 -> ID . LFTPAREN exp callaux RGTPAREN

    MULTIPLICATION  reduce using rule 23 (constant -> ID .)
    DIVISION        reduce using rule 23 (constant -> ID .)
    PLUS            reduce using rule 23 (constant -> ID .)
    MINUS           reduce using rule 23 (constant -> ID .)
    AND             reduce using rule 23 (constant -> ID .)
    DOUBEQUAL       reduce using rule 23 (constant -> ID .)
    NOT             reduce using rule 23 (constant -> ID .)
    OR              reduce using rule 23 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 23 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 23 (constant -> ID .)
    GREATTHAN       reduce using rule 23 (constant -> ID .)
    LESSTHAN        reduce using rule 23 (constant -> ID .)
    SEMICOLON       reduce using rule 23 (constant -> ID .)
    COMMA           reduce using rule 23 (constant -> ID .)
    RGTPAREN        reduce using rule 23 (constant -> ID .)
    RGTBRACSQR      reduce using rule 23 (constant -> ID .)
    LFTBRACSQR      shift and go to state 87
    LFTPAREN        shift and go to state 97


state 73

    (33) exp -> term .
    (34) exp -> term . PLUS exp
    (35) exp -> term . MINUS exp

    AND             reduce using rule 33 (exp -> term .)
    DOUBEQUAL       reduce using rule 33 (exp -> term .)
    NOT             reduce using rule 33 (exp -> term .)
    OR              reduce using rule 33 (exp -> term .)
    LESSTHANEQUAL   reduce using rule 33 (exp -> term .)
    GREATTHANEQUAL  reduce using rule 33 (exp -> term .)
    GREATTHAN       reduce using rule 33 (exp -> term .)
    LESSTHAN        reduce using rule 33 (exp -> term .)
    SEMICOLON       reduce using rule 33 (exp -> term .)
    COMMA           reduce using rule 33 (exp -> term .)
    RGTPAREN        reduce using rule 33 (exp -> term .)
    RGTBRACSQR      reduce using rule 33 (exp -> term .)
    PLUS            shift and go to state 98
    MINUS           shift and go to state 99


state 74

    (28) constant -> FALSE .

    MULTIPLICATION  reduce using rule 28 (constant -> FALSE .)
    DIVISION        reduce using rule 28 (constant -> FALSE .)
    PLUS            reduce using rule 28 (constant -> FALSE .)
    MINUS           reduce using rule 28 (constant -> FALSE .)
    AND             reduce using rule 28 (constant -> FALSE .)
    DOUBEQUAL       reduce using rule 28 (constant -> FALSE .)
    NOT             reduce using rule 28 (constant -> FALSE .)
    OR              reduce using rule 28 (constant -> FALSE .)
    LESSTHANEQUAL   reduce using rule 28 (constant -> FALSE .)
    GREATTHANEQUAL  reduce using rule 28 (constant -> FALSE .)
    GREATTHAN       reduce using rule 28 (constant -> FALSE .)
    LESSTHAN        reduce using rule 28 (constant -> FALSE .)
    SEMICOLON       reduce using rule 28 (constant -> FALSE .)
    COMMA           reduce using rule 28 (constant -> FALSE .)
    RGTPAREN        reduce using rule 28 (constant -> FALSE .)
    RGTBRACSQR      reduce using rule 28 (constant -> FALSE .)


state 75

    (31) cteN -> INT .

    RGTPAREN        reduce using rule 31 (cteN -> INT .)
    COMMA           reduce using rule 31 (cteN -> INT .)
    RGTBRACSQR      reduce using rule 31 (cteN -> INT .)
    MULTIPLICATION  reduce using rule 31 (cteN -> INT .)
    DIVISION        reduce using rule 31 (cteN -> INT .)
    PLUS            reduce using rule 31 (cteN -> INT .)
    MINUS           reduce using rule 31 (cteN -> INT .)
    SEMICOLON       reduce using rule 31 (cteN -> INT .)
    AND             reduce using rule 31 (cteN -> INT .)
    DOUBEQUAL       reduce using rule 31 (cteN -> INT .)
    NOT             reduce using rule 31 (cteN -> INT .)
    OR              reduce using rule 31 (cteN -> INT .)
    LESSTHANEQUAL   reduce using rule 31 (cteN -> INT .)
    GREATTHANEQUAL  reduce using rule 31 (cteN -> INT .)
    GREATTHAN       reduce using rule 31 (cteN -> INT .)
    LESSTHAN        reduce using rule 31 (cteN -> INT .)


state 76

    (30) cteN -> FLOAT .

    RGTPAREN        reduce using rule 30 (cteN -> FLOAT .)
    COMMA           reduce using rule 30 (cteN -> FLOAT .)
    RGTBRACSQR      reduce using rule 30 (cteN -> FLOAT .)
    MULTIPLICATION  reduce using rule 30 (cteN -> FLOAT .)
    DIVISION        reduce using rule 30 (cteN -> FLOAT .)
    PLUS            reduce using rule 30 (cteN -> FLOAT .)
    MINUS           reduce using rule 30 (cteN -> FLOAT .)
    SEMICOLON       reduce using rule 30 (cteN -> FLOAT .)
    AND             reduce using rule 30 (cteN -> FLOAT .)
    DOUBEQUAL       reduce using rule 30 (cteN -> FLOAT .)
    NOT             reduce using rule 30 (cteN -> FLOAT .)
    OR              reduce using rule 30 (cteN -> FLOAT .)
    LESSTHANEQUAL   reduce using rule 30 (cteN -> FLOAT .)
    GREATTHANEQUAL  reduce using rule 30 (cteN -> FLOAT .)
    GREATTHAN       reduce using rule 30 (cteN -> FLOAT .)
    LESSTHAN        reduce using rule 30 (cteN -> FLOAT .)


state 77

    (40) expression -> exp .
    (41) expression -> exp . expressionaux exp
    (42) expressionaux -> . AND
    (43) expressionaux -> . DOUBEQUAL
    (44) expressionaux -> . NOT
    (45) expressionaux -> . OR
    (46) expressionaux -> . LESSTHANEQUAL
    (47) expressionaux -> . GREATTHANEQUAL
    (48) expressionaux -> . GREATTHAN
    (49) expressionaux -> . LESSTHAN

    RGTPAREN        reduce using rule 40 (expression -> exp .)
    SEMICOLON       reduce using rule 40 (expression -> exp .)
    COMMA           reduce using rule 40 (expression -> exp .)
    AND             shift and go to state 100
    DOUBEQUAL       shift and go to state 107
    NOT             shift and go to state 106
    OR              shift and go to state 108
    LESSTHANEQUAL   shift and go to state 104
    GREATTHANEQUAL  shift and go to state 102
    GREATTHAN       shift and go to state 103
    LESSTHAN        shift and go to state 105

    expressionaux                  shift and go to state 101

state 78

    (74) varsaux -> ID codeAddVar EQUAL expression . SEMICOLON
    (75) varsaux -> ID codeAddVar EQUAL expression . COMMA varsaux

    SEMICOLON       shift and go to state 109
    COMMA           shift and go to state 110


state 79

    (70) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN . parameter RGTPAREN blockreturn codeScope
    (52) parameter -> . type ID codeAddParameters
    (53) parameter -> . type ID codeAddParameters COMMA parameter
    (54) parameter -> . empty
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType
    (85) empty -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10
    RGTPAREN        reduce using rule 85 (empty -> .)

    type                           shift and go to state 111
    parameter                      shift and go to state 112
    empty                          shift and go to state 113

state 80

    (15) blockneutral -> vars blockneutral .

    RGTBRAC         reduce using rule 15 (blockneutral -> vars blockneutral .)
    RETURN          reduce using rule 15 (blockneutral -> vars blockneutral .)


state 81

    (82) read -> READ LFTPAREN . readaux RGTPAREN SEMICOLON
    (83) readaux -> . ID
    (84) readaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    ID              shift and go to state 116

    readaux                        shift and go to state 114
    array                          shift and go to state 115

state 82

    (50) loop -> WHILE LFTPAREN . expression RGTPAREN block
    (40) expression -> . exp
    (41) expression -> . exp expressionaux exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    term                           shift and go to state 73
    constant                       shift and go to state 61
    cteS                           shift and go to state 62
    cteN                           shift and go to state 64
    call2                          shift and go to state 66
    exp                            shift and go to state 77
    factor                         shift and go to state 68
    array                          shift and go to state 63
    expression                     shift and go to state 117

state 83

    (51) write -> PRINT LFTPAREN . constant RGTPAREN SEMICOLON
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    constant                       shift and go to state 118
    call2                          shift and go to state 66
    array                          shift and go to state 63
    cteN                           shift and go to state 64

state 84

    (14) blockneutral -> statement blockneutral .

    RGTBRAC         reduce using rule 14 (blockneutral -> statement blockneutral .)
    RETURN          reduce using rule 14 (blockneutral -> statement blockneutral .)


state 85

    (9) assignment -> assignmentaux EQUAL . expression SEMICOLON
    (40) expression -> . exp
    (41) expression -> . exp expressionaux exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    term                           shift and go to state 73
    constant                       shift and go to state 61
    cteS                           shift and go to state 62
    cteN                           shift and go to state 64
    call2                          shift and go to state 66
    exp                            shift and go to state 77
    factor                         shift and go to state 68
    array                          shift and go to state 63
    expression                     shift and go to state 119

state 86

    (78) call -> ID LFTPAREN . exp callaux RGTPAREN SEMICOLON
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 120
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 87

    (5) array -> ID LFTBRACSQR . exp RGTBRACSQR
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 121
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 88

    (20) conditionaux -> LFTPAREN . expression RGTPAREN block conditionaux2
    (40) expression -> . exp
    (41) expression -> . exp expressionaux exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    term                           shift and go to state 73
    constant                       shift and go to state 61
    cteS                           shift and go to state 62
    cteN                           shift and go to state 64
    call2                          shift and go to state 66
    exp                            shift and go to state 77
    factor                         shift and go to state 68
    array                          shift and go to state 63
    expression                     shift and go to state 122

state 89

    (18) condition -> IF conditionaux .
    (19) condition -> IF conditionaux . ELSE block

    IF              reduce using rule 18 (condition -> IF conditionaux .)
    WHILE           reduce using rule 18 (condition -> IF conditionaux .)
    PRINT           reduce using rule 18 (condition -> IF conditionaux .)
    READ            reduce using rule 18 (condition -> IF conditionaux .)
    ID              reduce using rule 18 (condition -> IF conditionaux .)
    INT             reduce using rule 18 (condition -> IF conditionaux .)
    FLOAT           reduce using rule 18 (condition -> IF conditionaux .)
    CHAR            reduce using rule 18 (condition -> IF conditionaux .)
    BOOL            reduce using rule 18 (condition -> IF conditionaux .)
    STRING          reduce using rule 18 (condition -> IF conditionaux .)
    RGTBRAC         reduce using rule 18 (condition -> IF conditionaux .)
    RETURN          reduce using rule 18 (condition -> IF conditionaux .)
    ELSE            shift and go to state 123


state 90

    (17) block -> LFTBRAC blockneutral RGTBRAC .

    ELSEIF          reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSE            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    IF              reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    WHILE           reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    PRINT           reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    READ            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    ID              reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    INT             reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    FLOAT           reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    CHAR            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    BOOL            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    STRING          reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    RGTBRAC         reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    RETURN          reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)


state 91

    (76) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvalues SEMICOLON
    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvalues COMMA varsaux

    EQUAL           shift and go to state 124


state 92

    (37) factor -> MINUS constant .

    MULTIPLICATION  reduce using rule 37 (factor -> MINUS constant .)
    DIVISION        reduce using rule 37 (factor -> MINUS constant .)
    PLUS            reduce using rule 37 (factor -> MINUS constant .)
    MINUS           reduce using rule 37 (factor -> MINUS constant .)
    SEMICOLON       reduce using rule 37 (factor -> MINUS constant .)
    COMMA           reduce using rule 37 (factor -> MINUS constant .)
    RGTPAREN        reduce using rule 37 (factor -> MINUS constant .)
    AND             reduce using rule 37 (factor -> MINUS constant .)
    DOUBEQUAL       reduce using rule 37 (factor -> MINUS constant .)
    NOT             reduce using rule 37 (factor -> MINUS constant .)
    OR              reduce using rule 37 (factor -> MINUS constant .)
    LESSTHANEQUAL   reduce using rule 37 (factor -> MINUS constant .)
    GREATTHANEQUAL  reduce using rule 37 (factor -> MINUS constant .)
    GREATTHAN       reduce using rule 37 (factor -> MINUS constant .)
    LESSTHAN        reduce using rule 37 (factor -> MINUS constant .)
    RGTBRACSQR      reduce using rule 37 (factor -> MINUS constant .)


state 93

    (55) term -> factor MULTIPLICATION . term
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 125
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 94

    (56) term -> factor DIVISION . term
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 126
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 95

    (36) factor -> PLUS constant .

    MULTIPLICATION  reduce using rule 36 (factor -> PLUS constant .)
    DIVISION        reduce using rule 36 (factor -> PLUS constant .)
    PLUS            reduce using rule 36 (factor -> PLUS constant .)
    MINUS           reduce using rule 36 (factor -> PLUS constant .)
    SEMICOLON       reduce using rule 36 (factor -> PLUS constant .)
    COMMA           reduce using rule 36 (factor -> PLUS constant .)
    RGTPAREN        reduce using rule 36 (factor -> PLUS constant .)
    AND             reduce using rule 36 (factor -> PLUS constant .)
    DOUBEQUAL       reduce using rule 36 (factor -> PLUS constant .)
    NOT             reduce using rule 36 (factor -> PLUS constant .)
    OR              reduce using rule 36 (factor -> PLUS constant .)
    LESSTHANEQUAL   reduce using rule 36 (factor -> PLUS constant .)
    GREATTHANEQUAL  reduce using rule 36 (factor -> PLUS constant .)
    GREATTHAN       reduce using rule 36 (factor -> PLUS constant .)
    LESSTHAN        reduce using rule 36 (factor -> PLUS constant .)
    RGTBRACSQR      reduce using rule 36 (factor -> PLUS constant .)


state 96

    (38) factor -> LFTPAREN expression . RGTPAREN

    RGTPAREN        shift and go to state 127


state 97

    (81) call2 -> ID LFTPAREN . exp callaux RGTPAREN
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 128
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 98

    (34) exp -> term PLUS . exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 129
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 99

    (35) exp -> term MINUS . exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 130
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 100

    (42) expressionaux -> AND .

    PLUS            reduce using rule 42 (expressionaux -> AND .)
    MINUS           reduce using rule 42 (expressionaux -> AND .)
    LFTPAREN        reduce using rule 42 (expressionaux -> AND .)
    ID              reduce using rule 42 (expressionaux -> AND .)
    TRUE            reduce using rule 42 (expressionaux -> AND .)
    FALSE           reduce using rule 42 (expressionaux -> AND .)
    FLOAT           reduce using rule 42 (expressionaux -> AND .)
    INT             reduce using rule 42 (expressionaux -> AND .)
    STRING          reduce using rule 42 (expressionaux -> AND .)


state 101

    (41) expression -> exp expressionaux . exp
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    term                           shift and go to state 73
    constant                       shift and go to state 61
    cteS                           shift and go to state 62
    cteN                           shift and go to state 64
    call2                          shift and go to state 66
    exp                            shift and go to state 131
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 102

    (47) expressionaux -> GREATTHANEQUAL .

    PLUS            reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    MINUS           reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    LFTPAREN        reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    ID              reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    TRUE            reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    FALSE           reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    FLOAT           reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    INT             reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)
    STRING          reduce using rule 47 (expressionaux -> GREATTHANEQUAL .)


state 103

    (48) expressionaux -> GREATTHAN .

    PLUS            reduce using rule 48 (expressionaux -> GREATTHAN .)
    MINUS           reduce using rule 48 (expressionaux -> GREATTHAN .)
    LFTPAREN        reduce using rule 48 (expressionaux -> GREATTHAN .)
    ID              reduce using rule 48 (expressionaux -> GREATTHAN .)
    TRUE            reduce using rule 48 (expressionaux -> GREATTHAN .)
    FALSE           reduce using rule 48 (expressionaux -> GREATTHAN .)
    FLOAT           reduce using rule 48 (expressionaux -> GREATTHAN .)
    INT             reduce using rule 48 (expressionaux -> GREATTHAN .)
    STRING          reduce using rule 48 (expressionaux -> GREATTHAN .)


state 104

    (46) expressionaux -> LESSTHANEQUAL .

    PLUS            reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    MINUS           reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    LFTPAREN        reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    ID              reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    TRUE            reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    FALSE           reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    FLOAT           reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    INT             reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)
    STRING          reduce using rule 46 (expressionaux -> LESSTHANEQUAL .)


state 105

    (49) expressionaux -> LESSTHAN .

    PLUS            reduce using rule 49 (expressionaux -> LESSTHAN .)
    MINUS           reduce using rule 49 (expressionaux -> LESSTHAN .)
    LFTPAREN        reduce using rule 49 (expressionaux -> LESSTHAN .)
    ID              reduce using rule 49 (expressionaux -> LESSTHAN .)
    TRUE            reduce using rule 49 (expressionaux -> LESSTHAN .)
    FALSE           reduce using rule 49 (expressionaux -> LESSTHAN .)
    FLOAT           reduce using rule 49 (expressionaux -> LESSTHAN .)
    INT             reduce using rule 49 (expressionaux -> LESSTHAN .)
    STRING          reduce using rule 49 (expressionaux -> LESSTHAN .)


state 106

    (44) expressionaux -> NOT .

    PLUS            reduce using rule 44 (expressionaux -> NOT .)
    MINUS           reduce using rule 44 (expressionaux -> NOT .)
    LFTPAREN        reduce using rule 44 (expressionaux -> NOT .)
    ID              reduce using rule 44 (expressionaux -> NOT .)
    TRUE            reduce using rule 44 (expressionaux -> NOT .)
    FALSE           reduce using rule 44 (expressionaux -> NOT .)
    FLOAT           reduce using rule 44 (expressionaux -> NOT .)
    INT             reduce using rule 44 (expressionaux -> NOT .)
    STRING          reduce using rule 44 (expressionaux -> NOT .)


state 107

    (43) expressionaux -> DOUBEQUAL .

    PLUS            reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    MINUS           reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    LFTPAREN        reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    ID              reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    TRUE            reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    FALSE           reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    FLOAT           reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    INT             reduce using rule 43 (expressionaux -> DOUBEQUAL .)
    STRING          reduce using rule 43 (expressionaux -> DOUBEQUAL .)


state 108

    (45) expressionaux -> OR .

    PLUS            reduce using rule 45 (expressionaux -> OR .)
    MINUS           reduce using rule 45 (expressionaux -> OR .)
    LFTPAREN        reduce using rule 45 (expressionaux -> OR .)
    ID              reduce using rule 45 (expressionaux -> OR .)
    TRUE            reduce using rule 45 (expressionaux -> OR .)
    FALSE           reduce using rule 45 (expressionaux -> OR .)
    FLOAT           reduce using rule 45 (expressionaux -> OR .)
    INT             reduce using rule 45 (expressionaux -> OR .)
    STRING          reduce using rule 45 (expressionaux -> OR .)


state 109

    (74) varsaux -> ID codeAddVar EQUAL expression SEMICOLON .

    FUNCTION        reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    INT             reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    STRING          reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    PRIOMH          reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    IF              reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    READ            reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    ID              reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 74 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)


state 110

    (75) varsaux -> ID codeAddVar EQUAL expression COMMA . varsaux
    (74) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (75) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (76) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 132

state 111

    (52) parameter -> type . ID codeAddParameters
    (53) parameter -> type . ID codeAddParameters COMMA parameter

    ID              shift and go to state 133


state 112

    (70) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter . RGTPAREN blockreturn codeScope

    RGTPAREN        shift and go to state 134


state 113

    (54) parameter -> empty .

    RGTPAREN        reduce using rule 54 (parameter -> empty .)


state 114

    (82) read -> READ LFTPAREN readaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 135


state 115

    (84) readaux -> array .

    RGTPAREN        reduce using rule 84 (readaux -> array .)


state 116

    (83) readaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    RGTPAREN        reduce using rule 83 (readaux -> ID .)
    LFTBRACSQR      shift and go to state 87


state 117

    (50) loop -> WHILE LFTPAREN expression . RGTPAREN block

    RGTPAREN        shift and go to state 136


state 118

    (51) write -> PRINT LFTPAREN constant . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 137


state 119

    (9) assignment -> assignmentaux EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 138


state 120

    (78) call -> ID LFTPAREN exp . callaux RGTPAREN SEMICOLON
    (79) callaux -> . COMMA exp callaux
    (80) callaux -> . empty
    (85) empty -> .

    COMMA           shift and go to state 140
    RGTPAREN        reduce using rule 85 (empty -> .)

    empty                          shift and go to state 141
    callaux                        shift and go to state 139

state 121

    (5) array -> ID LFTBRACSQR exp . RGTBRACSQR

    RGTBRACSQR      shift and go to state 142


state 122

    (20) conditionaux -> LFTPAREN expression . RGTPAREN block conditionaux2

    RGTPAREN        shift and go to state 143


state 123

    (19) condition -> IF conditionaux ELSE . block
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 37

    block                          shift and go to state 144

state 124

    (76) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvalues SEMICOLON
    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvalues COMMA varsaux
    (6) arrayvalues -> . LFTBRACSQR arrayvaluesaux RGTBRACSQR

    LFTBRACSQR      shift and go to state 145

    arrayvalues                    shift and go to state 146

state 125

    (55) term -> factor MULTIPLICATION term .

    PLUS            reduce using rule 55 (term -> factor MULTIPLICATION term .)
    MINUS           reduce using rule 55 (term -> factor MULTIPLICATION term .)
    SEMICOLON       reduce using rule 55 (term -> factor MULTIPLICATION term .)
    COMMA           reduce using rule 55 (term -> factor MULTIPLICATION term .)
    RGTPAREN        reduce using rule 55 (term -> factor MULTIPLICATION term .)
    AND             reduce using rule 55 (term -> factor MULTIPLICATION term .)
    DOUBEQUAL       reduce using rule 55 (term -> factor MULTIPLICATION term .)
    NOT             reduce using rule 55 (term -> factor MULTIPLICATION term .)
    OR              reduce using rule 55 (term -> factor MULTIPLICATION term .)
    LESSTHANEQUAL   reduce using rule 55 (term -> factor MULTIPLICATION term .)
    GREATTHANEQUAL  reduce using rule 55 (term -> factor MULTIPLICATION term .)
    GREATTHAN       reduce using rule 55 (term -> factor MULTIPLICATION term .)
    LESSTHAN        reduce using rule 55 (term -> factor MULTIPLICATION term .)
    RGTBRACSQR      reduce using rule 55 (term -> factor MULTIPLICATION term .)


state 126

    (56) term -> factor DIVISION term .

    PLUS            reduce using rule 56 (term -> factor DIVISION term .)
    MINUS           reduce using rule 56 (term -> factor DIVISION term .)
    SEMICOLON       reduce using rule 56 (term -> factor DIVISION term .)
    COMMA           reduce using rule 56 (term -> factor DIVISION term .)
    RGTPAREN        reduce using rule 56 (term -> factor DIVISION term .)
    AND             reduce using rule 56 (term -> factor DIVISION term .)
    DOUBEQUAL       reduce using rule 56 (term -> factor DIVISION term .)
    NOT             reduce using rule 56 (term -> factor DIVISION term .)
    OR              reduce using rule 56 (term -> factor DIVISION term .)
    LESSTHANEQUAL   reduce using rule 56 (term -> factor DIVISION term .)
    GREATTHANEQUAL  reduce using rule 56 (term -> factor DIVISION term .)
    GREATTHAN       reduce using rule 56 (term -> factor DIVISION term .)
    LESSTHAN        reduce using rule 56 (term -> factor DIVISION term .)
    RGTBRACSQR      reduce using rule 56 (term -> factor DIVISION term .)


state 127

    (38) factor -> LFTPAREN expression RGTPAREN .

    MULTIPLICATION  reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    DIVISION        reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    PLUS            reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    MINUS           reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    SEMICOLON       reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    COMMA           reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    RGTPAREN        reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    AND             reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    DOUBEQUAL       reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    NOT             reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    OR              reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    GREATTHAN       reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    LESSTHAN        reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    RGTBRACSQR      reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)


state 128

    (81) call2 -> ID LFTPAREN exp . callaux RGTPAREN
    (79) callaux -> . COMMA exp callaux
    (80) callaux -> . empty
    (85) empty -> .

    COMMA           shift and go to state 140
    RGTPAREN        reduce using rule 85 (empty -> .)

    empty                          shift and go to state 141
    callaux                        shift and go to state 147

state 129

    (34) exp -> term PLUS exp .

    AND             reduce using rule 34 (exp -> term PLUS exp .)
    DOUBEQUAL       reduce using rule 34 (exp -> term PLUS exp .)
    NOT             reduce using rule 34 (exp -> term PLUS exp .)
    OR              reduce using rule 34 (exp -> term PLUS exp .)
    LESSTHANEQUAL   reduce using rule 34 (exp -> term PLUS exp .)
    GREATTHANEQUAL  reduce using rule 34 (exp -> term PLUS exp .)
    GREATTHAN       reduce using rule 34 (exp -> term PLUS exp .)
    LESSTHAN        reduce using rule 34 (exp -> term PLUS exp .)
    SEMICOLON       reduce using rule 34 (exp -> term PLUS exp .)
    COMMA           reduce using rule 34 (exp -> term PLUS exp .)
    RGTPAREN        reduce using rule 34 (exp -> term PLUS exp .)
    RGTBRACSQR      reduce using rule 34 (exp -> term PLUS exp .)


state 130

    (35) exp -> term MINUS exp .

    AND             reduce using rule 35 (exp -> term MINUS exp .)
    DOUBEQUAL       reduce using rule 35 (exp -> term MINUS exp .)
    NOT             reduce using rule 35 (exp -> term MINUS exp .)
    OR              reduce using rule 35 (exp -> term MINUS exp .)
    LESSTHANEQUAL   reduce using rule 35 (exp -> term MINUS exp .)
    GREATTHANEQUAL  reduce using rule 35 (exp -> term MINUS exp .)
    GREATTHAN       reduce using rule 35 (exp -> term MINUS exp .)
    LESSTHAN        reduce using rule 35 (exp -> term MINUS exp .)
    SEMICOLON       reduce using rule 35 (exp -> term MINUS exp .)
    COMMA           reduce using rule 35 (exp -> term MINUS exp .)
    RGTPAREN        reduce using rule 35 (exp -> term MINUS exp .)
    RGTBRACSQR      reduce using rule 35 (exp -> term MINUS exp .)


state 131

    (41) expression -> exp expressionaux exp .

    RGTPAREN        reduce using rule 41 (expression -> exp expressionaux exp .)
    SEMICOLON       reduce using rule 41 (expression -> exp expressionaux exp .)
    COMMA           reduce using rule 41 (expression -> exp expressionaux exp .)


state 132

    (75) varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .

    FUNCTION        reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    INT             reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    FLOAT           reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    CHAR            reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    BOOL            reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    STRING          reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    PRIOMH          reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    IF              reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    WHILE           reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    PRINT           reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    READ            reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    ID              reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    RGTBRAC         reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    RETURN          reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)


state 133

    (52) parameter -> type ID . codeAddParameters
    (53) parameter -> type ID . codeAddParameters COMMA parameter
    (90) codeAddParameters -> .

    COMMA           reduce using rule 90 (codeAddParameters -> .)
    RGTPAREN        reduce using rule 90 (codeAddParameters -> .)

    codeAddParameters              shift and go to state 148

state 134

    (70) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN . blockreturn codeScope
    (12) blockreturn -> . LFTBRAC blockneutral RGTBRAC
    (13) blockreturn -> . LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC

    LFTBRAC         shift and go to state 149

    blockreturn                    shift and go to state 150

state 135

    (82) read -> READ LFTPAREN readaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 151


state 136

    (50) loop -> WHILE LFTPAREN expression RGTPAREN . block
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 37

    block                          shift and go to state 152

state 137

    (51) write -> PRINT LFTPAREN constant RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 138

    (9) assignment -> assignmentaux EQUAL expression SEMICOLON .

    IF              reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    READ            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    ID              reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    INT             reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    STRING          reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)


state 139

    (78) call -> ID LFTPAREN exp callaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 154


state 140

    (79) callaux -> COMMA . exp callaux
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 155
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 141

    (80) callaux -> empty .

    RGTPAREN        reduce using rule 80 (callaux -> empty .)


state 142

    (5) array -> ID LFTBRACSQR exp RGTBRACSQR .

    MULTIPLICATION  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DIVISION        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    PLUS            reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MINUS           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTBRACSQR      reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    COMMA           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    AND             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DOUBEQUAL       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    NOT             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    OR              reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHANEQUAL   reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHANEQUAL  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHAN       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHAN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    SEMICOLON       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTPAREN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    EQUAL           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)


state 143

    (20) conditionaux -> LFTPAREN expression RGTPAREN . block conditionaux2
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 37

    block                          shift and go to state 156

state 144

    (19) condition -> IF conditionaux ELSE block .

    IF              reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    WHILE           reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    PRINT           reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    READ            reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    ID              reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    INT             reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    FLOAT           reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    CHAR            reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    BOOL            reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    STRING          reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    RGTBRAC         reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    RETURN          reduce using rule 19 (condition -> IF conditionaux ELSE block .)


state 145

    (6) arrayvalues -> LFTBRACSQR . arrayvaluesaux RGTBRACSQR
    (7) arrayvaluesaux -> . constant
    (8) arrayvaluesaux -> . constant COMMA arrayvaluesaux
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    constant                       shift and go to state 157
    call2                          shift and go to state 66
    array                          shift and go to state 63
    cteN                           shift and go to state 64
    arrayvaluesaux                 shift and go to state 158

state 146

    (76) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues . SEMICOLON
    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues . COMMA varsaux

    SEMICOLON       shift and go to state 159
    COMMA           shift and go to state 160


state 147

    (81) call2 -> ID LFTPAREN exp callaux . RGTPAREN

    RGTPAREN        shift and go to state 161


state 148

    (52) parameter -> type ID codeAddParameters .
    (53) parameter -> type ID codeAddParameters . COMMA parameter

    RGTPAREN        reduce using rule 52 (parameter -> type ID codeAddParameters .)
    COMMA           shift and go to state 162


state 149

    (12) blockreturn -> LFTBRAC . blockneutral RGTBRAC
    (13) blockreturn -> LFTBRAC . blockneutral RETURN exp SEMICOLON RGTBRAC
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (58) statement -> . assignment
    (59) statement -> . condition
    (60) statement -> . loop
    (61) statement -> . write
    (62) statement -> . read
    (63) statement -> . call
    (73) vars -> . type varsaux
    (85) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (50) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (51) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (82) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (78) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    IF              shift and go to state 57
    WHILE           shift and go to state 45
    PRINT           shift and go to state 46
    READ            shift and go to state 44
    ID              shift and go to state 55
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 43
    array                          shift and go to state 47
    write                          shift and go to state 48
    call                           shift and go to state 50
    statement                      shift and go to state 51
    type                           shift and go to state 12
    empty                          shift and go to state 52
    read                           shift and go to state 49
    assignment                     shift and go to state 53
    assignmentaux                  shift and go to state 54
    condition                      shift and go to state 56
    blockneutral                   shift and go to state 163
    loop                           shift and go to state 59

state 150

    (70) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn . codeScope
    (86) codeScope -> .

    FUNCTION        reduce using rule 86 (codeScope -> .)
    INT             reduce using rule 86 (codeScope -> .)
    FLOAT           reduce using rule 86 (codeScope -> .)
    CHAR            reduce using rule 86 (codeScope -> .)
    BOOL            reduce using rule 86 (codeScope -> .)
    STRING          reduce using rule 86 (codeScope -> .)
    PRIOMH          reduce using rule 86 (codeScope -> .)

    codeScope                      shift and go to state 164

state 151

    (82) read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .

    IF              reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 82 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)


state 152

    (50) loop -> WHILE LFTPAREN expression RGTPAREN block .

    IF              reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    WHILE           reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    PRINT           reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    READ            reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    ID              reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    INT             reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    FLOAT           reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    CHAR            reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    BOOL            reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    STRING          reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    RGTBRAC         reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    RETURN          reduce using rule 50 (loop -> WHILE LFTPAREN expression RGTPAREN block .)


state 153

    (51) write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .

    IF              reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    READ            reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    ID              reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    INT             reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    STRING          reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 51 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)


state 154

    (78) call -> ID LFTPAREN exp callaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 155

    (79) callaux -> COMMA exp . callaux
    (79) callaux -> . COMMA exp callaux
    (80) callaux -> . empty
    (85) empty -> .

    COMMA           shift and go to state 140
    RGTPAREN        reduce using rule 85 (empty -> .)

    empty                          shift and go to state 141
    callaux                        shift and go to state 166

state 156

    (20) conditionaux -> LFTPAREN expression RGTPAREN block . conditionaux2
    (21) conditionaux2 -> . ELSEIF conditionaux
    (22) conditionaux2 -> . empty
    (85) empty -> .

    ELSEIF          shift and go to state 169
    ELSE            reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    PRINT           reduce using rule 85 (empty -> .)
    READ            reduce using rule 85 (empty -> .)
    ID              reduce using rule 85 (empty -> .)
    INT             reduce using rule 85 (empty -> .)
    FLOAT           reduce using rule 85 (empty -> .)
    CHAR            reduce using rule 85 (empty -> .)
    BOOL            reduce using rule 85 (empty -> .)
    STRING          reduce using rule 85 (empty -> .)
    RGTBRAC         reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)

    empty                          shift and go to state 168
    conditionaux2                  shift and go to state 167

state 157

    (7) arrayvaluesaux -> constant .
    (8) arrayvaluesaux -> constant . COMMA arrayvaluesaux

    RGTBRACSQR      reduce using rule 7 (arrayvaluesaux -> constant .)
    COMMA           shift and go to state 170


state 158

    (6) arrayvalues -> LFTBRACSQR arrayvaluesaux . RGTBRACSQR

    RGTBRACSQR      shift and go to state 171


state 159

    (76) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .

    FUNCTION        reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    INT             reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    FLOAT           reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    CHAR            reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    BOOL            reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    STRING          reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    PRIOMH          reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    IF              reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    WHILE           reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    PRINT           reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    READ            reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    ID              reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    RGTBRAC         reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    RETURN          reduce using rule 76 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)


state 160

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA . varsaux
    (74) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (75) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (76) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (77) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 172

state 161

    (81) call2 -> ID LFTPAREN exp callaux RGTPAREN .

    MULTIPLICATION  reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DIVISION        reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    PLUS            reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    MINUS           reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    AND             reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DOUBEQUAL       reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    NOT             reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    OR              reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHAN       reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHAN        reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTPAREN        reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    SEMICOLON       reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    COMMA           reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTBRACSQR      reduce using rule 81 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)


state 162

    (53) parameter -> type ID codeAddParameters COMMA . parameter
    (52) parameter -> . type ID codeAddParameters
    (53) parameter -> . type ID codeAddParameters COMMA parameter
    (54) parameter -> . empty
    (64) type -> . INT checkType
    (65) type -> . FLOAT checkType
    (66) type -> . CHAR checkType
    (67) type -> . BOOL checkType
    (68) type -> . STRING checkType
    (85) empty -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10
    RGTPAREN        reduce using rule 85 (empty -> .)

    parameter                      shift and go to state 173
    type                           shift and go to state 111
    empty                          shift and go to state 113

state 163

    (12) blockreturn -> LFTBRAC blockneutral . RGTBRAC
    (13) blockreturn -> LFTBRAC blockneutral . RETURN exp SEMICOLON RGTBRAC

    RGTBRAC         shift and go to state 175
    RETURN          shift and go to state 174


state 164

    (70) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .

    FUNCTION        reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    INT             reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    FLOAT           reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    CHAR            reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    BOOL            reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    STRING          reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    PRIOMH          reduce using rule 70 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)


state 165

    (78) call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .

    IF              reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 78 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)


state 166

    (79) callaux -> COMMA exp callaux .

    RGTPAREN        reduce using rule 79 (callaux -> COMMA exp callaux .)


state 167

    (20) conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .

    ELSE            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    IF              reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    WHILE           reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    PRINT           reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    READ            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    ID              reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    INT             reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    FLOAT           reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    CHAR            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    BOOL            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    STRING          reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RGTBRAC         reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RETURN          reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)


state 168

    (22) conditionaux2 -> empty .

    ELSE            reduce using rule 22 (conditionaux2 -> empty .)
    IF              reduce using rule 22 (conditionaux2 -> empty .)
    WHILE           reduce using rule 22 (conditionaux2 -> empty .)
    PRINT           reduce using rule 22 (conditionaux2 -> empty .)
    READ            reduce using rule 22 (conditionaux2 -> empty .)
    ID              reduce using rule 22 (conditionaux2 -> empty .)
    INT             reduce using rule 22 (conditionaux2 -> empty .)
    FLOAT           reduce using rule 22 (conditionaux2 -> empty .)
    CHAR            reduce using rule 22 (conditionaux2 -> empty .)
    BOOL            reduce using rule 22 (conditionaux2 -> empty .)
    STRING          reduce using rule 22 (conditionaux2 -> empty .)
    RGTBRAC         reduce using rule 22 (conditionaux2 -> empty .)
    RETURN          reduce using rule 22 (conditionaux2 -> empty .)


state 169

    (21) conditionaux2 -> ELSEIF . conditionaux
    (20) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 88

    conditionaux                   shift and go to state 176

state 170

    (8) arrayvaluesaux -> constant COMMA . arrayvaluesaux
    (7) arrayvaluesaux -> . constant
    (8) arrayvaluesaux -> . constant COMMA arrayvaluesaux
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    constant                       shift and go to state 157
    call2                          shift and go to state 66
    array                          shift and go to state 63
    cteN                           shift and go to state 64
    arrayvaluesaux                 shift and go to state 177

state 171

    (6) arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .

    SEMICOLON       reduce using rule 6 (arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .)
    COMMA           reduce using rule 6 (arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .)


state 172

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .

    FUNCTION        reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    INT             reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    FLOAT           reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    CHAR            reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    BOOL            reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    STRING          reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    PRIOMH          reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    IF              reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    WHILE           reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    PRINT           reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    READ            reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    ID              reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    RGTBRAC         reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    RETURN          reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)


state 173

    (53) parameter -> type ID codeAddParameters COMMA parameter .

    RGTPAREN        reduce using rule 53 (parameter -> type ID codeAddParameters COMMA parameter .)


state 174

    (13) blockreturn -> LFTBRAC blockneutral RETURN . exp SEMICOLON RGTBRAC
    (33) exp -> . term
    (34) exp -> . term PLUS exp
    (35) exp -> . term MINUS exp
    (55) term -> . factor MULTIPLICATION term
    (56) term -> . factor DIVISION term
    (57) term -> . factor
    (36) factor -> . PLUS constant
    (37) factor -> . MINUS constant
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT
    (31) cteN -> . INT
    (32) cteS -> . STRING
    (81) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    PLUS            shift and go to state 69
    MINUS           shift and go to state 65
    LFTPAREN        shift and go to state 71
    ID              shift and go to state 72
    TRUE            shift and go to state 67
    FALSE           shift and go to state 74
    FLOAT           shift and go to state 76
    INT             shift and go to state 75
    STRING          shift and go to state 70

    cteS                           shift and go to state 62
    term                           shift and go to state 73
    constant                       shift and go to state 61
    call2                          shift and go to state 66
    cteN                           shift and go to state 64
    exp                            shift and go to state 178
    factor                         shift and go to state 68
    array                          shift and go to state 63

state 175

    (12) blockreturn -> LFTBRAC blockneutral RGTBRAC .

    FUNCTION        reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    INT             reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    FLOAT           reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    CHAR            reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    BOOL            reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    STRING          reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    PRIOMH          reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)


state 176

    (21) conditionaux2 -> ELSEIF conditionaux .

    ELSE            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    IF              reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    WHILE           reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    PRINT           reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    READ            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    ID              reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    INT             reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    FLOAT           reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    CHAR            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    BOOL            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    STRING          reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    RGTBRAC         reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    RETURN          reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)


state 177

    (8) arrayvaluesaux -> constant COMMA arrayvaluesaux .

    RGTBRACSQR      reduce using rule 8 (arrayvaluesaux -> constant COMMA arrayvaluesaux .)


state 178

    (13) blockreturn -> LFTBRAC blockneutral RETURN exp . SEMICOLON RGTBRAC

    SEMICOLON       shift and go to state 179


state 179

    (13) blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON . RGTBRAC

    RGTBRAC         shift and go to state 180


state 180

    (13) blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .

    FUNCTION        reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    INT             reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    FLOAT           reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    CHAR            reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    BOOL            reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    STRING          reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    PRIOMH          reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)

