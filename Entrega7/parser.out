Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC
Rule 2     auxprogramvars -> vars auxprogramvars
Rule 3     auxprogramvars -> empty
Rule 4     auxprogramfunct -> function auxprogramfunct
Rule 5     auxprogramfunct -> empty
Rule 6     array -> ID LFTBRACSQR exp RGTBRACSQR
Rule 7     arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR
Rule 8     arrayvalsaux -> constant
Rule 9     arrayvalsaux -> constant COMMA arrayvalsaux
Rule 10    assignment -> assignmentaux EQUAL expression SEMICOLON
Rule 11    assignmentaux -> ID
Rule 12    assignmentaux -> array
Rule 13    blockreturn -> LFTBRAC blockneutral RGTBRAC
Rule 14    blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC
Rule 15    blockneutral -> statement blockneutral
Rule 16    blockneutral -> vars blockneutral
Rule 17    blockneutral -> empty
Rule 18    block -> LFTBRAC blockneutral RGTBRAC
Rule 19    condition -> IF conditionaux codeEndIf
Rule 20    condition -> IF conditionaux ELSE codeElse block codeEndIf
Rule 21    conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2
Rule 22    conditionaux2 -> codeNextIf ELSEIF conditionaux
Rule 23    conditionaux2 -> empty
Rule 24    constant -> ID
Rule 25    constant -> array
Rule 26    constant -> cteN
Rule 27    constant -> cteS
Rule 28    constant -> TRUE codeAddConstBool
Rule 29    constant -> FALSE codeAddConstBool
Rule 30    constant -> call codeIsCalll
Rule 31    cteN -> FLOAT codeAddConstNumber
Rule 32    cteN -> INT codeAddConstNumber
Rule 33    cteS -> STRING codeAddConstString
Rule 34    exp -> term
Rule 35    exp -> term PLUS codeAddOperator exp
Rule 36    exp -> term MINUS codeAddOperator exp
Rule 37    factoraux -> constant
Rule 38    factoraux -> PLUS constant
Rule 39    factoraux -> MINUS constant
Rule 40    factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
Rule 41    factor -> factoraux codeAskFactor
Rule 42    expression -> exp
Rule 43    expression -> exp expressionaux codeAddOperator exp codeAskExpression
Rule 44    expressionaux -> AND
Rule 45    expressionaux -> DOUBEQUAL
Rule 46    expressionaux -> NOT
Rule 47    expressionaux -> OR
Rule 48    expressionaux -> LESSTHANEQUAL
Rule 49    expressionaux -> GREATTHANEQUAL
Rule 50    expressionaux -> GREATTHAN
Rule 51    expressionaux -> LESSTHAN
Rule 52    loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
Rule 53    write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON
Rule 54    parameter -> type codeCheckType ID codeAddParameters
Rule 55    parameter -> type codeCheckType ID codeAddParameters COMMA parameter
Rule 56    parameter -> empty
Rule 57    term -> factor MULTIPLICATION codeAddOperator term
Rule 58    term -> factor DIVISION codeAddOperator term
Rule 59    term -> factor codeAskTerm
Rule 60    statement -> assignment
Rule 61    statement -> condition
Rule 62    statement -> loop
Rule 63    statement -> write
Rule 64    statement -> read
Rule 65    statement -> call SEMICOLON
Rule 66    type -> INT
Rule 67    type -> FLOAT
Rule 68    type -> CHAR
Rule 69    type -> BOOL
Rule 70    type -> STRING
Rule 71    main -> codeLocationMain PRIOMH codeScope block
Rule 72    function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
Rule 73    functionaux -> VOID codeTypeVoid codeCheckType
Rule 74    functionaux -> codeFuncIndicator type codeCheckType
Rule 75    vars -> type codeCheckType varsaux
Rule 76    varsaux2 -> COMMA varsaux
Rule 77    varsaux2 -> SEMICOLON
Rule 78    varsaux -> ID codeAddVar EQUAL expression varsaux2
Rule 79    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2
Rule 80    callaux -> codeMovePointer COMMA exp codeAddArguments callaux
Rule 81    callaux -> empty
Rule 82    call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
Rule 83    read -> READ LFTPAREN readaux RGTPAREN SEMICOLON
Rule 84    readaux -> ID
Rule 85    readaux -> array
Rule 86    empty -> <empty>
Rule 87    codeTempReturn -> empty
Rule 88    codeIsCalll -> empty
Rule 89    codeGOSUB -> empty
Rule 90    codeVerifyNull -> empty
Rule 91    codeVerifyNull2 -> empty
Rule 92    codeMovePointer -> empty
Rule 93    codeAddArguments -> empty
Rule 94    codeEraQuad -> empty
Rule 95    codeVerifyFunct -> empty
Rule 96    codeReturnQuad -> <empty>
Rule 97    codeAddFunctQuad -> <empty>
Rule 98    codeLocationMain -> <empty>
Rule 99    codeGOTOMain -> <empty>
Rule 100   codeElse -> <empty>
Rule 101   codeEndIf -> <empty>
Rule 102   codeNextIf -> <empty>
Rule 103   codeGOTOF -> <empty>
Rule 104   codeGOTOWhile -> <empty>
Rule 105   codeWhileCondition -> <empty>
Rule 106   codeScope -> <empty>
Rule 107   codeCheckType -> <empty>
Rule 108   codeAddVar -> <empty>
Rule 109   codeAddVarArreglo -> <empty>
Rule 110   codeAddParameters -> <empty>
Rule 111   codeNameOfFunct -> <empty>
Rule 112   codeTypeVoid -> <empty>
Rule 113   codeFuncIndicator -> <empty>
Rule 114   codeDeleteOpenParen -> empty
Rule 115   codeAddOpenParen -> empty
Rule 116   codeAddConstBool -> empty
Rule 117   codeAddConstString -> empty
Rule 118   codeAddConstNumber -> empty
Rule 119   codeAddOperator -> empty
Rule 120   codeAskTerm -> empty
Rule 121   codeAskFactor -> empty
Rule 122   codeAskExpression -> empty

Terminals, with rules where they appear

AND                  : 44
BOOL                 : 69
CHAR                 : 68
COMMA                : 9 55 76 80
DIVISION             : 58
DOUBEQUAL            : 45
ELSE                 : 20
ELSEIF               : 22
EQUAL                : 10 78 79
FALSE                : 29
FLOAT                : 31 67
FUNCTION             : 72
GREATTHAN            : 50
GREATTHANEQUAL       : 49
ID                   : 1 6 11 24 54 55 72 78 79 82 84
IF                   : 19 20
INT                  : 32 66 79
LESSTHAN             : 51
LESSTHANEQUAL        : 48
LFTBRAC              : 1 13 14 18
LFTBRACSQR           : 6 7 79
LFTPAREN             : 21 40 52 53 72 82 83
MINUS                : 36 39
MULTIPLICATION       : 57
NOT                  : 46
OR                   : 47
PLUS                 : 35 38
PRINT                : 53
PRIOMH               : 71
PROGRAM              : 1
READ                 : 83
RETURN               : 14
RGTBRAC              : 1 13 14 18
RGTBRACSQR           : 6 7 79
RGTPAREN             : 21 40 52 53 72 82 83
SEMICOLON            : 10 14 53 65 77 83
STRING               : 33 70
TRUE                 : 28
VOID                 : 73
WHILE                : 52
error                : 

Nonterminals, with rules where they appear

array                : 12 25 85
arrayvals            : 79
arrayvalsaux         : 7 9
assignment           : 60
assignmentaux        : 10
auxprogramfunct      : 1 4
auxprogramvars       : 1 2
block                : 20 21 52 71
blockneutral         : 13 14 15 16 18
blockreturn          : 72
call                 : 30 65
callaux              : 80 82
codeAddArguments     : 80 82
codeAddConstBool     : 28 29
codeAddConstNumber   : 31 32
codeAddConstString   : 33
codeAddFunctQuad     : 72
codeAddOpenParen     : 40
codeAddOperator      : 35 36 43 57 58
codeAddParameters    : 54 55
codeAddVar           : 78
codeAddVarArreglo    : 79
codeAskExpression    : 43
codeAskFactor        : 40 41
codeAskTerm          : 59
codeCheckType        : 54 55 73 74 75
codeDeleteOpenParen  : 40
codeElse             : 20
codeEndIf            : 19 20
codeEraQuad          : 82
codeFuncIndicator    : 74
codeGOSUB            : 82
codeGOTOF            : 21 52
codeGOTOMain         : 1
codeGOTOWhile        : 52
codeIsCalll          : 30
codeLocationMain     : 71
codeMovePointer      : 80
codeNameOfFunct      : 72
codeNextIf           : 22
codeReturnQuad       : 14
codeScope            : 71 72 72
codeTempReturn       : 82
codeTypeVoid         : 73
codeVerifyFunct      : 82
codeVerifyNull       : 82
codeVerifyNull2      : 
codeWhileCondition   : 52
condition            : 61
conditionaux         : 19 20 22
conditionaux2        : 21
constant             : 8 9 37 38 39 53
cteN                 : 26
cteS                 : 27
empty                : 3 5 17 23 56 81 87 88 89 90 91 92 93 94 95 114 115 116 117 118 119 120 121 122
exp                  : 6 14 35 36 42 43 43 80 82
expression           : 10 21 40 52 78
expressionaux        : 43
factor               : 57 58 59
factoraux            : 41
function             : 4
functionaux          : 72
loop                 : 62
main                 : 1
parameter            : 55 72
program              : 0
read                 : 64
readaux              : 83
statement            : 15
term                 : 34 35 36 57 58
type                 : 54 55 74 75
vars                 : 2 16
varsaux              : 75 76
varsaux2             : 78 79
write                : 63

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC

    LFTBRAC         shift and go to state 4


state 4

    (1) program -> PROGRAM ID LFTBRAC . auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC
    (2) auxprogramvars -> . vars auxprogramvars
    (3) auxprogramvars -> . empty
    (75) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING

    FUNCTION        reduce using rule 86 (empty -> .)
    PRIOMH          reduce using rule 86 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    auxprogramvars                 shift and go to state 5
    vars                           shift and go to state 6
    type                           shift and go to state 12
    empty                          shift and go to state 13

state 5

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars . codeGOTOMain auxprogramfunct main RGTBRAC
    (99) codeGOTOMain -> .

    FUNCTION        reduce using rule 99 (codeGOTOMain -> .)
    PRIOMH          reduce using rule 99 (codeGOTOMain -> .)

    codeGOTOMain                   shift and go to state 14

state 6

    (2) auxprogramvars -> vars . auxprogramvars
    (2) auxprogramvars -> . vars auxprogramvars
    (3) auxprogramvars -> . empty
    (75) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING

    FUNCTION        reduce using rule 86 (empty -> .)
    PRIOMH          reduce using rule 86 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 6
    auxprogramvars                 shift and go to state 15
    type                           shift and go to state 12
    empty                          shift and go to state 13

state 7

    (67) type -> FLOAT .

    ID              reduce using rule 67 (type -> FLOAT .)


state 8

    (66) type -> INT .

    ID              reduce using rule 66 (type -> INT .)


state 9

    (68) type -> CHAR .

    ID              reduce using rule 68 (type -> CHAR .)


state 10

    (69) type -> BOOL .

    ID              reduce using rule 69 (type -> BOOL .)


state 11

    (70) type -> STRING .

    ID              reduce using rule 70 (type -> STRING .)


state 12

    (75) vars -> type . codeCheckType varsaux
    (107) codeCheckType -> .

    ID              reduce using rule 107 (codeCheckType -> .)

    codeCheckType                  shift and go to state 16

state 13

    (3) auxprogramvars -> empty .

    FUNCTION        reduce using rule 3 (auxprogramvars -> empty .)
    PRIOMH          reduce using rule 3 (auxprogramvars -> empty .)


state 14

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain . auxprogramfunct main RGTBRAC
    (4) auxprogramfunct -> . function auxprogramfunct
    (5) auxprogramfunct -> . empty
    (72) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (86) empty -> .

    FUNCTION        shift and go to state 18
    PRIOMH          reduce using rule 86 (empty -> .)

    function                       shift and go to state 17
    auxprogramfunct                shift and go to state 19
    empty                          shift and go to state 20

state 15

    (2) auxprogramvars -> vars auxprogramvars .

    FUNCTION        reduce using rule 2 (auxprogramvars -> vars auxprogramvars .)
    PRIOMH          reduce using rule 2 (auxprogramvars -> vars auxprogramvars .)


state 16

    (75) vars -> type codeCheckType . varsaux
    (78) varsaux -> . ID codeAddVar EQUAL expression varsaux2
    (79) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2

    ID              shift and go to state 21

    varsaux                        shift and go to state 22

state 17

    (4) auxprogramfunct -> function . auxprogramfunct
    (4) auxprogramfunct -> . function auxprogramfunct
    (5) auxprogramfunct -> . empty
    (72) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (86) empty -> .

    FUNCTION        shift and go to state 18
    PRIOMH          reduce using rule 86 (empty -> .)

    function                       shift and go to state 17
    auxprogramfunct                shift and go to state 23
    empty                          shift and go to state 20

state 18

    (72) function -> FUNCTION . codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (106) codeScope -> .

    VOID            reduce using rule 106 (codeScope -> .)
    INT             reduce using rule 106 (codeScope -> .)
    FLOAT           reduce using rule 106 (codeScope -> .)
    CHAR            reduce using rule 106 (codeScope -> .)
    BOOL            reduce using rule 106 (codeScope -> .)
    STRING          reduce using rule 106 (codeScope -> .)

    codeScope                      shift and go to state 24

state 19

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct . main RGTBRAC
    (71) main -> . codeLocationMain PRIOMH codeScope block
    (98) codeLocationMain -> .

    PRIOMH          reduce using rule 98 (codeLocationMain -> .)

    codeLocationMain               shift and go to state 26
    main                           shift and go to state 25

state 20

    (5) auxprogramfunct -> empty .

    PRIOMH          reduce using rule 5 (auxprogramfunct -> empty .)


state 21

    (78) varsaux -> ID . codeAddVar EQUAL expression varsaux2
    (79) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2
    (108) codeAddVar -> .
    (109) codeAddVarArreglo -> .

    EQUAL           reduce using rule 108 (codeAddVar -> .)
    LFTBRACSQR      reduce using rule 109 (codeAddVarArreglo -> .)

    codeAddVar                     shift and go to state 28
    codeAddVarArreglo              shift and go to state 27

state 22

    (75) vars -> type codeCheckType varsaux .

    IF              reduce using rule 75 (vars -> type codeCheckType varsaux .)
    WHILE           reduce using rule 75 (vars -> type codeCheckType varsaux .)
    PRINT           reduce using rule 75 (vars -> type codeCheckType varsaux .)
    READ            reduce using rule 75 (vars -> type codeCheckType varsaux .)
    ID              reduce using rule 75 (vars -> type codeCheckType varsaux .)
    INT             reduce using rule 75 (vars -> type codeCheckType varsaux .)
    FLOAT           reduce using rule 75 (vars -> type codeCheckType varsaux .)
    CHAR            reduce using rule 75 (vars -> type codeCheckType varsaux .)
    BOOL            reduce using rule 75 (vars -> type codeCheckType varsaux .)
    STRING          reduce using rule 75 (vars -> type codeCheckType varsaux .)
    RGTBRAC         reduce using rule 75 (vars -> type codeCheckType varsaux .)
    RETURN          reduce using rule 75 (vars -> type codeCheckType varsaux .)
    FUNCTION        reduce using rule 75 (vars -> type codeCheckType varsaux .)
    PRIOMH          reduce using rule 75 (vars -> type codeCheckType varsaux .)


state 23

    (4) auxprogramfunct -> function auxprogramfunct .

    PRIOMH          reduce using rule 4 (auxprogramfunct -> function auxprogramfunct .)


state 24

    (72) function -> FUNCTION codeScope . functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (73) functionaux -> . VOID codeTypeVoid codeCheckType
    (74) functionaux -> . codeFuncIndicator type codeCheckType
    (113) codeFuncIndicator -> .

    VOID            shift and go to state 31
    INT             reduce using rule 113 (codeFuncIndicator -> .)
    FLOAT           reduce using rule 113 (codeFuncIndicator -> .)
    CHAR            reduce using rule 113 (codeFuncIndicator -> .)
    BOOL            reduce using rule 113 (codeFuncIndicator -> .)
    STRING          reduce using rule 113 (codeFuncIndicator -> .)

    functionaux                    shift and go to state 29
    codeFuncIndicator              shift and go to state 30

state 25

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main . RGTBRAC

    RGTBRAC         shift and go to state 32


state 26

    (71) main -> codeLocationMain . PRIOMH codeScope block

    PRIOMH          shift and go to state 33


state 27

    (79) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2

    LFTBRACSQR      shift and go to state 34


state 28

    (78) varsaux -> ID codeAddVar . EQUAL expression varsaux2

    EQUAL           shift and go to state 35


state 29

    (72) function -> FUNCTION codeScope functionaux . ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope

    ID              shift and go to state 36


state 30

    (74) functionaux -> codeFuncIndicator . type codeCheckType
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    type                           shift and go to state 37

state 31

    (73) functionaux -> VOID . codeTypeVoid codeCheckType
    (112) codeTypeVoid -> .

    ID              reduce using rule 112 (codeTypeVoid -> .)

    codeTypeVoid                   shift and go to state 38

state 32

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC .

    $end            reduce using rule 1 (program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC .)


state 33

    (71) main -> codeLocationMain PRIOMH . codeScope block
    (106) codeScope -> .

    LFTBRAC         reduce using rule 106 (codeScope -> .)

    codeScope                      shift and go to state 39

state 34

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvals varsaux2

    INT             shift and go to state 40


state 35

    (78) varsaux -> ID codeAddVar EQUAL . expression varsaux2
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 59

state 36

    (72) function -> FUNCTION codeScope functionaux ID . codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (111) codeNameOfFunct -> .

    LFTPAREN        reduce using rule 111 (codeNameOfFunct -> .)

    codeNameOfFunct                shift and go to state 60

state 37

    (74) functionaux -> codeFuncIndicator type . codeCheckType
    (107) codeCheckType -> .

    ID              reduce using rule 107 (codeCheckType -> .)

    codeCheckType                  shift and go to state 61

state 38

    (73) functionaux -> VOID codeTypeVoid . codeCheckType
    (107) codeCheckType -> .

    ID              reduce using rule 107 (codeCheckType -> .)

    codeCheckType                  shift and go to state 62

state 39

    (71) main -> codeLocationMain PRIOMH codeScope . block
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 64

state 40

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvals varsaux2

    RGTBRACSQR      shift and go to state 65


state 41

    (37) factoraux -> constant .

    MULTIPLICATION  reduce using rule 37 (factoraux -> constant .)
    DIVISION        reduce using rule 37 (factoraux -> constant .)
    PLUS            reduce using rule 37 (factoraux -> constant .)
    MINUS           reduce using rule 37 (factoraux -> constant .)
    COMMA           reduce using rule 37 (factoraux -> constant .)
    RGTPAREN        reduce using rule 37 (factoraux -> constant .)
    AND             reduce using rule 37 (factoraux -> constant .)
    DOUBEQUAL       reduce using rule 37 (factoraux -> constant .)
    NOT             reduce using rule 37 (factoraux -> constant .)
    OR              reduce using rule 37 (factoraux -> constant .)
    LESSTHANEQUAL   reduce using rule 37 (factoraux -> constant .)
    GREATTHANEQUAL  reduce using rule 37 (factoraux -> constant .)
    GREATTHAN       reduce using rule 37 (factoraux -> constant .)
    LESSTHAN        reduce using rule 37 (factoraux -> constant .)
    SEMICOLON       reduce using rule 37 (factoraux -> constant .)
    RGTBRACSQR      reduce using rule 37 (factoraux -> constant .)


state 42

    (41) factor -> factoraux . codeAskFactor
    (121) codeAskFactor -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAskFactor                  shift and go to state 66
    empty                          shift and go to state 67

state 43

    (25) constant -> array .

    MULTIPLICATION  reduce using rule 25 (constant -> array .)
    DIVISION        reduce using rule 25 (constant -> array .)
    PLUS            reduce using rule 25 (constant -> array .)
    MINUS           reduce using rule 25 (constant -> array .)
    AND             reduce using rule 25 (constant -> array .)
    DOUBEQUAL       reduce using rule 25 (constant -> array .)
    NOT             reduce using rule 25 (constant -> array .)
    OR              reduce using rule 25 (constant -> array .)
    LESSTHANEQUAL   reduce using rule 25 (constant -> array .)
    GREATTHANEQUAL  reduce using rule 25 (constant -> array .)
    GREATTHAN       reduce using rule 25 (constant -> array .)
    LESSTHAN        reduce using rule 25 (constant -> array .)
    RGTPAREN        reduce using rule 25 (constant -> array .)
    COMMA           reduce using rule 25 (constant -> array .)
    SEMICOLON       reduce using rule 25 (constant -> array .)
    RGTBRACSQR      reduce using rule 25 (constant -> array .)


state 44

    (26) constant -> cteN .

    MULTIPLICATION  reduce using rule 26 (constant -> cteN .)
    DIVISION        reduce using rule 26 (constant -> cteN .)
    PLUS            reduce using rule 26 (constant -> cteN .)
    MINUS           reduce using rule 26 (constant -> cteN .)
    AND             reduce using rule 26 (constant -> cteN .)
    DOUBEQUAL       reduce using rule 26 (constant -> cteN .)
    NOT             reduce using rule 26 (constant -> cteN .)
    OR              reduce using rule 26 (constant -> cteN .)
    LESSTHANEQUAL   reduce using rule 26 (constant -> cteN .)
    GREATTHANEQUAL  reduce using rule 26 (constant -> cteN .)
    GREATTHAN       reduce using rule 26 (constant -> cteN .)
    LESSTHAN        reduce using rule 26 (constant -> cteN .)
    RGTPAREN        reduce using rule 26 (constant -> cteN .)
    COMMA           reduce using rule 26 (constant -> cteN .)
    SEMICOLON       reduce using rule 26 (constant -> cteN .)
    RGTBRACSQR      reduce using rule 26 (constant -> cteN .)


state 45

    (39) factoraux -> MINUS . constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 68
    call                           shift and go to state 49
    array                          shift and go to state 43
    cteN                           shift and go to state 44

state 46

    (28) constant -> TRUE . codeAddConstBool
    (116) codeAddConstBool -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConstBool               shift and go to state 69
    empty                          shift and go to state 70

state 47

    (38) factoraux -> PLUS . constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 71
    call                           shift and go to state 49
    array                          shift and go to state 43
    cteN                           shift and go to state 44

state 48

    (57) term -> factor . MULTIPLICATION codeAddOperator term
    (58) term -> factor . DIVISION codeAddOperator term
    (59) term -> factor . codeAskTerm
    (120) codeAskTerm -> . empty
    (86) empty -> .

    MULTIPLICATION  shift and go to state 74
    DIVISION        shift and go to state 72
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAskTerm                    shift and go to state 73
    empty                          shift and go to state 75

state 49

    (30) constant -> call . codeIsCalll
    (88) codeIsCalll -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    empty                          shift and go to state 76
    codeIsCalll                    shift and go to state 77

state 50

    (33) cteS -> STRING . codeAddConstString
    (117) codeAddConstString -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConstString             shift and go to state 78
    empty                          shift and go to state 79

state 51

    (27) constant -> cteS .

    MULTIPLICATION  reduce using rule 27 (constant -> cteS .)
    DIVISION        reduce using rule 27 (constant -> cteS .)
    PLUS            reduce using rule 27 (constant -> cteS .)
    MINUS           reduce using rule 27 (constant -> cteS .)
    AND             reduce using rule 27 (constant -> cteS .)
    DOUBEQUAL       reduce using rule 27 (constant -> cteS .)
    NOT             reduce using rule 27 (constant -> cteS .)
    OR              reduce using rule 27 (constant -> cteS .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> cteS .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> cteS .)
    GREATTHAN       reduce using rule 27 (constant -> cteS .)
    LESSTHAN        reduce using rule 27 (constant -> cteS .)
    RGTPAREN        reduce using rule 27 (constant -> cteS .)
    COMMA           reduce using rule 27 (constant -> cteS .)
    SEMICOLON       reduce using rule 27 (constant -> cteS .)
    RGTBRACSQR      reduce using rule 27 (constant -> cteS .)


state 52

    (40) factor -> LFTPAREN . codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (115) codeAddOpenParen -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOpenParen               shift and go to state 80
    empty                          shift and go to state 81

state 53

    (24) constant -> ID .
    (6) array -> ID . LFTBRACSQR exp RGTBRACSQR
    (82) call -> ID . codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (95) codeVerifyFunct -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 24 (constant -> ID .)
    DIVISION        reduce using rule 24 (constant -> ID .)
    PLUS            reduce using rule 24 (constant -> ID .)
    MINUS           reduce using rule 24 (constant -> ID .)
    AND             reduce using rule 24 (constant -> ID .)
    DOUBEQUAL       reduce using rule 24 (constant -> ID .)
    NOT             reduce using rule 24 (constant -> ID .)
    OR              reduce using rule 24 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 24 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 24 (constant -> ID .)
    GREATTHAN       reduce using rule 24 (constant -> ID .)
    LESSTHAN        reduce using rule 24 (constant -> ID .)
    RGTPAREN        reduce using rule 24 (constant -> ID .)
    COMMA           reduce using rule 24 (constant -> ID .)
    SEMICOLON       reduce using rule 24 (constant -> ID .)
    RGTBRACSQR      reduce using rule 24 (constant -> ID .)
    LFTBRACSQR      shift and go to state 83
    LFTPAREN        reduce using rule 86 (empty -> .)

    codeVerifyFunct                shift and go to state 82
    empty                          shift and go to state 84

state 54

    (34) exp -> term .
    (35) exp -> term . PLUS codeAddOperator exp
    (36) exp -> term . MINUS codeAddOperator exp

    COMMA           reduce using rule 34 (exp -> term .)
    SEMICOLON       reduce using rule 34 (exp -> term .)
    RGTPAREN        reduce using rule 34 (exp -> term .)
    AND             reduce using rule 34 (exp -> term .)
    DOUBEQUAL       reduce using rule 34 (exp -> term .)
    NOT             reduce using rule 34 (exp -> term .)
    OR              reduce using rule 34 (exp -> term .)
    LESSTHANEQUAL   reduce using rule 34 (exp -> term .)
    GREATTHANEQUAL  reduce using rule 34 (exp -> term .)
    GREATTHAN       reduce using rule 34 (exp -> term .)
    LESSTHAN        reduce using rule 34 (exp -> term .)
    RGTBRACSQR      reduce using rule 34 (exp -> term .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 86


state 55

    (29) constant -> FALSE . codeAddConstBool
    (116) codeAddConstBool -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConstBool               shift and go to state 87
    empty                          shift and go to state 70

state 56

    (32) cteN -> INT . codeAddConstNumber
    (118) codeAddConstNumber -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConstNumber             shift and go to state 88
    empty                          shift and go to state 89

state 57

    (31) cteN -> FLOAT . codeAddConstNumber
    (118) codeAddConstNumber -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConstNumber             shift and go to state 90
    empty                          shift and go to state 89

state 58

    (42) expression -> exp .
    (43) expression -> exp . expressionaux codeAddOperator exp codeAskExpression
    (44) expressionaux -> . AND
    (45) expressionaux -> . DOUBEQUAL
    (46) expressionaux -> . NOT
    (47) expressionaux -> . OR
    (48) expressionaux -> . LESSTHANEQUAL
    (49) expressionaux -> . GREATTHANEQUAL
    (50) expressionaux -> . GREATTHAN
    (51) expressionaux -> . LESSTHAN

    SEMICOLON       reduce using rule 42 (expression -> exp .)
    RGTPAREN        reduce using rule 42 (expression -> exp .)
    COMMA           reduce using rule 42 (expression -> exp .)
    AND             shift and go to state 91
    DOUBEQUAL       shift and go to state 98
    NOT             shift and go to state 97
    OR              shift and go to state 99
    LESSTHANEQUAL   shift and go to state 95
    GREATTHANEQUAL  shift and go to state 93
    GREATTHAN       shift and go to state 94
    LESSTHAN        shift and go to state 96

    expressionaux                  shift and go to state 92

state 59

    (78) varsaux -> ID codeAddVar EQUAL expression . varsaux2
    (76) varsaux2 -> . COMMA varsaux
    (77) varsaux2 -> . SEMICOLON

    COMMA           shift and go to state 102
    SEMICOLON       shift and go to state 100

    varsaux2                       shift and go to state 101

state 60

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct . LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope

    LFTPAREN        shift and go to state 103


state 61

    (74) functionaux -> codeFuncIndicator type codeCheckType .

    ID              reduce using rule 74 (functionaux -> codeFuncIndicator type codeCheckType .)


state 62

    (73) functionaux -> VOID codeTypeVoid codeCheckType .

    ID              reduce using rule 73 (functionaux -> VOID codeTypeVoid codeCheckType .)


state 63

    (18) block -> LFTBRAC . blockneutral RGTBRAC
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call SEMICOLON
    (75) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    IF              shift and go to state 118
    WHILE           shift and go to state 107
    PRINT           shift and go to state 106
    READ            shift and go to state 105
    ID              shift and go to state 116
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 104
    array                          shift and go to state 108
    write                          shift and go to state 109
    call                           shift and go to state 111
    type                           shift and go to state 12
    empty                          shift and go to state 112
    statement                      shift and go to state 113
    read                           shift and go to state 110
    assignment                     shift and go to state 114
    assignmentaux                  shift and go to state 115
    condition                      shift and go to state 117
    blockneutral                   shift and go to state 119
    loop                           shift and go to state 120

state 64

    (71) main -> codeLocationMain PRIOMH codeScope block .

    RGTBRAC         reduce using rule 71 (main -> codeLocationMain PRIOMH codeScope block .)


state 65

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvals varsaux2

    EQUAL           shift and go to state 121


state 66

    (41) factor -> factoraux codeAskFactor .

    MULTIPLICATION  reduce using rule 41 (factor -> factoraux codeAskFactor .)
    DIVISION        reduce using rule 41 (factor -> factoraux codeAskFactor .)
    PLUS            reduce using rule 41 (factor -> factoraux codeAskFactor .)
    MINUS           reduce using rule 41 (factor -> factoraux codeAskFactor .)
    AND             reduce using rule 41 (factor -> factoraux codeAskFactor .)
    DOUBEQUAL       reduce using rule 41 (factor -> factoraux codeAskFactor .)
    NOT             reduce using rule 41 (factor -> factoraux codeAskFactor .)
    OR              reduce using rule 41 (factor -> factoraux codeAskFactor .)
    LESSTHANEQUAL   reduce using rule 41 (factor -> factoraux codeAskFactor .)
    GREATTHANEQUAL  reduce using rule 41 (factor -> factoraux codeAskFactor .)
    GREATTHAN       reduce using rule 41 (factor -> factoraux codeAskFactor .)
    LESSTHAN        reduce using rule 41 (factor -> factoraux codeAskFactor .)
    COMMA           reduce using rule 41 (factor -> factoraux codeAskFactor .)
    SEMICOLON       reduce using rule 41 (factor -> factoraux codeAskFactor .)
    RGTPAREN        reduce using rule 41 (factor -> factoraux codeAskFactor .)
    RGTBRACSQR      reduce using rule 41 (factor -> factoraux codeAskFactor .)


state 67

    (121) codeAskFactor -> empty .

    MULTIPLICATION  reduce using rule 121 (codeAskFactor -> empty .)
    DIVISION        reduce using rule 121 (codeAskFactor -> empty .)
    PLUS            reduce using rule 121 (codeAskFactor -> empty .)
    MINUS           reduce using rule 121 (codeAskFactor -> empty .)
    AND             reduce using rule 121 (codeAskFactor -> empty .)
    DOUBEQUAL       reduce using rule 121 (codeAskFactor -> empty .)
    NOT             reduce using rule 121 (codeAskFactor -> empty .)
    OR              reduce using rule 121 (codeAskFactor -> empty .)
    LESSTHANEQUAL   reduce using rule 121 (codeAskFactor -> empty .)
    GREATTHANEQUAL  reduce using rule 121 (codeAskFactor -> empty .)
    GREATTHAN       reduce using rule 121 (codeAskFactor -> empty .)
    LESSTHAN        reduce using rule 121 (codeAskFactor -> empty .)
    COMMA           reduce using rule 121 (codeAskFactor -> empty .)
    SEMICOLON       reduce using rule 121 (codeAskFactor -> empty .)
    RGTPAREN        reduce using rule 121 (codeAskFactor -> empty .)
    RGTBRACSQR      reduce using rule 121 (codeAskFactor -> empty .)


state 68

    (39) factoraux -> MINUS constant .

    MULTIPLICATION  reduce using rule 39 (factoraux -> MINUS constant .)
    DIVISION        reduce using rule 39 (factoraux -> MINUS constant .)
    PLUS            reduce using rule 39 (factoraux -> MINUS constant .)
    MINUS           reduce using rule 39 (factoraux -> MINUS constant .)
    COMMA           reduce using rule 39 (factoraux -> MINUS constant .)
    RGTPAREN        reduce using rule 39 (factoraux -> MINUS constant .)
    AND             reduce using rule 39 (factoraux -> MINUS constant .)
    DOUBEQUAL       reduce using rule 39 (factoraux -> MINUS constant .)
    NOT             reduce using rule 39 (factoraux -> MINUS constant .)
    OR              reduce using rule 39 (factoraux -> MINUS constant .)
    LESSTHANEQUAL   reduce using rule 39 (factoraux -> MINUS constant .)
    GREATTHANEQUAL  reduce using rule 39 (factoraux -> MINUS constant .)
    GREATTHAN       reduce using rule 39 (factoraux -> MINUS constant .)
    LESSTHAN        reduce using rule 39 (factoraux -> MINUS constant .)
    SEMICOLON       reduce using rule 39 (factoraux -> MINUS constant .)
    RGTBRACSQR      reduce using rule 39 (factoraux -> MINUS constant .)


state 69

    (28) constant -> TRUE codeAddConstBool .

    MULTIPLICATION  reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    DIVISION        reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    PLUS            reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    MINUS           reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    AND             reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    DOUBEQUAL       reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    NOT             reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    OR              reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    LESSTHANEQUAL   reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    GREATTHANEQUAL  reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    GREATTHAN       reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    LESSTHAN        reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    RGTPAREN        reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    COMMA           reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    SEMICOLON       reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    RGTBRACSQR      reduce using rule 28 (constant -> TRUE codeAddConstBool .)


state 70

    (116) codeAddConstBool -> empty .

    MULTIPLICATION  reduce using rule 116 (codeAddConstBool -> empty .)
    DIVISION        reduce using rule 116 (codeAddConstBool -> empty .)
    PLUS            reduce using rule 116 (codeAddConstBool -> empty .)
    MINUS           reduce using rule 116 (codeAddConstBool -> empty .)
    AND             reduce using rule 116 (codeAddConstBool -> empty .)
    DOUBEQUAL       reduce using rule 116 (codeAddConstBool -> empty .)
    NOT             reduce using rule 116 (codeAddConstBool -> empty .)
    OR              reduce using rule 116 (codeAddConstBool -> empty .)
    LESSTHANEQUAL   reduce using rule 116 (codeAddConstBool -> empty .)
    GREATTHANEQUAL  reduce using rule 116 (codeAddConstBool -> empty .)
    GREATTHAN       reduce using rule 116 (codeAddConstBool -> empty .)
    LESSTHAN        reduce using rule 116 (codeAddConstBool -> empty .)
    COMMA           reduce using rule 116 (codeAddConstBool -> empty .)
    SEMICOLON       reduce using rule 116 (codeAddConstBool -> empty .)
    RGTPAREN        reduce using rule 116 (codeAddConstBool -> empty .)
    RGTBRACSQR      reduce using rule 116 (codeAddConstBool -> empty .)


state 71

    (38) factoraux -> PLUS constant .

    MULTIPLICATION  reduce using rule 38 (factoraux -> PLUS constant .)
    DIVISION        reduce using rule 38 (factoraux -> PLUS constant .)
    PLUS            reduce using rule 38 (factoraux -> PLUS constant .)
    MINUS           reduce using rule 38 (factoraux -> PLUS constant .)
    COMMA           reduce using rule 38 (factoraux -> PLUS constant .)
    RGTPAREN        reduce using rule 38 (factoraux -> PLUS constant .)
    AND             reduce using rule 38 (factoraux -> PLUS constant .)
    DOUBEQUAL       reduce using rule 38 (factoraux -> PLUS constant .)
    NOT             reduce using rule 38 (factoraux -> PLUS constant .)
    OR              reduce using rule 38 (factoraux -> PLUS constant .)
    LESSTHANEQUAL   reduce using rule 38 (factoraux -> PLUS constant .)
    GREATTHANEQUAL  reduce using rule 38 (factoraux -> PLUS constant .)
    GREATTHAN       reduce using rule 38 (factoraux -> PLUS constant .)
    LESSTHAN        reduce using rule 38 (factoraux -> PLUS constant .)
    SEMICOLON       reduce using rule 38 (factoraux -> PLUS constant .)
    RGTBRACSQR      reduce using rule 38 (factoraux -> PLUS constant .)


state 72

    (58) term -> factor DIVISION . codeAddOperator term
    (119) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 122
    empty                          shift and go to state 123

state 73

    (59) term -> factor codeAskTerm .

    PLUS            reduce using rule 59 (term -> factor codeAskTerm .)
    MINUS           reduce using rule 59 (term -> factor codeAskTerm .)
    COMMA           reduce using rule 59 (term -> factor codeAskTerm .)
    SEMICOLON       reduce using rule 59 (term -> factor codeAskTerm .)
    RGTPAREN        reduce using rule 59 (term -> factor codeAskTerm .)
    RGTBRACSQR      reduce using rule 59 (term -> factor codeAskTerm .)
    AND             reduce using rule 59 (term -> factor codeAskTerm .)
    DOUBEQUAL       reduce using rule 59 (term -> factor codeAskTerm .)
    NOT             reduce using rule 59 (term -> factor codeAskTerm .)
    OR              reduce using rule 59 (term -> factor codeAskTerm .)
    LESSTHANEQUAL   reduce using rule 59 (term -> factor codeAskTerm .)
    GREATTHANEQUAL  reduce using rule 59 (term -> factor codeAskTerm .)
    GREATTHAN       reduce using rule 59 (term -> factor codeAskTerm .)
    LESSTHAN        reduce using rule 59 (term -> factor codeAskTerm .)


state 74

    (57) term -> factor MULTIPLICATION . codeAddOperator term
    (119) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 124
    empty                          shift and go to state 123

state 75

    (120) codeAskTerm -> empty .

    PLUS            reduce using rule 120 (codeAskTerm -> empty .)
    MINUS           reduce using rule 120 (codeAskTerm -> empty .)
    AND             reduce using rule 120 (codeAskTerm -> empty .)
    DOUBEQUAL       reduce using rule 120 (codeAskTerm -> empty .)
    NOT             reduce using rule 120 (codeAskTerm -> empty .)
    OR              reduce using rule 120 (codeAskTerm -> empty .)
    LESSTHANEQUAL   reduce using rule 120 (codeAskTerm -> empty .)
    GREATTHANEQUAL  reduce using rule 120 (codeAskTerm -> empty .)
    GREATTHAN       reduce using rule 120 (codeAskTerm -> empty .)
    LESSTHAN        reduce using rule 120 (codeAskTerm -> empty .)
    COMMA           reduce using rule 120 (codeAskTerm -> empty .)
    SEMICOLON       reduce using rule 120 (codeAskTerm -> empty .)
    RGTPAREN        reduce using rule 120 (codeAskTerm -> empty .)
    RGTBRACSQR      reduce using rule 120 (codeAskTerm -> empty .)


state 76

    (88) codeIsCalll -> empty .

    MULTIPLICATION  reduce using rule 88 (codeIsCalll -> empty .)
    DIVISION        reduce using rule 88 (codeIsCalll -> empty .)
    PLUS            reduce using rule 88 (codeIsCalll -> empty .)
    MINUS           reduce using rule 88 (codeIsCalll -> empty .)
    AND             reduce using rule 88 (codeIsCalll -> empty .)
    DOUBEQUAL       reduce using rule 88 (codeIsCalll -> empty .)
    NOT             reduce using rule 88 (codeIsCalll -> empty .)
    OR              reduce using rule 88 (codeIsCalll -> empty .)
    LESSTHANEQUAL   reduce using rule 88 (codeIsCalll -> empty .)
    GREATTHANEQUAL  reduce using rule 88 (codeIsCalll -> empty .)
    GREATTHAN       reduce using rule 88 (codeIsCalll -> empty .)
    LESSTHAN        reduce using rule 88 (codeIsCalll -> empty .)
    COMMA           reduce using rule 88 (codeIsCalll -> empty .)
    SEMICOLON       reduce using rule 88 (codeIsCalll -> empty .)
    RGTPAREN        reduce using rule 88 (codeIsCalll -> empty .)
    RGTBRACSQR      reduce using rule 88 (codeIsCalll -> empty .)


state 77

    (30) constant -> call codeIsCalll .

    MULTIPLICATION  reduce using rule 30 (constant -> call codeIsCalll .)
    DIVISION        reduce using rule 30 (constant -> call codeIsCalll .)
    PLUS            reduce using rule 30 (constant -> call codeIsCalll .)
    MINUS           reduce using rule 30 (constant -> call codeIsCalll .)
    AND             reduce using rule 30 (constant -> call codeIsCalll .)
    DOUBEQUAL       reduce using rule 30 (constant -> call codeIsCalll .)
    NOT             reduce using rule 30 (constant -> call codeIsCalll .)
    OR              reduce using rule 30 (constant -> call codeIsCalll .)
    LESSTHANEQUAL   reduce using rule 30 (constant -> call codeIsCalll .)
    GREATTHANEQUAL  reduce using rule 30 (constant -> call codeIsCalll .)
    GREATTHAN       reduce using rule 30 (constant -> call codeIsCalll .)
    LESSTHAN        reduce using rule 30 (constant -> call codeIsCalll .)
    RGTPAREN        reduce using rule 30 (constant -> call codeIsCalll .)
    COMMA           reduce using rule 30 (constant -> call codeIsCalll .)
    SEMICOLON       reduce using rule 30 (constant -> call codeIsCalll .)
    RGTBRACSQR      reduce using rule 30 (constant -> call codeIsCalll .)


state 78

    (33) cteS -> STRING codeAddConstString .

    RGTPAREN        reduce using rule 33 (cteS -> STRING codeAddConstString .)
    MULTIPLICATION  reduce using rule 33 (cteS -> STRING codeAddConstString .)
    DIVISION        reduce using rule 33 (cteS -> STRING codeAddConstString .)
    PLUS            reduce using rule 33 (cteS -> STRING codeAddConstString .)
    MINUS           reduce using rule 33 (cteS -> STRING codeAddConstString .)
    AND             reduce using rule 33 (cteS -> STRING codeAddConstString .)
    DOUBEQUAL       reduce using rule 33 (cteS -> STRING codeAddConstString .)
    NOT             reduce using rule 33 (cteS -> STRING codeAddConstString .)
    OR              reduce using rule 33 (cteS -> STRING codeAddConstString .)
    LESSTHANEQUAL   reduce using rule 33 (cteS -> STRING codeAddConstString .)
    GREATTHANEQUAL  reduce using rule 33 (cteS -> STRING codeAddConstString .)
    GREATTHAN       reduce using rule 33 (cteS -> STRING codeAddConstString .)
    LESSTHAN        reduce using rule 33 (cteS -> STRING codeAddConstString .)
    COMMA           reduce using rule 33 (cteS -> STRING codeAddConstString .)
    SEMICOLON       reduce using rule 33 (cteS -> STRING codeAddConstString .)
    RGTBRACSQR      reduce using rule 33 (cteS -> STRING codeAddConstString .)


state 79

    (117) codeAddConstString -> empty .

    MULTIPLICATION  reduce using rule 117 (codeAddConstString -> empty .)
    DIVISION        reduce using rule 117 (codeAddConstString -> empty .)
    PLUS            reduce using rule 117 (codeAddConstString -> empty .)
    MINUS           reduce using rule 117 (codeAddConstString -> empty .)
    AND             reduce using rule 117 (codeAddConstString -> empty .)
    DOUBEQUAL       reduce using rule 117 (codeAddConstString -> empty .)
    NOT             reduce using rule 117 (codeAddConstString -> empty .)
    OR              reduce using rule 117 (codeAddConstString -> empty .)
    LESSTHANEQUAL   reduce using rule 117 (codeAddConstString -> empty .)
    GREATTHANEQUAL  reduce using rule 117 (codeAddConstString -> empty .)
    GREATTHAN       reduce using rule 117 (codeAddConstString -> empty .)
    LESSTHAN        reduce using rule 117 (codeAddConstString -> empty .)
    COMMA           reduce using rule 117 (codeAddConstString -> empty .)
    SEMICOLON       reduce using rule 117 (codeAddConstString -> empty .)
    RGTPAREN        reduce using rule 117 (codeAddConstString -> empty .)
    RGTBRACSQR      reduce using rule 117 (codeAddConstString -> empty .)


state 80

    (40) factor -> LFTPAREN codeAddOpenParen . expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 125

state 81

    (115) codeAddOpenParen -> empty .

    LFTPAREN        reduce using rule 115 (codeAddOpenParen -> empty .)
    PLUS            reduce using rule 115 (codeAddOpenParen -> empty .)
    MINUS           reduce using rule 115 (codeAddOpenParen -> empty .)
    ID              reduce using rule 115 (codeAddOpenParen -> empty .)
    TRUE            reduce using rule 115 (codeAddOpenParen -> empty .)
    FALSE           reduce using rule 115 (codeAddOpenParen -> empty .)
    FLOAT           reduce using rule 115 (codeAddOpenParen -> empty .)
    INT             reduce using rule 115 (codeAddOpenParen -> empty .)
    STRING          reduce using rule 115 (codeAddOpenParen -> empty .)


state 82

    (82) call -> ID codeVerifyFunct . LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 126


state 83

    (6) array -> ID LFTBRACSQR . exp RGTBRACSQR
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 127

state 84

    (95) codeVerifyFunct -> empty .

    LFTPAREN        reduce using rule 95 (codeVerifyFunct -> empty .)


state 85

    (35) exp -> term PLUS . codeAddOperator exp
    (119) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 128
    empty                          shift and go to state 123

state 86

    (36) exp -> term MINUS . codeAddOperator exp
    (119) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 129
    empty                          shift and go to state 123

state 87

    (29) constant -> FALSE codeAddConstBool .

    MULTIPLICATION  reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    DIVISION        reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    PLUS            reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    MINUS           reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    AND             reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    DOUBEQUAL       reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    NOT             reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    OR              reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    LESSTHANEQUAL   reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    GREATTHANEQUAL  reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    GREATTHAN       reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    LESSTHAN        reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    RGTPAREN        reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    COMMA           reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    SEMICOLON       reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    RGTBRACSQR      reduce using rule 29 (constant -> FALSE codeAddConstBool .)


state 88

    (32) cteN -> INT codeAddConstNumber .

    MULTIPLICATION  reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    DIVISION        reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    PLUS            reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    MINUS           reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    RGTBRACSQR      reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    COMMA           reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    RGTPAREN        reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    AND             reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    DOUBEQUAL       reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    NOT             reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    OR              reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    LESSTHANEQUAL   reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    GREATTHANEQUAL  reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    GREATTHAN       reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    LESSTHAN        reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    SEMICOLON       reduce using rule 32 (cteN -> INT codeAddConstNumber .)


state 89

    (118) codeAddConstNumber -> empty .

    MULTIPLICATION  reduce using rule 118 (codeAddConstNumber -> empty .)
    DIVISION        reduce using rule 118 (codeAddConstNumber -> empty .)
    PLUS            reduce using rule 118 (codeAddConstNumber -> empty .)
    MINUS           reduce using rule 118 (codeAddConstNumber -> empty .)
    AND             reduce using rule 118 (codeAddConstNumber -> empty .)
    DOUBEQUAL       reduce using rule 118 (codeAddConstNumber -> empty .)
    NOT             reduce using rule 118 (codeAddConstNumber -> empty .)
    OR              reduce using rule 118 (codeAddConstNumber -> empty .)
    LESSTHANEQUAL   reduce using rule 118 (codeAddConstNumber -> empty .)
    GREATTHANEQUAL  reduce using rule 118 (codeAddConstNumber -> empty .)
    GREATTHAN       reduce using rule 118 (codeAddConstNumber -> empty .)
    LESSTHAN        reduce using rule 118 (codeAddConstNumber -> empty .)
    COMMA           reduce using rule 118 (codeAddConstNumber -> empty .)
    SEMICOLON       reduce using rule 118 (codeAddConstNumber -> empty .)
    RGTPAREN        reduce using rule 118 (codeAddConstNumber -> empty .)
    RGTBRACSQR      reduce using rule 118 (codeAddConstNumber -> empty .)


state 90

    (31) cteN -> FLOAT codeAddConstNumber .

    MULTIPLICATION  reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    DIVISION        reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    PLUS            reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    MINUS           reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    RGTBRACSQR      reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    COMMA           reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    RGTPAREN        reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    AND             reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    DOUBEQUAL       reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    NOT             reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    OR              reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    LESSTHANEQUAL   reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    GREATTHANEQUAL  reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    GREATTHAN       reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    LESSTHAN        reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    SEMICOLON       reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)


state 91

    (44) expressionaux -> AND .

    LFTPAREN        reduce using rule 44 (expressionaux -> AND .)
    PLUS            reduce using rule 44 (expressionaux -> AND .)
    MINUS           reduce using rule 44 (expressionaux -> AND .)
    ID              reduce using rule 44 (expressionaux -> AND .)
    TRUE            reduce using rule 44 (expressionaux -> AND .)
    FALSE           reduce using rule 44 (expressionaux -> AND .)
    FLOAT           reduce using rule 44 (expressionaux -> AND .)
    INT             reduce using rule 44 (expressionaux -> AND .)
    STRING          reduce using rule 44 (expressionaux -> AND .)


state 92

    (43) expression -> exp expressionaux . codeAddOperator exp codeAskExpression
    (119) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 130
    empty                          shift and go to state 123

state 93

    (49) expressionaux -> GREATTHANEQUAL .

    LFTPAREN        reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    PLUS            reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    MINUS           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    ID              reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    TRUE            reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    FALSE           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    FLOAT           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    INT             reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    STRING          reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)


state 94

    (50) expressionaux -> GREATTHAN .

    LFTPAREN        reduce using rule 50 (expressionaux -> GREATTHAN .)
    PLUS            reduce using rule 50 (expressionaux -> GREATTHAN .)
    MINUS           reduce using rule 50 (expressionaux -> GREATTHAN .)
    ID              reduce using rule 50 (expressionaux -> GREATTHAN .)
    TRUE            reduce using rule 50 (expressionaux -> GREATTHAN .)
    FALSE           reduce using rule 50 (expressionaux -> GREATTHAN .)
    FLOAT           reduce using rule 50 (expressionaux -> GREATTHAN .)
    INT             reduce using rule 50 (expressionaux -> GREATTHAN .)
    STRING          reduce using rule 50 (expressionaux -> GREATTHAN .)


state 95

    (48) expressionaux -> LESSTHANEQUAL .

    LFTPAREN        reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    PLUS            reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    MINUS           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    ID              reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    TRUE            reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    FALSE           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    FLOAT           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    INT             reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    STRING          reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)


state 96

    (51) expressionaux -> LESSTHAN .

    LFTPAREN        reduce using rule 51 (expressionaux -> LESSTHAN .)
    PLUS            reduce using rule 51 (expressionaux -> LESSTHAN .)
    MINUS           reduce using rule 51 (expressionaux -> LESSTHAN .)
    ID              reduce using rule 51 (expressionaux -> LESSTHAN .)
    TRUE            reduce using rule 51 (expressionaux -> LESSTHAN .)
    FALSE           reduce using rule 51 (expressionaux -> LESSTHAN .)
    FLOAT           reduce using rule 51 (expressionaux -> LESSTHAN .)
    INT             reduce using rule 51 (expressionaux -> LESSTHAN .)
    STRING          reduce using rule 51 (expressionaux -> LESSTHAN .)


state 97

    (46) expressionaux -> NOT .

    LFTPAREN        reduce using rule 46 (expressionaux -> NOT .)
    PLUS            reduce using rule 46 (expressionaux -> NOT .)
    MINUS           reduce using rule 46 (expressionaux -> NOT .)
    ID              reduce using rule 46 (expressionaux -> NOT .)
    TRUE            reduce using rule 46 (expressionaux -> NOT .)
    FALSE           reduce using rule 46 (expressionaux -> NOT .)
    FLOAT           reduce using rule 46 (expressionaux -> NOT .)
    INT             reduce using rule 46 (expressionaux -> NOT .)
    STRING          reduce using rule 46 (expressionaux -> NOT .)


state 98

    (45) expressionaux -> DOUBEQUAL .

    LFTPAREN        reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    PLUS            reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    MINUS           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    ID              reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    TRUE            reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    FALSE           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    FLOAT           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    INT             reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    STRING          reduce using rule 45 (expressionaux -> DOUBEQUAL .)


state 99

    (47) expressionaux -> OR .

    LFTPAREN        reduce using rule 47 (expressionaux -> OR .)
    PLUS            reduce using rule 47 (expressionaux -> OR .)
    MINUS           reduce using rule 47 (expressionaux -> OR .)
    ID              reduce using rule 47 (expressionaux -> OR .)
    TRUE            reduce using rule 47 (expressionaux -> OR .)
    FALSE           reduce using rule 47 (expressionaux -> OR .)
    FLOAT           reduce using rule 47 (expressionaux -> OR .)
    INT             reduce using rule 47 (expressionaux -> OR .)
    STRING          reduce using rule 47 (expressionaux -> OR .)


state 100

    (77) varsaux2 -> SEMICOLON .

    INT             reduce using rule 77 (varsaux2 -> SEMICOLON .)
    FLOAT           reduce using rule 77 (varsaux2 -> SEMICOLON .)
    CHAR            reduce using rule 77 (varsaux2 -> SEMICOLON .)
    BOOL            reduce using rule 77 (varsaux2 -> SEMICOLON .)
    STRING          reduce using rule 77 (varsaux2 -> SEMICOLON .)
    FUNCTION        reduce using rule 77 (varsaux2 -> SEMICOLON .)
    PRIOMH          reduce using rule 77 (varsaux2 -> SEMICOLON .)
    IF              reduce using rule 77 (varsaux2 -> SEMICOLON .)
    WHILE           reduce using rule 77 (varsaux2 -> SEMICOLON .)
    PRINT           reduce using rule 77 (varsaux2 -> SEMICOLON .)
    READ            reduce using rule 77 (varsaux2 -> SEMICOLON .)
    ID              reduce using rule 77 (varsaux2 -> SEMICOLON .)
    RGTBRAC         reduce using rule 77 (varsaux2 -> SEMICOLON .)
    RETURN          reduce using rule 77 (varsaux2 -> SEMICOLON .)


state 101

    (78) varsaux -> ID codeAddVar EQUAL expression varsaux2 .

    INT             reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    FLOAT           reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    CHAR            reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    BOOL            reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    STRING          reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    FUNCTION        reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    PRIOMH          reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    IF              reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    WHILE           reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    PRINT           reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    READ            reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    ID              reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    RGTBRAC         reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)
    RETURN          reduce using rule 78 (varsaux -> ID codeAddVar EQUAL expression varsaux2 .)


state 102

    (76) varsaux2 -> COMMA . varsaux
    (78) varsaux -> . ID codeAddVar EQUAL expression varsaux2
    (79) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2

    ID              shift and go to state 21

    varsaux                        shift and go to state 131

state 103

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN . parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (54) parameter -> . type codeCheckType ID codeAddParameters
    (55) parameter -> . type codeCheckType ID codeAddParameters COMMA parameter
    (56) parameter -> . empty
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (86) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 86 (empty -> .)

    type                           shift and go to state 132
    parameter                      shift and go to state 133
    empty                          shift and go to state 134

state 104

    (16) blockneutral -> vars . blockneutral
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call SEMICOLON
    (75) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    IF              shift and go to state 118
    WHILE           shift and go to state 107
    PRINT           shift and go to state 106
    READ            shift and go to state 105
    ID              shift and go to state 116
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 104
    array                          shift and go to state 108
    write                          shift and go to state 109
    call                           shift and go to state 111
    type                           shift and go to state 12
    empty                          shift and go to state 112
    statement                      shift and go to state 113
    read                           shift and go to state 110
    assignment                     shift and go to state 114
    assignmentaux                  shift and go to state 115
    condition                      shift and go to state 117
    blockneutral                   shift and go to state 135
    loop                           shift and go to state 120

state 105

    (83) read -> READ . LFTPAREN readaux RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 136


state 106

    (53) write -> PRINT . LFTPAREN constant RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 137


state 107

    (52) loop -> WHILE . codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (105) codeWhileCondition -> .

    LFTPAREN        reduce using rule 105 (codeWhileCondition -> .)

    codeWhileCondition             shift and go to state 138

state 108

    (12) assignmentaux -> array .

    EQUAL           reduce using rule 12 (assignmentaux -> array .)


state 109

    (63) statement -> write .

    IF              reduce using rule 63 (statement -> write .)
    WHILE           reduce using rule 63 (statement -> write .)
    PRINT           reduce using rule 63 (statement -> write .)
    READ            reduce using rule 63 (statement -> write .)
    ID              reduce using rule 63 (statement -> write .)
    INT             reduce using rule 63 (statement -> write .)
    FLOAT           reduce using rule 63 (statement -> write .)
    CHAR            reduce using rule 63 (statement -> write .)
    BOOL            reduce using rule 63 (statement -> write .)
    STRING          reduce using rule 63 (statement -> write .)
    RGTBRAC         reduce using rule 63 (statement -> write .)
    RETURN          reduce using rule 63 (statement -> write .)


state 110

    (64) statement -> read .

    IF              reduce using rule 64 (statement -> read .)
    WHILE           reduce using rule 64 (statement -> read .)
    PRINT           reduce using rule 64 (statement -> read .)
    READ            reduce using rule 64 (statement -> read .)
    ID              reduce using rule 64 (statement -> read .)
    INT             reduce using rule 64 (statement -> read .)
    FLOAT           reduce using rule 64 (statement -> read .)
    CHAR            reduce using rule 64 (statement -> read .)
    BOOL            reduce using rule 64 (statement -> read .)
    STRING          reduce using rule 64 (statement -> read .)
    RGTBRAC         reduce using rule 64 (statement -> read .)
    RETURN          reduce using rule 64 (statement -> read .)


state 111

    (65) statement -> call . SEMICOLON

    SEMICOLON       shift and go to state 139


state 112

    (17) blockneutral -> empty .

    RGTBRAC         reduce using rule 17 (blockneutral -> empty .)
    RETURN          reduce using rule 17 (blockneutral -> empty .)


state 113

    (15) blockneutral -> statement . blockneutral
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call SEMICOLON
    (75) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    IF              shift and go to state 118
    WHILE           shift and go to state 107
    PRINT           shift and go to state 106
    READ            shift and go to state 105
    ID              shift and go to state 116
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 104
    array                          shift and go to state 108
    write                          shift and go to state 109
    call                           shift and go to state 111
    type                           shift and go to state 12
    empty                          shift and go to state 112
    statement                      shift and go to state 113
    read                           shift and go to state 110
    assignment                     shift and go to state 114
    assignmentaux                  shift and go to state 115
    condition                      shift and go to state 117
    blockneutral                   shift and go to state 140
    loop                           shift and go to state 120

state 114

    (60) statement -> assignment .

    IF              reduce using rule 60 (statement -> assignment .)
    WHILE           reduce using rule 60 (statement -> assignment .)
    PRINT           reduce using rule 60 (statement -> assignment .)
    READ            reduce using rule 60 (statement -> assignment .)
    ID              reduce using rule 60 (statement -> assignment .)
    INT             reduce using rule 60 (statement -> assignment .)
    FLOAT           reduce using rule 60 (statement -> assignment .)
    CHAR            reduce using rule 60 (statement -> assignment .)
    BOOL            reduce using rule 60 (statement -> assignment .)
    STRING          reduce using rule 60 (statement -> assignment .)
    RGTBRAC         reduce using rule 60 (statement -> assignment .)
    RETURN          reduce using rule 60 (statement -> assignment .)


state 115

    (10) assignment -> assignmentaux . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 141


state 116

    (82) call -> ID . codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (11) assignmentaux -> ID .
    (6) array -> ID . LFTBRACSQR exp RGTBRACSQR
    (95) codeVerifyFunct -> . empty
    (86) empty -> .

    EQUAL           reduce using rule 11 (assignmentaux -> ID .)
    LFTBRACSQR      shift and go to state 83
    LFTPAREN        reduce using rule 86 (empty -> .)

    codeVerifyFunct                shift and go to state 82
    empty                          shift and go to state 84

state 117

    (61) statement -> condition .

    IF              reduce using rule 61 (statement -> condition .)
    WHILE           reduce using rule 61 (statement -> condition .)
    PRINT           reduce using rule 61 (statement -> condition .)
    READ            reduce using rule 61 (statement -> condition .)
    ID              reduce using rule 61 (statement -> condition .)
    INT             reduce using rule 61 (statement -> condition .)
    FLOAT           reduce using rule 61 (statement -> condition .)
    CHAR            reduce using rule 61 (statement -> condition .)
    BOOL            reduce using rule 61 (statement -> condition .)
    STRING          reduce using rule 61 (statement -> condition .)
    RGTBRAC         reduce using rule 61 (statement -> condition .)
    RETURN          reduce using rule 61 (statement -> condition .)


state 118

    (19) condition -> IF . conditionaux codeEndIf
    (20) condition -> IF . conditionaux ELSE codeElse block codeEndIf
    (21) conditionaux -> . LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2

    LFTPAREN        shift and go to state 142

    conditionaux                   shift and go to state 143

state 119

    (18) block -> LFTBRAC blockneutral . RGTBRAC

    RGTBRAC         shift and go to state 144


state 120

    (62) statement -> loop .

    IF              reduce using rule 62 (statement -> loop .)
    WHILE           reduce using rule 62 (statement -> loop .)
    PRINT           reduce using rule 62 (statement -> loop .)
    READ            reduce using rule 62 (statement -> loop .)
    ID              reduce using rule 62 (statement -> loop .)
    INT             reduce using rule 62 (statement -> loop .)
    FLOAT           reduce using rule 62 (statement -> loop .)
    CHAR            reduce using rule 62 (statement -> loop .)
    BOOL            reduce using rule 62 (statement -> loop .)
    STRING          reduce using rule 62 (statement -> loop .)
    RGTBRAC         reduce using rule 62 (statement -> loop .)
    RETURN          reduce using rule 62 (statement -> loop .)


state 121

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvals varsaux2
    (7) arrayvals -> . LFTBRACSQR arrayvalsaux RGTBRACSQR

    LFTBRACSQR      shift and go to state 145

    arrayvals                      shift and go to state 146

state 122

    (58) term -> factor DIVISION codeAddOperator . term
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 147

state 123

    (119) codeAddOperator -> empty .

    LFTPAREN        reduce using rule 119 (codeAddOperator -> empty .)
    PLUS            reduce using rule 119 (codeAddOperator -> empty .)
    MINUS           reduce using rule 119 (codeAddOperator -> empty .)
    ID              reduce using rule 119 (codeAddOperator -> empty .)
    TRUE            reduce using rule 119 (codeAddOperator -> empty .)
    FALSE           reduce using rule 119 (codeAddOperator -> empty .)
    FLOAT           reduce using rule 119 (codeAddOperator -> empty .)
    INT             reduce using rule 119 (codeAddOperator -> empty .)
    STRING          reduce using rule 119 (codeAddOperator -> empty .)


state 124

    (57) term -> factor MULTIPLICATION codeAddOperator . term
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 148

state 125

    (40) factor -> LFTPAREN codeAddOpenParen expression . RGTPAREN codeDeleteOpenParen codeAskFactor

    RGTPAREN        shift and go to state 149


state 126

    (82) call -> ID codeVerifyFunct LFTPAREN . codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (94) codeEraQuad -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeEraQuad                    shift and go to state 150
    empty                          shift and go to state 151

state 127

    (6) array -> ID LFTBRACSQR exp . RGTBRACSQR

    RGTBRACSQR      shift and go to state 152


state 128

    (35) exp -> term PLUS codeAddOperator . exp
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 153

state 129

    (36) exp -> term MINUS codeAddOperator . exp
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 154

state 130

    (43) expression -> exp expressionaux codeAddOperator . exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 155

state 131

    (76) varsaux2 -> COMMA varsaux .

    INT             reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    FLOAT           reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    CHAR            reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    BOOL            reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    STRING          reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    FUNCTION        reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    PRIOMH          reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    IF              reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    WHILE           reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    PRINT           reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    READ            reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    ID              reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    RGTBRAC         reduce using rule 76 (varsaux2 -> COMMA varsaux .)
    RETURN          reduce using rule 76 (varsaux2 -> COMMA varsaux .)


state 132

    (54) parameter -> type . codeCheckType ID codeAddParameters
    (55) parameter -> type . codeCheckType ID codeAddParameters COMMA parameter
    (107) codeCheckType -> .

    ID              reduce using rule 107 (codeCheckType -> .)

    codeCheckType                  shift and go to state 156

state 133

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter . RGTPAREN codeAddFunctQuad blockreturn codeScope

    RGTPAREN        shift and go to state 157


state 134

    (56) parameter -> empty .

    RGTPAREN        reduce using rule 56 (parameter -> empty .)


state 135

    (16) blockneutral -> vars blockneutral .

    RGTBRAC         reduce using rule 16 (blockneutral -> vars blockneutral .)
    RETURN          reduce using rule 16 (blockneutral -> vars blockneutral .)


state 136

    (83) read -> READ LFTPAREN . readaux RGTPAREN SEMICOLON
    (84) readaux -> . ID
    (85) readaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    ID              shift and go to state 160

    readaux                        shift and go to state 158
    array                          shift and go to state 159

state 137

    (53) write -> PRINT LFTPAREN . constant RGTPAREN SEMICOLON
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 161
    call                           shift and go to state 49
    array                          shift and go to state 43
    cteN                           shift and go to state 44

state 138

    (52) loop -> WHILE codeWhileCondition . LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile

    LFTPAREN        shift and go to state 162


state 139

    (65) statement -> call SEMICOLON .

    IF              reduce using rule 65 (statement -> call SEMICOLON .)
    WHILE           reduce using rule 65 (statement -> call SEMICOLON .)
    PRINT           reduce using rule 65 (statement -> call SEMICOLON .)
    READ            reduce using rule 65 (statement -> call SEMICOLON .)
    ID              reduce using rule 65 (statement -> call SEMICOLON .)
    INT             reduce using rule 65 (statement -> call SEMICOLON .)
    FLOAT           reduce using rule 65 (statement -> call SEMICOLON .)
    CHAR            reduce using rule 65 (statement -> call SEMICOLON .)
    BOOL            reduce using rule 65 (statement -> call SEMICOLON .)
    STRING          reduce using rule 65 (statement -> call SEMICOLON .)
    RGTBRAC         reduce using rule 65 (statement -> call SEMICOLON .)
    RETURN          reduce using rule 65 (statement -> call SEMICOLON .)


state 140

    (15) blockneutral -> statement blockneutral .

    RGTBRAC         reduce using rule 15 (blockneutral -> statement blockneutral .)
    RETURN          reduce using rule 15 (blockneutral -> statement blockneutral .)


state 141

    (10) assignment -> assignmentaux EQUAL . expression SEMICOLON
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 163

state 142

    (21) conditionaux -> LFTPAREN . expression RGTPAREN codeGOTOF block conditionaux2
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 164

state 143

    (19) condition -> IF conditionaux . codeEndIf
    (20) condition -> IF conditionaux . ELSE codeElse block codeEndIf
    (101) codeEndIf -> .

    ELSE            shift and go to state 165
    IF              reduce using rule 101 (codeEndIf -> .)
    WHILE           reduce using rule 101 (codeEndIf -> .)
    PRINT           reduce using rule 101 (codeEndIf -> .)
    READ            reduce using rule 101 (codeEndIf -> .)
    ID              reduce using rule 101 (codeEndIf -> .)
    INT             reduce using rule 101 (codeEndIf -> .)
    FLOAT           reduce using rule 101 (codeEndIf -> .)
    CHAR            reduce using rule 101 (codeEndIf -> .)
    BOOL            reduce using rule 101 (codeEndIf -> .)
    STRING          reduce using rule 101 (codeEndIf -> .)
    RGTBRAC         reduce using rule 101 (codeEndIf -> .)
    RETURN          reduce using rule 101 (codeEndIf -> .)

    codeEndIf                      shift and go to state 166

state 144

    (18) block -> LFTBRAC blockneutral RGTBRAC .

    IF              reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    WHILE           reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    PRINT           reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    READ            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    ID              reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    INT             reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    FLOAT           reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    CHAR            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    BOOL            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    STRING          reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    RGTBRAC         reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    RETURN          reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSEIF          reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSE            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)


state 145

    (7) arrayvals -> LFTBRACSQR . arrayvalsaux RGTBRACSQR
    (8) arrayvalsaux -> . constant
    (9) arrayvalsaux -> . constant COMMA arrayvalsaux
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 167
    call                           shift and go to state 49
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    arrayvalsaux                   shift and go to state 168

state 146

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals . varsaux2
    (76) varsaux2 -> . COMMA varsaux
    (77) varsaux2 -> . SEMICOLON

    COMMA           shift and go to state 102
    SEMICOLON       shift and go to state 100

    varsaux2                       shift and go to state 169

state 147

    (58) term -> factor DIVISION codeAddOperator term .

    PLUS            reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    MINUS           reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    COMMA           reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    SEMICOLON       reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    RGTPAREN        reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    RGTBRACSQR      reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    AND             reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    DOUBEQUAL       reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    NOT             reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    OR              reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    LESSTHANEQUAL   reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    GREATTHANEQUAL  reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    GREATTHAN       reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    LESSTHAN        reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)


state 148

    (57) term -> factor MULTIPLICATION codeAddOperator term .

    PLUS            reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    MINUS           reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    COMMA           reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    SEMICOLON       reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    RGTPAREN        reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    RGTBRACSQR      reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    AND             reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    DOUBEQUAL       reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    NOT             reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    OR              reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    LESSTHANEQUAL   reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    GREATTHANEQUAL  reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    GREATTHAN       reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    LESSTHAN        reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)


state 149

    (40) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN . codeDeleteOpenParen codeAskFactor
    (114) codeDeleteOpenParen -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeDeleteOpenParen            shift and go to state 170
    empty                          shift and go to state 171

state 150

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad . exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 172

state 151

    (94) codeEraQuad -> empty .

    LFTPAREN        reduce using rule 94 (codeEraQuad -> empty .)
    PLUS            reduce using rule 94 (codeEraQuad -> empty .)
    MINUS           reduce using rule 94 (codeEraQuad -> empty .)
    ID              reduce using rule 94 (codeEraQuad -> empty .)
    TRUE            reduce using rule 94 (codeEraQuad -> empty .)
    FALSE           reduce using rule 94 (codeEraQuad -> empty .)
    FLOAT           reduce using rule 94 (codeEraQuad -> empty .)
    INT             reduce using rule 94 (codeEraQuad -> empty .)
    STRING          reduce using rule 94 (codeEraQuad -> empty .)


state 152

    (6) array -> ID LFTBRACSQR exp RGTBRACSQR .

    MULTIPLICATION  reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DIVISION        reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    PLUS            reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MINUS           reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    AND             reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DOUBEQUAL       reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    NOT             reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    OR              reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHANEQUAL   reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHANEQUAL  reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHAN       reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHAN        reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    COMMA           reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    SEMICOLON       reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTPAREN        reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTBRACSQR      reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    EQUAL           reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)


state 153

    (35) exp -> term PLUS codeAddOperator exp .

    COMMA           reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    SEMICOLON       reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    RGTPAREN        reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    AND             reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    DOUBEQUAL       reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    NOT             reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    OR              reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    LESSTHANEQUAL   reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    GREATTHANEQUAL  reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    GREATTHAN       reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    LESSTHAN        reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    RGTBRACSQR      reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)


state 154

    (36) exp -> term MINUS codeAddOperator exp .

    COMMA           reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    SEMICOLON       reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    RGTPAREN        reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    AND             reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    DOUBEQUAL       reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    NOT             reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    OR              reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    LESSTHANEQUAL   reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    GREATTHANEQUAL  reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    GREATTHAN       reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    LESSTHAN        reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    RGTBRACSQR      reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)


state 155

    (43) expression -> exp expressionaux codeAddOperator exp . codeAskExpression
    (122) codeAskExpression -> . empty
    (86) empty -> .

    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)

    empty                          shift and go to state 173
    codeAskExpression              shift and go to state 174

state 156

    (54) parameter -> type codeCheckType . ID codeAddParameters
    (55) parameter -> type codeCheckType . ID codeAddParameters COMMA parameter

    ID              shift and go to state 175


state 157

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN . codeAddFunctQuad blockreturn codeScope
    (97) codeAddFunctQuad -> .

    LFTBRAC         reduce using rule 97 (codeAddFunctQuad -> .)

    codeAddFunctQuad               shift and go to state 176

state 158

    (83) read -> READ LFTPAREN readaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 177


state 159

    (85) readaux -> array .

    RGTPAREN        reduce using rule 85 (readaux -> array .)


state 160

    (84) readaux -> ID .
    (6) array -> ID . LFTBRACSQR exp RGTBRACSQR

    RGTPAREN        reduce using rule 84 (readaux -> ID .)
    LFTBRACSQR      shift and go to state 83


state 161

    (53) write -> PRINT LFTPAREN constant . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 178


state 162

    (52) loop -> WHILE codeWhileCondition LFTPAREN . expression RGTPAREN codeGOTOF block codeGOTOWhile
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 179

state 163

    (10) assignment -> assignmentaux EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 180


state 164

    (21) conditionaux -> LFTPAREN expression . RGTPAREN codeGOTOF block conditionaux2

    RGTPAREN        shift and go to state 181


state 165

    (20) condition -> IF conditionaux ELSE . codeElse block codeEndIf
    (100) codeElse -> .

    LFTBRAC         reduce using rule 100 (codeElse -> .)

    codeElse                       shift and go to state 182

state 166

    (19) condition -> IF conditionaux codeEndIf .

    IF              reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    WHILE           reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    PRINT           reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    READ            reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    ID              reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    INT             reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    FLOAT           reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    CHAR            reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    BOOL            reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    STRING          reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    RGTBRAC         reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    RETURN          reduce using rule 19 (condition -> IF conditionaux codeEndIf .)


state 167

    (8) arrayvalsaux -> constant .
    (9) arrayvalsaux -> constant . COMMA arrayvalsaux

    RGTBRACSQR      reduce using rule 8 (arrayvalsaux -> constant .)
    COMMA           shift and go to state 183


state 168

    (7) arrayvals -> LFTBRACSQR arrayvalsaux . RGTBRACSQR

    RGTBRACSQR      shift and go to state 184


state 169

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .

    INT             reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    FLOAT           reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    CHAR            reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    BOOL            reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    STRING          reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    FUNCTION        reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    PRIOMH          reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    IF              reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    WHILE           reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    PRINT           reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    READ            reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    ID              reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    RGTBRAC         reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)
    RETURN          reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals varsaux2 .)


state 170

    (40) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen . codeAskFactor
    (121) codeAskFactor -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAskFactor                  shift and go to state 185
    empty                          shift and go to state 67

state 171

    (114) codeDeleteOpenParen -> empty .

    MULTIPLICATION  reduce using rule 114 (codeDeleteOpenParen -> empty .)
    DIVISION        reduce using rule 114 (codeDeleteOpenParen -> empty .)
    PLUS            reduce using rule 114 (codeDeleteOpenParen -> empty .)
    MINUS           reduce using rule 114 (codeDeleteOpenParen -> empty .)
    AND             reduce using rule 114 (codeDeleteOpenParen -> empty .)
    DOUBEQUAL       reduce using rule 114 (codeDeleteOpenParen -> empty .)
    NOT             reduce using rule 114 (codeDeleteOpenParen -> empty .)
    OR              reduce using rule 114 (codeDeleteOpenParen -> empty .)
    LESSTHANEQUAL   reduce using rule 114 (codeDeleteOpenParen -> empty .)
    GREATTHANEQUAL  reduce using rule 114 (codeDeleteOpenParen -> empty .)
    GREATTHAN       reduce using rule 114 (codeDeleteOpenParen -> empty .)
    LESSTHAN        reduce using rule 114 (codeDeleteOpenParen -> empty .)
    COMMA           reduce using rule 114 (codeDeleteOpenParen -> empty .)
    SEMICOLON       reduce using rule 114 (codeDeleteOpenParen -> empty .)
    RGTPAREN        reduce using rule 114 (codeDeleteOpenParen -> empty .)
    RGTBRACSQR      reduce using rule 114 (codeDeleteOpenParen -> empty .)


state 172

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp . codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (93) codeAddArguments -> . empty
    (86) empty -> .

    RGTPAREN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

    codeAddArguments               shift and go to state 186
    empty                          shift and go to state 187

state 173

    (122) codeAskExpression -> empty .

    COMMA           reduce using rule 122 (codeAskExpression -> empty .)
    SEMICOLON       reduce using rule 122 (codeAskExpression -> empty .)
    RGTPAREN        reduce using rule 122 (codeAskExpression -> empty .)


state 174

    (43) expression -> exp expressionaux codeAddOperator exp codeAskExpression .

    SEMICOLON       reduce using rule 43 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)
    RGTPAREN        reduce using rule 43 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)
    COMMA           reduce using rule 43 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)


state 175

    (54) parameter -> type codeCheckType ID . codeAddParameters
    (55) parameter -> type codeCheckType ID . codeAddParameters COMMA parameter
    (110) codeAddParameters -> .

    COMMA           reduce using rule 110 (codeAddParameters -> .)
    RGTPAREN        reduce using rule 110 (codeAddParameters -> .)

    codeAddParameters              shift and go to state 188

state 176

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad . blockreturn codeScope
    (13) blockreturn -> . LFTBRAC blockneutral RGTBRAC
    (14) blockreturn -> . LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC

    LFTBRAC         shift and go to state 189

    blockreturn                    shift and go to state 190

state 177

    (83) read -> READ LFTPAREN readaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 191


state 178

    (53) write -> PRINT LFTPAREN constant RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 192


state 179

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression . RGTPAREN codeGOTOF block codeGOTOWhile

    RGTPAREN        shift and go to state 193


state 180

    (10) assignment -> assignmentaux EQUAL expression SEMICOLON .

    IF              reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    READ            reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    ID              reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    INT             reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    STRING          reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)


state 181

    (21) conditionaux -> LFTPAREN expression RGTPAREN . codeGOTOF block conditionaux2
    (103) codeGOTOF -> .

    LFTBRAC         reduce using rule 103 (codeGOTOF -> .)

    codeGOTOF                      shift and go to state 194

state 182

    (20) condition -> IF conditionaux ELSE codeElse . block codeEndIf
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 195

state 183

    (9) arrayvalsaux -> constant COMMA . arrayvalsaux
    (8) arrayvalsaux -> . constant
    (9) arrayvalsaux -> . constant COMMA arrayvalsaux
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 167
    call                           shift and go to state 49
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    arrayvalsaux                   shift and go to state 196

state 184

    (7) arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .

    COMMA           reduce using rule 7 (arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .)
    SEMICOLON       reduce using rule 7 (arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .)


state 185

    (40) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .

    MULTIPLICATION  reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    DIVISION        reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    PLUS            reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    MINUS           reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    AND             reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    DOUBEQUAL       reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    NOT             reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    OR              reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    LESSTHANEQUAL   reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    GREATTHANEQUAL  reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    GREATTHAN       reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    LESSTHAN        reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    COMMA           reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    SEMICOLON       reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    RGTPAREN        reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    RGTBRACSQR      reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)


state 186

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments . callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (80) callaux -> . codeMovePointer COMMA exp codeAddArguments callaux
    (81) callaux -> . empty
    (92) codeMovePointer -> . empty
    (86) empty -> .

    RGTPAREN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

    callaux                        shift and go to state 197
    codeMovePointer                shift and go to state 198
    empty                          shift and go to state 199

state 187

    (93) codeAddArguments -> empty .

    RGTPAREN        reduce using rule 93 (codeAddArguments -> empty .)
    COMMA           reduce using rule 93 (codeAddArguments -> empty .)


state 188

    (54) parameter -> type codeCheckType ID codeAddParameters .
    (55) parameter -> type codeCheckType ID codeAddParameters . COMMA parameter

    RGTPAREN        reduce using rule 54 (parameter -> type codeCheckType ID codeAddParameters .)
    COMMA           shift and go to state 200


state 189

    (13) blockreturn -> LFTBRAC . blockneutral RGTBRAC
    (14) blockreturn -> LFTBRAC . blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call SEMICOLON
    (75) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    IF              shift and go to state 118
    WHILE           shift and go to state 107
    PRINT           shift and go to state 106
    READ            shift and go to state 105
    ID              shift and go to state 116
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 104
    array                          shift and go to state 108
    write                          shift and go to state 109
    call                           shift and go to state 111
    type                           shift and go to state 12
    empty                          shift and go to state 112
    statement                      shift and go to state 113
    read                           shift and go to state 110
    assignment                     shift and go to state 114
    assignmentaux                  shift and go to state 115
    condition                      shift and go to state 117
    blockneutral                   shift and go to state 201
    loop                           shift and go to state 120

state 190

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn . codeScope
    (106) codeScope -> .

    FUNCTION        reduce using rule 106 (codeScope -> .)
    PRIOMH          reduce using rule 106 (codeScope -> .)

    codeScope                      shift and go to state 202

state 191

    (83) read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .

    IF              reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)


state 192

    (53) write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .

    IF              reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    READ            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    ID              reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    INT             reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    STRING          reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)


state 193

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN . codeGOTOF block codeGOTOWhile
    (103) codeGOTOF -> .

    LFTBRAC         reduce using rule 103 (codeGOTOF -> .)

    codeGOTOF                      shift and go to state 203

state 194

    (21) conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF . block conditionaux2
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 204

state 195

    (20) condition -> IF conditionaux ELSE codeElse block . codeEndIf
    (101) codeEndIf -> .

    IF              reduce using rule 101 (codeEndIf -> .)
    WHILE           reduce using rule 101 (codeEndIf -> .)
    PRINT           reduce using rule 101 (codeEndIf -> .)
    READ            reduce using rule 101 (codeEndIf -> .)
    ID              reduce using rule 101 (codeEndIf -> .)
    INT             reduce using rule 101 (codeEndIf -> .)
    FLOAT           reduce using rule 101 (codeEndIf -> .)
    CHAR            reduce using rule 101 (codeEndIf -> .)
    BOOL            reduce using rule 101 (codeEndIf -> .)
    STRING          reduce using rule 101 (codeEndIf -> .)
    RGTBRAC         reduce using rule 101 (codeEndIf -> .)
    RETURN          reduce using rule 101 (codeEndIf -> .)

    codeEndIf                      shift and go to state 205

state 196

    (9) arrayvalsaux -> constant COMMA arrayvalsaux .

    RGTBRACSQR      reduce using rule 9 (arrayvalsaux -> constant COMMA arrayvalsaux .)


state 197

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux . RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    RGTPAREN        shift and go to state 206


state 198

    (80) callaux -> codeMovePointer . COMMA exp codeAddArguments callaux

    COMMA           shift and go to state 207


state 199

    (81) callaux -> empty .
    (92) codeMovePointer -> empty .

    RGTPAREN        reduce using rule 81 (callaux -> empty .)
    COMMA           reduce using rule 92 (codeMovePointer -> empty .)


state 200

    (55) parameter -> type codeCheckType ID codeAddParameters COMMA . parameter
    (54) parameter -> . type codeCheckType ID codeAddParameters
    (55) parameter -> . type codeCheckType ID codeAddParameters COMMA parameter
    (56) parameter -> . empty
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (86) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 86 (empty -> .)

    parameter                      shift and go to state 208
    type                           shift and go to state 132
    empty                          shift and go to state 134

state 201

    (13) blockreturn -> LFTBRAC blockneutral . RGTBRAC
    (14) blockreturn -> LFTBRAC blockneutral . RETURN exp codeReturnQuad SEMICOLON RGTBRAC

    RGTBRAC         shift and go to state 210
    RETURN          shift and go to state 209


state 202

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope .

    FUNCTION        reduce using rule 72 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope .)
    PRIOMH          reduce using rule 72 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope .)


state 203

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF . block codeGOTOWhile
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 211

state 204

    (21) conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block . conditionaux2
    (22) conditionaux2 -> . codeNextIf ELSEIF conditionaux
    (23) conditionaux2 -> . empty
    (102) codeNextIf -> .
    (86) empty -> .

    ELSEIF          reduce using rule 102 (codeNextIf -> .)
    ELSE            reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    PRINT           reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    CHAR            reduce using rule 86 (empty -> .)
    BOOL            reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)

    conditionaux2                  shift and go to state 212
    codeNextIf                     shift and go to state 213
    empty                          shift and go to state 214

state 205

    (20) condition -> IF conditionaux ELSE codeElse block codeEndIf .

    IF              reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    WHILE           reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    PRINT           reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    READ            reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    ID              reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    INT             reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    FLOAT           reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    CHAR            reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    BOOL            reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    STRING          reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    RGTBRAC         reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    RETURN          reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)


state 206

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN . codeVerifyNull codeGOSUB codeTempReturn
    (90) codeVerifyNull -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeVerifyNull                 shift and go to state 215
    empty                          shift and go to state 216

state 207

    (80) callaux -> codeMovePointer COMMA . exp codeAddArguments callaux
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 217

state 208

    (55) parameter -> type codeCheckType ID codeAddParameters COMMA parameter .

    RGTPAREN        reduce using rule 55 (parameter -> type codeCheckType ID codeAddParameters COMMA parameter .)


state 209

    (14) blockreturn -> LFTBRAC blockneutral RETURN . exp codeReturnQuad SEMICOLON RGTBRAC
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call codeIsCalll
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (82) call -> . ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 47
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 46
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call                           shift and go to state 49
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 218

state 210

    (13) blockreturn -> LFTBRAC blockneutral RGTBRAC .

    FUNCTION        reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    PRIOMH          reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)


state 211

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block . codeGOTOWhile
    (104) codeGOTOWhile -> .

    IF              reduce using rule 104 (codeGOTOWhile -> .)
    WHILE           reduce using rule 104 (codeGOTOWhile -> .)
    PRINT           reduce using rule 104 (codeGOTOWhile -> .)
    READ            reduce using rule 104 (codeGOTOWhile -> .)
    ID              reduce using rule 104 (codeGOTOWhile -> .)
    INT             reduce using rule 104 (codeGOTOWhile -> .)
    FLOAT           reduce using rule 104 (codeGOTOWhile -> .)
    CHAR            reduce using rule 104 (codeGOTOWhile -> .)
    BOOL            reduce using rule 104 (codeGOTOWhile -> .)
    STRING          reduce using rule 104 (codeGOTOWhile -> .)
    RGTBRAC         reduce using rule 104 (codeGOTOWhile -> .)
    RETURN          reduce using rule 104 (codeGOTOWhile -> .)

    codeGOTOWhile                  shift and go to state 219

state 212

    (21) conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .

    ELSE            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    IF              reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    WHILE           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    PRINT           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    READ            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    ID              reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    INT             reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    FLOAT           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    CHAR            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    BOOL            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    STRING          reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    RGTBRAC         reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    RETURN          reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)


state 213

    (22) conditionaux2 -> codeNextIf . ELSEIF conditionaux

    ELSEIF          shift and go to state 220


state 214

    (23) conditionaux2 -> empty .

    ELSE            reduce using rule 23 (conditionaux2 -> empty .)
    IF              reduce using rule 23 (conditionaux2 -> empty .)
    WHILE           reduce using rule 23 (conditionaux2 -> empty .)
    PRINT           reduce using rule 23 (conditionaux2 -> empty .)
    READ            reduce using rule 23 (conditionaux2 -> empty .)
    ID              reduce using rule 23 (conditionaux2 -> empty .)
    INT             reduce using rule 23 (conditionaux2 -> empty .)
    FLOAT           reduce using rule 23 (conditionaux2 -> empty .)
    CHAR            reduce using rule 23 (conditionaux2 -> empty .)
    BOOL            reduce using rule 23 (conditionaux2 -> empty .)
    STRING          reduce using rule 23 (conditionaux2 -> empty .)
    RGTBRAC         reduce using rule 23 (conditionaux2 -> empty .)
    RETURN          reduce using rule 23 (conditionaux2 -> empty .)


state 215

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull . codeGOSUB codeTempReturn
    (89) codeGOSUB -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeGOSUB                      shift and go to state 221
    empty                          shift and go to state 222

state 216

    (90) codeVerifyNull -> empty .

    MULTIPLICATION  reduce using rule 90 (codeVerifyNull -> empty .)
    DIVISION        reduce using rule 90 (codeVerifyNull -> empty .)
    PLUS            reduce using rule 90 (codeVerifyNull -> empty .)
    MINUS           reduce using rule 90 (codeVerifyNull -> empty .)
    AND             reduce using rule 90 (codeVerifyNull -> empty .)
    DOUBEQUAL       reduce using rule 90 (codeVerifyNull -> empty .)
    NOT             reduce using rule 90 (codeVerifyNull -> empty .)
    OR              reduce using rule 90 (codeVerifyNull -> empty .)
    LESSTHANEQUAL   reduce using rule 90 (codeVerifyNull -> empty .)
    GREATTHANEQUAL  reduce using rule 90 (codeVerifyNull -> empty .)
    GREATTHAN       reduce using rule 90 (codeVerifyNull -> empty .)
    LESSTHAN        reduce using rule 90 (codeVerifyNull -> empty .)
    COMMA           reduce using rule 90 (codeVerifyNull -> empty .)
    SEMICOLON       reduce using rule 90 (codeVerifyNull -> empty .)
    RGTPAREN        reduce using rule 90 (codeVerifyNull -> empty .)
    RGTBRACSQR      reduce using rule 90 (codeVerifyNull -> empty .)


state 217

    (80) callaux -> codeMovePointer COMMA exp . codeAddArguments callaux
    (93) codeAddArguments -> . empty
    (86) empty -> .

    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)

    codeAddArguments               shift and go to state 223
    empty                          shift and go to state 187

state 218

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp . codeReturnQuad SEMICOLON RGTBRAC
    (96) codeReturnQuad -> .

    SEMICOLON       reduce using rule 96 (codeReturnQuad -> .)

    codeReturnQuad                 shift and go to state 224

state 219

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .

    IF              reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    WHILE           reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    PRINT           reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    READ            reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    ID              reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    INT             reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    FLOAT           reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    CHAR            reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    BOOL            reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    STRING          reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    RGTBRAC         reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    RETURN          reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)


state 220

    (22) conditionaux2 -> codeNextIf ELSEIF . conditionaux
    (21) conditionaux -> . LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2

    LFTPAREN        shift and go to state 142

    conditionaux                   shift and go to state 225

state 221

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB . codeTempReturn
    (87) codeTempReturn -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeTempReturn                 shift and go to state 226
    empty                          shift and go to state 227

state 222

    (89) codeGOSUB -> empty .

    MULTIPLICATION  reduce using rule 89 (codeGOSUB -> empty .)
    DIVISION        reduce using rule 89 (codeGOSUB -> empty .)
    PLUS            reduce using rule 89 (codeGOSUB -> empty .)
    MINUS           reduce using rule 89 (codeGOSUB -> empty .)
    AND             reduce using rule 89 (codeGOSUB -> empty .)
    DOUBEQUAL       reduce using rule 89 (codeGOSUB -> empty .)
    NOT             reduce using rule 89 (codeGOSUB -> empty .)
    OR              reduce using rule 89 (codeGOSUB -> empty .)
    LESSTHANEQUAL   reduce using rule 89 (codeGOSUB -> empty .)
    GREATTHANEQUAL  reduce using rule 89 (codeGOSUB -> empty .)
    GREATTHAN       reduce using rule 89 (codeGOSUB -> empty .)
    LESSTHAN        reduce using rule 89 (codeGOSUB -> empty .)
    COMMA           reduce using rule 89 (codeGOSUB -> empty .)
    SEMICOLON       reduce using rule 89 (codeGOSUB -> empty .)
    RGTPAREN        reduce using rule 89 (codeGOSUB -> empty .)
    RGTBRACSQR      reduce using rule 89 (codeGOSUB -> empty .)


state 223

    (80) callaux -> codeMovePointer COMMA exp codeAddArguments . callaux
    (80) callaux -> . codeMovePointer COMMA exp codeAddArguments callaux
    (81) callaux -> . empty
    (92) codeMovePointer -> . empty
    (86) empty -> .

    RGTPAREN        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)

    codeMovePointer                shift and go to state 198
    empty                          shift and go to state 199
    callaux                        shift and go to state 228

state 224

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad . SEMICOLON RGTBRAC

    SEMICOLON       shift and go to state 229


state 225

    (22) conditionaux2 -> codeNextIf ELSEIF conditionaux .

    ELSE            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    IF              reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    WHILE           reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    PRINT           reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    READ            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    ID              reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    INT             reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    FLOAT           reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    CHAR            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    BOOL            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    STRING          reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    RGTBRAC         reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    RETURN          reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)


state 226

    (82) call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .

    SEMICOLON       reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    MULTIPLICATION  reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    DIVISION        reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    PLUS            reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    MINUS           reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    COMMA           reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    RGTPAREN        reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    AND             reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    DOUBEQUAL       reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    NOT             reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    OR              reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    LESSTHANEQUAL   reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    GREATTHANEQUAL  reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    GREATTHAN       reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    LESSTHAN        reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)
    RGTBRACSQR      reduce using rule 82 (call -> ID codeVerifyFunct LFTPAREN codeEraQuad exp codeAddArguments callaux RGTPAREN codeVerifyNull codeGOSUB codeTempReturn .)


state 227

    (87) codeTempReturn -> empty .

    MULTIPLICATION  reduce using rule 87 (codeTempReturn -> empty .)
    DIVISION        reduce using rule 87 (codeTempReturn -> empty .)
    PLUS            reduce using rule 87 (codeTempReturn -> empty .)
    MINUS           reduce using rule 87 (codeTempReturn -> empty .)
    AND             reduce using rule 87 (codeTempReturn -> empty .)
    DOUBEQUAL       reduce using rule 87 (codeTempReturn -> empty .)
    NOT             reduce using rule 87 (codeTempReturn -> empty .)
    OR              reduce using rule 87 (codeTempReturn -> empty .)
    LESSTHANEQUAL   reduce using rule 87 (codeTempReturn -> empty .)
    GREATTHANEQUAL  reduce using rule 87 (codeTempReturn -> empty .)
    GREATTHAN       reduce using rule 87 (codeTempReturn -> empty .)
    LESSTHAN        reduce using rule 87 (codeTempReturn -> empty .)
    COMMA           reduce using rule 87 (codeTempReturn -> empty .)
    SEMICOLON       reduce using rule 87 (codeTempReturn -> empty .)
    RGTPAREN        reduce using rule 87 (codeTempReturn -> empty .)
    RGTBRACSQR      reduce using rule 87 (codeTempReturn -> empty .)


state 228

    (80) callaux -> codeMovePointer COMMA exp codeAddArguments callaux .

    RGTPAREN        reduce using rule 80 (callaux -> codeMovePointer COMMA exp codeAddArguments callaux .)


state 229

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON . RGTBRAC

    RGTBRAC         shift and go to state 230


state 230

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC .

    FUNCTION        reduce using rule 14 (blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC .)
    PRIOMH          reduce using rule 14 (blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC .)

