Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC
Rule 2     auxprogram -> vars auxprogram
Rule 3     auxprogram -> function auxprogram
Rule 4     auxprogram -> <empty>
Rule 5     array -> ID LFTBRACSQR exp RGTBRACSQR
Rule 6     arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR
Rule 7     arrayvalsaux -> constant
Rule 8     arrayvalsaux -> constant COMMA arrayvalsaux
Rule 9     assignment -> assignmentaux EQUAL expression SEMICOLON
Rule 10    assignmentaux -> ID
Rule 11    assignmentaux -> array
Rule 12    blockreturn -> LFTBRAC blockneutral RGTBRAC
Rule 13    blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC
Rule 14    blockneutral -> statement blockneutral
Rule 15    blockneutral -> vars blockneutral
Rule 16    blockneutral -> empty
Rule 17    block -> LFTBRAC blockneutral RGTBRAC
Rule 18    condition -> IF conditionaux
Rule 19    condition -> IF conditionaux ELSE block
Rule 20    conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2
Rule 21    conditionaux2 -> ELSEIF conditionaux
Rule 22    conditionaux2 -> empty
Rule 23    constant -> ID
Rule 24    constant -> array
Rule 25    constant -> cteN
Rule 26    constant -> cteS
Rule 27    constant -> TRUE
Rule 28    constant -> FALSE
Rule 29    constant -> call2
Rule 30    cteN -> FLOAT codeAddConst
Rule 31    cteN -> INT codeAddConst
Rule 32    cteS -> STRING
Rule 33    exp -> term
Rule 34    exp -> term PLUS codeAddOperator exp
Rule 35    exp -> term MINUS codeAddOperator exp
Rule 36    factoraux -> constant
Rule 37    factoraux -> PLUS constant
Rule 38    factoraux -> MINUS constant
Rule 39    factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
Rule 40    factor -> factoraux codeAskFactor
Rule 41    expression -> exp
Rule 42    expression -> exp expressionaux codeAddOperator exp codeAskExpression
Rule 43    expressionaux -> AND
Rule 44    expressionaux -> DOUBEQUAL
Rule 45    expressionaux -> NOT
Rule 46    expressionaux -> OR
Rule 47    expressionaux -> LESSTHANEQUAL
Rule 48    expressionaux -> GREATTHANEQUAL
Rule 49    expressionaux -> GREATTHAN
Rule 50    expressionaux -> LESSTHAN
Rule 51    loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO
Rule 52    write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON
Rule 53    parameter -> type codeCheckType ID codeAddParameters
Rule 54    parameter -> type codeCheckType ID codeAddParameters COMMA parameter
Rule 55    parameter -> empty
Rule 56    term -> factor MULTIPLICATION codeAddOperator term
Rule 57    term -> factor DIVISION codeAddOperator term
Rule 58    term -> factor codeAskTerm
Rule 59    statement -> assignment
Rule 60    statement -> condition
Rule 61    statement -> loop
Rule 62    statement -> write
Rule 63    statement -> read
Rule 64    statement -> call
Rule 65    type -> INT
Rule 66    type -> FLOAT
Rule 67    type -> CHAR
Rule 68    type -> BOOL
Rule 69    type -> STRING
Rule 70    main -> PRIOMH codeScope block
Rule 71    function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
Rule 72    functionaux -> VOID codeTypeVoid codeCheckType
Rule 73    functionaux -> codeFuncIndicator type codeCheckType
Rule 74    vars -> type codeCheckType varsaux
Rule 75    varsaux -> ID codeAddVar EQUAL expression SEMICOLON
Rule 76    varsaux -> ID codeAddVar EQUAL expression COMMA varsaux
Rule 77    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
Rule 78    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux
Rule 79    call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON
Rule 80    callaux -> COMMA exp callaux
Rule 81    callaux -> empty
Rule 82    call2 -> ID LFTPAREN exp callaux RGTPAREN
Rule 83    read -> READ LFTPAREN readaux RGTPAREN SEMICOLON
Rule 84    readaux -> ID
Rule 85    readaux -> array
Rule 86    empty -> <empty>
Rule 87    codeGOTO -> <empty>
Rule 88    codeGOTOF -> <empty>
Rule 89    codeWhileCondition -> <empty>
Rule 90    codeScope -> <empty>
Rule 91    codeCheckType -> <empty>
Rule 92    codeAddVar -> <empty>
Rule 93    codeAddVarArreglo -> <empty>
Rule 94    codeAddParameters -> <empty>
Rule 95    codeNameOfFunct -> <empty>
Rule 96    codeTypeVoid -> <empty>
Rule 97    codeFuncIndicator -> <empty>
Rule 98    codeDeleteOpenParen -> empty
Rule 99    codeAddOpenParen -> empty
Rule 100   codeAddConst -> empty
Rule 101   codeAddOperator -> empty
Rule 102   codeAskTerm -> empty
Rule 103   codeAskFactor -> empty
Rule 104   codeAskExpression -> empty

Terminals, with rules where they appear

AND                  : 43
BOOL                 : 68
CHAR                 : 67
COMMA                : 8 54 76 78 80
DIVISION             : 57
DOUBEQUAL            : 44
ELSE                 : 19
ELSEIF               : 21
EQUAL                : 9 75 76 77 78
FALSE                : 28
FLOAT                : 30 66
FUNCTION             : 71
GREATTHAN            : 49
GREATTHANEQUAL       : 48
ID                   : 1 5 10 23 53 54 71 75 76 77 78 79 82 84
IF                   : 18 19
INT                  : 31 65 77 78
LESSTHAN             : 50
LESSTHANEQUAL        : 47
LFTBRAC              : 1 12 13 17
LFTBRACSQR           : 5 6 77 78
LFTPAREN             : 20 39 51 52 71 79 82 83
MINUS                : 35 38
MULTIPLICATION       : 56
NOT                  : 45
OR                   : 46
PLUS                 : 34 37
PRINT                : 52
PRIOMH               : 70
PROGRAM              : 1
READ                 : 83
RETURN               : 13
RGTBRAC              : 1 12 13 17
RGTBRACSQR           : 5 6 77 78
RGTPAREN             : 20 39 51 52 71 79 82 83
SEMICOLON            : 9 13 52 75 77 79 83
STRING               : 32 69
TRUE                 : 27
VOID                 : 72
WHILE                : 51
error                : 

Nonterminals, with rules where they appear

array                : 11 24 85
arrayvals            : 77 78
arrayvalsaux         : 6 8
assignment           : 59
assignmentaux        : 9
auxprogram           : 1 2 3
block                : 19 20 51 70
blockneutral         : 12 13 14 15 17
blockreturn          : 71
call                 : 64
call2                : 29
callaux              : 79 80 82
codeAddConst         : 30 31
codeAddOpenParen     : 39
codeAddOperator      : 34 35 42 56 57
codeAddParameters    : 53 54
codeAddVar           : 75 76
codeAddVarArreglo    : 77 78
codeAskExpression    : 42
codeAskFactor        : 39 40
codeAskTerm          : 58
codeCheckType        : 53 54 72 73 74
codeDeleteOpenParen  : 39
codeFuncIndicator    : 73
codeGOTO             : 51
codeGOTOF            : 51
codeNameOfFunct      : 71
codeScope            : 70 71 71
codeTypeVoid         : 72
codeWhileCondition   : 51
condition            : 60
conditionaux         : 18 19 21
conditionaux2        : 20
constant             : 7 8 36 37 38 52
cteN                 : 25
cteS                 : 26
empty                : 16 22 55 81 98 99 100 101 102 103 104
exp                  : 5 13 34 35 41 42 42 79 80 82
expression           : 9 20 39 51 75 76
expressionaux        : 42
factor               : 56 57 58
factoraux            : 40
function             : 3
functionaux          : 71
loop                 : 61
main                 : 1
parameter            : 54 71
program              : 0
read                 : 63
readaux              : 83
statement            : 14
term                 : 33 34 35 56 57
type                 : 53 54 73 74
vars                 : 2 15
varsaux              : 74 76 78
write                : 62

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LFTBRAC auxprogram main RGTBRAC

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LFTBRAC auxprogram main RGTBRAC

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LFTBRAC auxprogram main RGTBRAC

    LFTBRAC         shift and go to state 4


state 4

    (1) program -> PROGRAM ID LFTBRAC . auxprogram main RGTBRAC
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> .
    (74) vars -> . type codeCheckType varsaux
    (71) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING

    PRIOMH          reduce using rule 4 (auxprogram -> .)
    FUNCTION        shift and go to state 5
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    function                       shift and go to state 9
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 8
    type                           shift and go to state 12

state 5

    (71) function -> FUNCTION . codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (90) codeScope -> .

    VOID            reduce using rule 90 (codeScope -> .)
    INT             reduce using rule 90 (codeScope -> .)
    FLOAT           reduce using rule 90 (codeScope -> .)
    CHAR            reduce using rule 90 (codeScope -> .)
    BOOL            reduce using rule 90 (codeScope -> .)
    STRING          reduce using rule 90 (codeScope -> .)

    codeScope                      shift and go to state 15

state 6

    (2) auxprogram -> vars . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> .
    (74) vars -> . type codeCheckType varsaux
    (71) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING

    PRIOMH          reduce using rule 4 (auxprogram -> .)
    FUNCTION        shift and go to state 5
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    function                       shift and go to state 9
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 16
    type                           shift and go to state 12

state 7

    (67) type -> CHAR .

    ID              reduce using rule 67 (type -> CHAR .)


state 8

    (1) program -> PROGRAM ID LFTBRAC auxprogram . main RGTBRAC
    (70) main -> . PRIOMH codeScope block

    PRIOMH          shift and go to state 17

    main                           shift and go to state 18

state 9

    (3) auxprogram -> function . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> .
    (74) vars -> . type codeCheckType varsaux
    (71) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING

    PRIOMH          reduce using rule 4 (auxprogram -> .)
    FUNCTION        shift and go to state 5
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    function                       shift and go to state 9
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 19
    type                           shift and go to state 12

state 10

    (69) type -> STRING .

    ID              reduce using rule 69 (type -> STRING .)


state 11

    (65) type -> INT .

    ID              reduce using rule 65 (type -> INT .)


state 12

    (74) vars -> type . codeCheckType varsaux
    (91) codeCheckType -> .

    ID              reduce using rule 91 (codeCheckType -> .)

    codeCheckType                  shift and go to state 20

state 13

    (66) type -> FLOAT .

    ID              reduce using rule 66 (type -> FLOAT .)


state 14

    (68) type -> BOOL .

    ID              reduce using rule 68 (type -> BOOL .)


state 15

    (71) function -> FUNCTION codeScope . functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (72) functionaux -> . VOID codeTypeVoid codeCheckType
    (73) functionaux -> . codeFuncIndicator type codeCheckType
    (97) codeFuncIndicator -> .

    VOID            shift and go to state 23
    INT             reduce using rule 97 (codeFuncIndicator -> .)
    FLOAT           reduce using rule 97 (codeFuncIndicator -> .)
    CHAR            reduce using rule 97 (codeFuncIndicator -> .)
    BOOL            reduce using rule 97 (codeFuncIndicator -> .)
    STRING          reduce using rule 97 (codeFuncIndicator -> .)

    functionaux                    shift and go to state 21
    codeFuncIndicator              shift and go to state 22

state 16

    (2) auxprogram -> vars auxprogram .

    PRIOMH          reduce using rule 2 (auxprogram -> vars auxprogram .)


state 17

    (70) main -> PRIOMH . codeScope block
    (90) codeScope -> .

    LFTBRAC         reduce using rule 90 (codeScope -> .)

    codeScope                      shift and go to state 24

state 18

    (1) program -> PROGRAM ID LFTBRAC auxprogram main . RGTBRAC

    RGTBRAC         shift and go to state 25


state 19

    (3) auxprogram -> function auxprogram .

    PRIOMH          reduce using rule 3 (auxprogram -> function auxprogram .)


state 20

    (74) vars -> type codeCheckType . varsaux
    (75) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (76) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (77) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    ID              shift and go to state 26

    varsaux                        shift and go to state 27

state 21

    (71) function -> FUNCTION codeScope functionaux . ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope

    ID              shift and go to state 28


state 22

    (73) functionaux -> codeFuncIndicator . type codeCheckType
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    type                           shift and go to state 29

state 23

    (72) functionaux -> VOID . codeTypeVoid codeCheckType
    (96) codeTypeVoid -> .

    ID              reduce using rule 96 (codeTypeVoid -> .)

    codeTypeVoid                   shift and go to state 30

state 24

    (70) main -> PRIOMH codeScope . block
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 31

    block                          shift and go to state 32

state 25

    (1) program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .

    $end            reduce using rule 1 (program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .)


state 26

    (75) varsaux -> ID . codeAddVar EQUAL expression SEMICOLON
    (76) varsaux -> ID . codeAddVar EQUAL expression COMMA varsaux
    (77) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux
    (92) codeAddVar -> .
    (93) codeAddVarArreglo -> .

    EQUAL           reduce using rule 92 (codeAddVar -> .)
    LFTBRACSQR      reduce using rule 93 (codeAddVarArreglo -> .)

    codeAddVarArreglo              shift and go to state 33
    codeAddVar                     shift and go to state 34

state 27

    (74) vars -> type codeCheckType varsaux .

    IF              reduce using rule 74 (vars -> type codeCheckType varsaux .)
    WHILE           reduce using rule 74 (vars -> type codeCheckType varsaux .)
    PRINT           reduce using rule 74 (vars -> type codeCheckType varsaux .)
    READ            reduce using rule 74 (vars -> type codeCheckType varsaux .)
    ID              reduce using rule 74 (vars -> type codeCheckType varsaux .)
    INT             reduce using rule 74 (vars -> type codeCheckType varsaux .)
    FLOAT           reduce using rule 74 (vars -> type codeCheckType varsaux .)
    CHAR            reduce using rule 74 (vars -> type codeCheckType varsaux .)
    BOOL            reduce using rule 74 (vars -> type codeCheckType varsaux .)
    STRING          reduce using rule 74 (vars -> type codeCheckType varsaux .)
    RGTBRAC         reduce using rule 74 (vars -> type codeCheckType varsaux .)
    RETURN          reduce using rule 74 (vars -> type codeCheckType varsaux .)
    FUNCTION        reduce using rule 74 (vars -> type codeCheckType varsaux .)
    PRIOMH          reduce using rule 74 (vars -> type codeCheckType varsaux .)


state 28

    (71) function -> FUNCTION codeScope functionaux ID . codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope
    (95) codeNameOfFunct -> .

    LFTPAREN        reduce using rule 95 (codeNameOfFunct -> .)

    codeNameOfFunct                shift and go to state 35

state 29

    (73) functionaux -> codeFuncIndicator type . codeCheckType
    (91) codeCheckType -> .

    ID              reduce using rule 91 (codeCheckType -> .)

    codeCheckType                  shift and go to state 36

state 30

    (72) functionaux -> VOID codeTypeVoid . codeCheckType
    (91) codeCheckType -> .

    ID              reduce using rule 91 (codeCheckType -> .)

    codeCheckType                  shift and go to state 37

state 31

    (17) block -> LFTBRAC . blockneutral RGTBRAC
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (59) statement -> . assignment
    (60) statement -> . condition
    (61) statement -> . loop
    (62) statement -> . write
    (63) statement -> . read
    (64) statement -> . call
    (74) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (51) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO
    (52) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (79) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    IF              shift and go to state 52
    WHILE           shift and go to state 40
    PRINT           shift and go to state 41
    READ            shift and go to state 39
    ID              shift and go to state 50
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 38
    array                          shift and go to state 42
    write                          shift and go to state 43
    call                           shift and go to state 45
    statement                      shift and go to state 46
    type                           shift and go to state 12
    empty                          shift and go to state 47
    read                           shift and go to state 44
    assignment                     shift and go to state 48
    assignmentaux                  shift and go to state 49
    condition                      shift and go to state 51
    blockneutral                   shift and go to state 53
    loop                           shift and go to state 54

state 32

    (70) main -> PRIOMH codeScope block .

    RGTBRAC         reduce using rule 70 (main -> PRIOMH codeScope block .)


state 33

    (77) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    LFTBRACSQR      shift and go to state 55


state 34

    (75) varsaux -> ID codeAddVar . EQUAL expression SEMICOLON
    (76) varsaux -> ID codeAddVar . EQUAL expression COMMA varsaux

    EQUAL           shift and go to state 56


state 35

    (71) function -> FUNCTION codeScope functionaux ID codeNameOfFunct . LFTPAREN parameter RGTPAREN blockreturn codeScope

    LFTPAREN        shift and go to state 57


state 36

    (73) functionaux -> codeFuncIndicator type codeCheckType .

    ID              reduce using rule 73 (functionaux -> codeFuncIndicator type codeCheckType .)


state 37

    (72) functionaux -> VOID codeTypeVoid codeCheckType .

    ID              reduce using rule 72 (functionaux -> VOID codeTypeVoid codeCheckType .)


state 38

    (15) blockneutral -> vars . blockneutral
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (59) statement -> . assignment
    (60) statement -> . condition
    (61) statement -> . loop
    (62) statement -> . write
    (63) statement -> . read
    (64) statement -> . call
    (74) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (51) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO
    (52) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (79) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    IF              shift and go to state 52
    WHILE           shift and go to state 40
    PRINT           shift and go to state 41
    READ            shift and go to state 39
    ID              shift and go to state 50
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 38
    array                          shift and go to state 42
    write                          shift and go to state 43
    call                           shift and go to state 45
    statement                      shift and go to state 46
    type                           shift and go to state 12
    empty                          shift and go to state 47
    read                           shift and go to state 44
    assignment                     shift and go to state 48
    assignmentaux                  shift and go to state 49
    condition                      shift and go to state 51
    blockneutral                   shift and go to state 58
    loop                           shift and go to state 54

state 39

    (83) read -> READ . LFTPAREN readaux RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 59


state 40

    (51) loop -> WHILE . codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO
    (89) codeWhileCondition -> .

    LFTPAREN        reduce using rule 89 (codeWhileCondition -> .)

    codeWhileCondition             shift and go to state 60

state 41

    (52) write -> PRINT . LFTPAREN constant RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 61


state 42

    (11) assignmentaux -> array .

    EQUAL           reduce using rule 11 (assignmentaux -> array .)


state 43

    (62) statement -> write .

    IF              reduce using rule 62 (statement -> write .)
    WHILE           reduce using rule 62 (statement -> write .)
    PRINT           reduce using rule 62 (statement -> write .)
    READ            reduce using rule 62 (statement -> write .)
    ID              reduce using rule 62 (statement -> write .)
    INT             reduce using rule 62 (statement -> write .)
    FLOAT           reduce using rule 62 (statement -> write .)
    CHAR            reduce using rule 62 (statement -> write .)
    BOOL            reduce using rule 62 (statement -> write .)
    STRING          reduce using rule 62 (statement -> write .)
    RGTBRAC         reduce using rule 62 (statement -> write .)
    RETURN          reduce using rule 62 (statement -> write .)


state 44

    (63) statement -> read .

    IF              reduce using rule 63 (statement -> read .)
    WHILE           reduce using rule 63 (statement -> read .)
    PRINT           reduce using rule 63 (statement -> read .)
    READ            reduce using rule 63 (statement -> read .)
    ID              reduce using rule 63 (statement -> read .)
    INT             reduce using rule 63 (statement -> read .)
    FLOAT           reduce using rule 63 (statement -> read .)
    CHAR            reduce using rule 63 (statement -> read .)
    BOOL            reduce using rule 63 (statement -> read .)
    STRING          reduce using rule 63 (statement -> read .)
    RGTBRAC         reduce using rule 63 (statement -> read .)
    RETURN          reduce using rule 63 (statement -> read .)


state 45

    (64) statement -> call .

    IF              reduce using rule 64 (statement -> call .)
    WHILE           reduce using rule 64 (statement -> call .)
    PRINT           reduce using rule 64 (statement -> call .)
    READ            reduce using rule 64 (statement -> call .)
    ID              reduce using rule 64 (statement -> call .)
    INT             reduce using rule 64 (statement -> call .)
    FLOAT           reduce using rule 64 (statement -> call .)
    CHAR            reduce using rule 64 (statement -> call .)
    BOOL            reduce using rule 64 (statement -> call .)
    STRING          reduce using rule 64 (statement -> call .)
    RGTBRAC         reduce using rule 64 (statement -> call .)
    RETURN          reduce using rule 64 (statement -> call .)


state 46

    (14) blockneutral -> statement . blockneutral
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (59) statement -> . assignment
    (60) statement -> . condition
    (61) statement -> . loop
    (62) statement -> . write
    (63) statement -> . read
    (64) statement -> . call
    (74) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (51) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO
    (52) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (79) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    IF              shift and go to state 52
    WHILE           shift and go to state 40
    PRINT           shift and go to state 41
    READ            shift and go to state 39
    ID              shift and go to state 50
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 38
    array                          shift and go to state 42
    write                          shift and go to state 43
    call                           shift and go to state 45
    statement                      shift and go to state 46
    type                           shift and go to state 12
    empty                          shift and go to state 47
    read                           shift and go to state 44
    assignment                     shift and go to state 48
    assignmentaux                  shift and go to state 49
    condition                      shift and go to state 51
    blockneutral                   shift and go to state 62
    loop                           shift and go to state 54

state 47

    (16) blockneutral -> empty .

    RGTBRAC         reduce using rule 16 (blockneutral -> empty .)
    RETURN          reduce using rule 16 (blockneutral -> empty .)


state 48

    (59) statement -> assignment .

    IF              reduce using rule 59 (statement -> assignment .)
    WHILE           reduce using rule 59 (statement -> assignment .)
    PRINT           reduce using rule 59 (statement -> assignment .)
    READ            reduce using rule 59 (statement -> assignment .)
    ID              reduce using rule 59 (statement -> assignment .)
    INT             reduce using rule 59 (statement -> assignment .)
    FLOAT           reduce using rule 59 (statement -> assignment .)
    CHAR            reduce using rule 59 (statement -> assignment .)
    BOOL            reduce using rule 59 (statement -> assignment .)
    STRING          reduce using rule 59 (statement -> assignment .)
    RGTBRAC         reduce using rule 59 (statement -> assignment .)
    RETURN          reduce using rule 59 (statement -> assignment .)


state 49

    (9) assignment -> assignmentaux . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 63


state 50

    (79) call -> ID . LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    LFTPAREN        shift and go to state 64
    EQUAL           reduce using rule 10 (assignmentaux -> ID .)
    LFTBRACSQR      shift and go to state 65


state 51

    (60) statement -> condition .

    IF              reduce using rule 60 (statement -> condition .)
    WHILE           reduce using rule 60 (statement -> condition .)
    PRINT           reduce using rule 60 (statement -> condition .)
    READ            reduce using rule 60 (statement -> condition .)
    ID              reduce using rule 60 (statement -> condition .)
    INT             reduce using rule 60 (statement -> condition .)
    FLOAT           reduce using rule 60 (statement -> condition .)
    CHAR            reduce using rule 60 (statement -> condition .)
    BOOL            reduce using rule 60 (statement -> condition .)
    STRING          reduce using rule 60 (statement -> condition .)
    RGTBRAC         reduce using rule 60 (statement -> condition .)
    RETURN          reduce using rule 60 (statement -> condition .)


state 52

    (18) condition -> IF . conditionaux
    (19) condition -> IF . conditionaux ELSE block
    (20) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 66

    conditionaux                   shift and go to state 67

state 53

    (17) block -> LFTBRAC blockneutral . RGTBRAC

    RGTBRAC         shift and go to state 68


state 54

    (61) statement -> loop .

    IF              reduce using rule 61 (statement -> loop .)
    WHILE           reduce using rule 61 (statement -> loop .)
    PRINT           reduce using rule 61 (statement -> loop .)
    READ            reduce using rule 61 (statement -> loop .)
    ID              reduce using rule 61 (statement -> loop .)
    INT             reduce using rule 61 (statement -> loop .)
    FLOAT           reduce using rule 61 (statement -> loop .)
    CHAR            reduce using rule 61 (statement -> loop .)
    BOOL            reduce using rule 61 (statement -> loop .)
    STRING          reduce using rule 61 (statement -> loop .)
    RGTBRAC         reduce using rule 61 (statement -> loop .)
    RETURN          reduce using rule 61 (statement -> loop .)


state 55

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    INT             shift and go to state 69


state 56

    (75) varsaux -> ID codeAddVar EQUAL . expression SEMICOLON
    (76) varsaux -> ID codeAddVar EQUAL . expression COMMA varsaux
    (41) expression -> . exp
    (42) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    term                           shift and go to state 83
    constant                       shift and go to state 70
    cteS                           shift and go to state 80
    cteN                           shift and go to state 73
    array                          shift and go to state 72
    call2                          shift and go to state 75
    exp                            shift and go to state 87
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    expression                     shift and go to state 88

state 57

    (71) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN . parameter RGTPAREN blockreturn codeScope
    (53) parameter -> . type codeCheckType ID codeAddParameters
    (54) parameter -> . type codeCheckType ID codeAddParameters COMMA parameter
    (55) parameter -> . empty
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING
    (86) empty -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10
    RGTPAREN        reduce using rule 86 (empty -> .)

    type                           shift and go to state 89
    parameter                      shift and go to state 90
    empty                          shift and go to state 91

state 58

    (15) blockneutral -> vars blockneutral .

    RGTBRAC         reduce using rule 15 (blockneutral -> vars blockneutral .)
    RETURN          reduce using rule 15 (blockneutral -> vars blockneutral .)


state 59

    (83) read -> READ LFTPAREN . readaux RGTPAREN SEMICOLON
    (84) readaux -> . ID
    (85) readaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    ID              shift and go to state 94

    readaux                        shift and go to state 92
    array                          shift and go to state 93

state 60

    (51) loop -> WHILE codeWhileCondition . LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO

    LFTPAREN        shift and go to state 95


state 61

    (52) write -> PRINT LFTPAREN . constant RGTPAREN SEMICOLON
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    constant                       shift and go to state 96
    call2                          shift and go to state 75
    array                          shift and go to state 72
    cteN                           shift and go to state 73

state 62

    (14) blockneutral -> statement blockneutral .

    RGTBRAC         reduce using rule 14 (blockneutral -> statement blockneutral .)
    RETURN          reduce using rule 14 (blockneutral -> statement blockneutral .)


state 63

    (9) assignment -> assignmentaux EQUAL . expression SEMICOLON
    (41) expression -> . exp
    (42) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    term                           shift and go to state 83
    constant                       shift and go to state 70
    cteS                           shift and go to state 80
    cteN                           shift and go to state 73
    call2                          shift and go to state 75
    exp                            shift and go to state 87
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    expression                     shift and go to state 97
    array                          shift and go to state 72

state 64

    (79) call -> ID LFTPAREN . exp callaux RGTPAREN SEMICOLON
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 98
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 65

    (5) array -> ID LFTBRACSQR . exp RGTBRACSQR
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 99
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 66

    (20) conditionaux -> LFTPAREN . expression RGTPAREN block conditionaux2
    (41) expression -> . exp
    (42) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    term                           shift and go to state 83
    constant                       shift and go to state 70
    cteS                           shift and go to state 80
    cteN                           shift and go to state 73
    call2                          shift and go to state 75
    exp                            shift and go to state 87
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    expression                     shift and go to state 100
    array                          shift and go to state 72

state 67

    (18) condition -> IF conditionaux .
    (19) condition -> IF conditionaux . ELSE block

    IF              reduce using rule 18 (condition -> IF conditionaux .)
    WHILE           reduce using rule 18 (condition -> IF conditionaux .)
    PRINT           reduce using rule 18 (condition -> IF conditionaux .)
    READ            reduce using rule 18 (condition -> IF conditionaux .)
    ID              reduce using rule 18 (condition -> IF conditionaux .)
    INT             reduce using rule 18 (condition -> IF conditionaux .)
    FLOAT           reduce using rule 18 (condition -> IF conditionaux .)
    CHAR            reduce using rule 18 (condition -> IF conditionaux .)
    BOOL            reduce using rule 18 (condition -> IF conditionaux .)
    STRING          reduce using rule 18 (condition -> IF conditionaux .)
    RGTBRAC         reduce using rule 18 (condition -> IF conditionaux .)
    RETURN          reduce using rule 18 (condition -> IF conditionaux .)
    ELSE            shift and go to state 101


state 68

    (17) block -> LFTBRAC blockneutral RGTBRAC .

    RGTBRAC         reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    IF              reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    WHILE           reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    PRINT           reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    READ            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    ID              reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    INT             reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    FLOAT           reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    CHAR            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    BOOL            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    STRING          reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    RETURN          reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSEIF          reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSE            reduce using rule 17 (block -> LFTBRAC blockneutral RGTBRAC .)


state 69

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvals COMMA varsaux

    RGTBRACSQR      shift and go to state 102


state 70

    (36) factoraux -> constant .

    MULTIPLICATION  reduce using rule 36 (factoraux -> constant .)
    DIVISION        reduce using rule 36 (factoraux -> constant .)
    PLUS            reduce using rule 36 (factoraux -> constant .)
    MINUS           reduce using rule 36 (factoraux -> constant .)
    AND             reduce using rule 36 (factoraux -> constant .)
    DOUBEQUAL       reduce using rule 36 (factoraux -> constant .)
    NOT             reduce using rule 36 (factoraux -> constant .)
    OR              reduce using rule 36 (factoraux -> constant .)
    LESSTHANEQUAL   reduce using rule 36 (factoraux -> constant .)
    GREATTHANEQUAL  reduce using rule 36 (factoraux -> constant .)
    GREATTHAN       reduce using rule 36 (factoraux -> constant .)
    LESSTHAN        reduce using rule 36 (factoraux -> constant .)
    RGTPAREN        reduce using rule 36 (factoraux -> constant .)
    SEMICOLON       reduce using rule 36 (factoraux -> constant .)
    COMMA           reduce using rule 36 (factoraux -> constant .)
    RGTBRACSQR      reduce using rule 36 (factoraux -> constant .)


state 71

    (40) factor -> factoraux . codeAskFactor
    (103) codeAskFactor -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAskFactor                  shift and go to state 103
    empty                          shift and go to state 104

state 72

    (24) constant -> array .

    MULTIPLICATION  reduce using rule 24 (constant -> array .)
    DIVISION        reduce using rule 24 (constant -> array .)
    PLUS            reduce using rule 24 (constant -> array .)
    MINUS           reduce using rule 24 (constant -> array .)
    RGTBRACSQR      reduce using rule 24 (constant -> array .)
    AND             reduce using rule 24 (constant -> array .)
    DOUBEQUAL       reduce using rule 24 (constant -> array .)
    NOT             reduce using rule 24 (constant -> array .)
    OR              reduce using rule 24 (constant -> array .)
    LESSTHANEQUAL   reduce using rule 24 (constant -> array .)
    GREATTHANEQUAL  reduce using rule 24 (constant -> array .)
    GREATTHAN       reduce using rule 24 (constant -> array .)
    LESSTHAN        reduce using rule 24 (constant -> array .)
    SEMICOLON       reduce using rule 24 (constant -> array .)
    COMMA           reduce using rule 24 (constant -> array .)
    RGTPAREN        reduce using rule 24 (constant -> array .)


state 73

    (25) constant -> cteN .

    MULTIPLICATION  reduce using rule 25 (constant -> cteN .)
    DIVISION        reduce using rule 25 (constant -> cteN .)
    PLUS            reduce using rule 25 (constant -> cteN .)
    MINUS           reduce using rule 25 (constant -> cteN .)
    RGTBRACSQR      reduce using rule 25 (constant -> cteN .)
    AND             reduce using rule 25 (constant -> cteN .)
    DOUBEQUAL       reduce using rule 25 (constant -> cteN .)
    NOT             reduce using rule 25 (constant -> cteN .)
    OR              reduce using rule 25 (constant -> cteN .)
    LESSTHANEQUAL   reduce using rule 25 (constant -> cteN .)
    GREATTHANEQUAL  reduce using rule 25 (constant -> cteN .)
    GREATTHAN       reduce using rule 25 (constant -> cteN .)
    LESSTHAN        reduce using rule 25 (constant -> cteN .)
    SEMICOLON       reduce using rule 25 (constant -> cteN .)
    COMMA           reduce using rule 25 (constant -> cteN .)
    RGTPAREN        reduce using rule 25 (constant -> cteN .)


state 74

    (38) factoraux -> MINUS . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    constant                       shift and go to state 105
    call2                          shift and go to state 75
    array                          shift and go to state 72
    cteN                           shift and go to state 73

state 75

    (29) constant -> call2 .

    MULTIPLICATION  reduce using rule 29 (constant -> call2 .)
    DIVISION        reduce using rule 29 (constant -> call2 .)
    PLUS            reduce using rule 29 (constant -> call2 .)
    MINUS           reduce using rule 29 (constant -> call2 .)
    RGTBRACSQR      reduce using rule 29 (constant -> call2 .)
    AND             reduce using rule 29 (constant -> call2 .)
    DOUBEQUAL       reduce using rule 29 (constant -> call2 .)
    NOT             reduce using rule 29 (constant -> call2 .)
    OR              reduce using rule 29 (constant -> call2 .)
    LESSTHANEQUAL   reduce using rule 29 (constant -> call2 .)
    GREATTHANEQUAL  reduce using rule 29 (constant -> call2 .)
    GREATTHAN       reduce using rule 29 (constant -> call2 .)
    LESSTHAN        reduce using rule 29 (constant -> call2 .)
    SEMICOLON       reduce using rule 29 (constant -> call2 .)
    COMMA           reduce using rule 29 (constant -> call2 .)
    RGTPAREN        reduce using rule 29 (constant -> call2 .)


state 76

    (27) constant -> TRUE .

    MULTIPLICATION  reduce using rule 27 (constant -> TRUE .)
    DIVISION        reduce using rule 27 (constant -> TRUE .)
    PLUS            reduce using rule 27 (constant -> TRUE .)
    MINUS           reduce using rule 27 (constant -> TRUE .)
    RGTBRACSQR      reduce using rule 27 (constant -> TRUE .)
    AND             reduce using rule 27 (constant -> TRUE .)
    DOUBEQUAL       reduce using rule 27 (constant -> TRUE .)
    NOT             reduce using rule 27 (constant -> TRUE .)
    OR              reduce using rule 27 (constant -> TRUE .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> TRUE .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> TRUE .)
    GREATTHAN       reduce using rule 27 (constant -> TRUE .)
    LESSTHAN        reduce using rule 27 (constant -> TRUE .)
    SEMICOLON       reduce using rule 27 (constant -> TRUE .)
    COMMA           reduce using rule 27 (constant -> TRUE .)
    RGTPAREN        reduce using rule 27 (constant -> TRUE .)


state 77

    (56) term -> factor . MULTIPLICATION codeAddOperator term
    (57) term -> factor . DIVISION codeAddOperator term
    (58) term -> factor . codeAskTerm
    (102) codeAskTerm -> . empty
    (86) empty -> .

    MULTIPLICATION  shift and go to state 108
    DIVISION        shift and go to state 106
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAskTerm                    shift and go to state 107
    empty                          shift and go to state 109

state 78

    (37) factoraux -> PLUS . constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    constant                       shift and go to state 110
    call2                          shift and go to state 75
    array                          shift and go to state 72
    cteN                           shift and go to state 73

state 79

    (32) cteS -> STRING .

    COMMA           reduce using rule 32 (cteS -> STRING .)
    RGTBRACSQR      reduce using rule 32 (cteS -> STRING .)
    MULTIPLICATION  reduce using rule 32 (cteS -> STRING .)
    DIVISION        reduce using rule 32 (cteS -> STRING .)
    PLUS            reduce using rule 32 (cteS -> STRING .)
    MINUS           reduce using rule 32 (cteS -> STRING .)
    RGTPAREN        reduce using rule 32 (cteS -> STRING .)
    AND             reduce using rule 32 (cteS -> STRING .)
    DOUBEQUAL       reduce using rule 32 (cteS -> STRING .)
    NOT             reduce using rule 32 (cteS -> STRING .)
    OR              reduce using rule 32 (cteS -> STRING .)
    LESSTHANEQUAL   reduce using rule 32 (cteS -> STRING .)
    GREATTHANEQUAL  reduce using rule 32 (cteS -> STRING .)
    GREATTHAN       reduce using rule 32 (cteS -> STRING .)
    LESSTHAN        reduce using rule 32 (cteS -> STRING .)
    SEMICOLON       reduce using rule 32 (cteS -> STRING .)


state 80

    (26) constant -> cteS .

    MULTIPLICATION  reduce using rule 26 (constant -> cteS .)
    DIVISION        reduce using rule 26 (constant -> cteS .)
    PLUS            reduce using rule 26 (constant -> cteS .)
    MINUS           reduce using rule 26 (constant -> cteS .)
    RGTBRACSQR      reduce using rule 26 (constant -> cteS .)
    AND             reduce using rule 26 (constant -> cteS .)
    DOUBEQUAL       reduce using rule 26 (constant -> cteS .)
    NOT             reduce using rule 26 (constant -> cteS .)
    OR              reduce using rule 26 (constant -> cteS .)
    LESSTHANEQUAL   reduce using rule 26 (constant -> cteS .)
    GREATTHANEQUAL  reduce using rule 26 (constant -> cteS .)
    GREATTHAN       reduce using rule 26 (constant -> cteS .)
    LESSTHAN        reduce using rule 26 (constant -> cteS .)
    SEMICOLON       reduce using rule 26 (constant -> cteS .)
    COMMA           reduce using rule 26 (constant -> cteS .)
    RGTPAREN        reduce using rule 26 (constant -> cteS .)


state 81

    (39) factor -> LFTPAREN . codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (99) codeAddOpenParen -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOpenParen               shift and go to state 111
    empty                          shift and go to state 112

state 82

    (23) constant -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR
    (82) call2 -> ID . LFTPAREN exp callaux RGTPAREN

    MULTIPLICATION  reduce using rule 23 (constant -> ID .)
    DIVISION        reduce using rule 23 (constant -> ID .)
    PLUS            reduce using rule 23 (constant -> ID .)
    MINUS           reduce using rule 23 (constant -> ID .)
    RGTBRACSQR      reduce using rule 23 (constant -> ID .)
    AND             reduce using rule 23 (constant -> ID .)
    DOUBEQUAL       reduce using rule 23 (constant -> ID .)
    NOT             reduce using rule 23 (constant -> ID .)
    OR              reduce using rule 23 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 23 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 23 (constant -> ID .)
    GREATTHAN       reduce using rule 23 (constant -> ID .)
    LESSTHAN        reduce using rule 23 (constant -> ID .)
    SEMICOLON       reduce using rule 23 (constant -> ID .)
    COMMA           reduce using rule 23 (constant -> ID .)
    RGTPAREN        reduce using rule 23 (constant -> ID .)
    LFTBRACSQR      shift and go to state 65
    LFTPAREN        shift and go to state 113


state 83

    (33) exp -> term .
    (34) exp -> term . PLUS codeAddOperator exp
    (35) exp -> term . MINUS codeAddOperator exp

    SEMICOLON       reduce using rule 33 (exp -> term .)
    COMMA           reduce using rule 33 (exp -> term .)
    RGTPAREN        reduce using rule 33 (exp -> term .)
    AND             reduce using rule 33 (exp -> term .)
    DOUBEQUAL       reduce using rule 33 (exp -> term .)
    NOT             reduce using rule 33 (exp -> term .)
    OR              reduce using rule 33 (exp -> term .)
    LESSTHANEQUAL   reduce using rule 33 (exp -> term .)
    GREATTHANEQUAL  reduce using rule 33 (exp -> term .)
    GREATTHAN       reduce using rule 33 (exp -> term .)
    LESSTHAN        reduce using rule 33 (exp -> term .)
    RGTBRACSQR      reduce using rule 33 (exp -> term .)
    PLUS            shift and go to state 114
    MINUS           shift and go to state 115


state 84

    (28) constant -> FALSE .

    MULTIPLICATION  reduce using rule 28 (constant -> FALSE .)
    DIVISION        reduce using rule 28 (constant -> FALSE .)
    PLUS            reduce using rule 28 (constant -> FALSE .)
    MINUS           reduce using rule 28 (constant -> FALSE .)
    RGTBRACSQR      reduce using rule 28 (constant -> FALSE .)
    AND             reduce using rule 28 (constant -> FALSE .)
    DOUBEQUAL       reduce using rule 28 (constant -> FALSE .)
    NOT             reduce using rule 28 (constant -> FALSE .)
    OR              reduce using rule 28 (constant -> FALSE .)
    LESSTHANEQUAL   reduce using rule 28 (constant -> FALSE .)
    GREATTHANEQUAL  reduce using rule 28 (constant -> FALSE .)
    GREATTHAN       reduce using rule 28 (constant -> FALSE .)
    LESSTHAN        reduce using rule 28 (constant -> FALSE .)
    SEMICOLON       reduce using rule 28 (constant -> FALSE .)
    COMMA           reduce using rule 28 (constant -> FALSE .)
    RGTPAREN        reduce using rule 28 (constant -> FALSE .)


state 85

    (31) cteN -> INT . codeAddConst
    (100) codeAddConst -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConst                   shift and go to state 116
    empty                          shift and go to state 117

state 86

    (30) cteN -> FLOAT . codeAddConst
    (100) codeAddConst -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAddConst                   shift and go to state 118
    empty                          shift and go to state 117

state 87

    (41) expression -> exp .
    (42) expression -> exp . expressionaux codeAddOperator exp codeAskExpression
    (43) expressionaux -> . AND
    (44) expressionaux -> . DOUBEQUAL
    (45) expressionaux -> . NOT
    (46) expressionaux -> . OR
    (47) expressionaux -> . LESSTHANEQUAL
    (48) expressionaux -> . GREATTHANEQUAL
    (49) expressionaux -> . GREATTHAN
    (50) expressionaux -> . LESSTHAN

    RGTPAREN        reduce using rule 41 (expression -> exp .)
    SEMICOLON       reduce using rule 41 (expression -> exp .)
    COMMA           reduce using rule 41 (expression -> exp .)
    AND             shift and go to state 119
    DOUBEQUAL       shift and go to state 126
    NOT             shift and go to state 125
    OR              shift and go to state 127
    LESSTHANEQUAL   shift and go to state 123
    GREATTHANEQUAL  shift and go to state 121
    GREATTHAN       shift and go to state 122
    LESSTHAN        shift and go to state 124

    expressionaux                  shift and go to state 120

state 88

    (75) varsaux -> ID codeAddVar EQUAL expression . SEMICOLON
    (76) varsaux -> ID codeAddVar EQUAL expression . COMMA varsaux

    SEMICOLON       shift and go to state 128
    COMMA           shift and go to state 129


state 89

    (53) parameter -> type . codeCheckType ID codeAddParameters
    (54) parameter -> type . codeCheckType ID codeAddParameters COMMA parameter
    (91) codeCheckType -> .

    ID              reduce using rule 91 (codeCheckType -> .)

    codeCheckType                  shift and go to state 130

state 90

    (71) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter . RGTPAREN blockreturn codeScope

    RGTPAREN        shift and go to state 131


state 91

    (55) parameter -> empty .

    RGTPAREN        reduce using rule 55 (parameter -> empty .)


state 92

    (83) read -> READ LFTPAREN readaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 132


state 93

    (85) readaux -> array .

    RGTPAREN        reduce using rule 85 (readaux -> array .)


state 94

    (84) readaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    RGTPAREN        reduce using rule 84 (readaux -> ID .)
    LFTBRACSQR      shift and go to state 65


state 95

    (51) loop -> WHILE codeWhileCondition LFTPAREN . expression RGTPAREN codeGOTOF block codeGOTO
    (41) expression -> . exp
    (42) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    constant                       shift and go to state 70
    factoraux                      shift and go to state 71
    array                          shift and go to state 72
    cteN                           shift and go to state 73
    call2                          shift and go to state 75
    factor                         shift and go to state 77
    term                           shift and go to state 83
    exp                            shift and go to state 87
    expression                     shift and go to state 133

state 96

    (52) write -> PRINT LFTPAREN constant . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 134


state 97

    (9) assignment -> assignmentaux EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 135


state 98

    (79) call -> ID LFTPAREN exp . callaux RGTPAREN SEMICOLON
    (80) callaux -> . COMMA exp callaux
    (81) callaux -> . empty
    (86) empty -> .

    COMMA           shift and go to state 137
    RGTPAREN        reduce using rule 86 (empty -> .)

    empty                          shift and go to state 138
    callaux                        shift and go to state 136

state 99

    (5) array -> ID LFTBRACSQR exp . RGTBRACSQR

    RGTBRACSQR      shift and go to state 139


state 100

    (20) conditionaux -> LFTPAREN expression . RGTPAREN block conditionaux2

    RGTPAREN        shift and go to state 140


state 101

    (19) condition -> IF conditionaux ELSE . block
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 31

    block                          shift and go to state 141

state 102

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvals SEMICOLON
    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvals COMMA varsaux

    EQUAL           shift and go to state 142


state 103

    (40) factor -> factoraux codeAskFactor .

    MULTIPLICATION  reduce using rule 40 (factor -> factoraux codeAskFactor .)
    DIVISION        reduce using rule 40 (factor -> factoraux codeAskFactor .)
    PLUS            reduce using rule 40 (factor -> factoraux codeAskFactor .)
    MINUS           reduce using rule 40 (factor -> factoraux codeAskFactor .)
    COMMA           reduce using rule 40 (factor -> factoraux codeAskFactor .)
    RGTPAREN        reduce using rule 40 (factor -> factoraux codeAskFactor .)
    AND             reduce using rule 40 (factor -> factoraux codeAskFactor .)
    DOUBEQUAL       reduce using rule 40 (factor -> factoraux codeAskFactor .)
    NOT             reduce using rule 40 (factor -> factoraux codeAskFactor .)
    OR              reduce using rule 40 (factor -> factoraux codeAskFactor .)
    LESSTHANEQUAL   reduce using rule 40 (factor -> factoraux codeAskFactor .)
    GREATTHANEQUAL  reduce using rule 40 (factor -> factoraux codeAskFactor .)
    GREATTHAN       reduce using rule 40 (factor -> factoraux codeAskFactor .)
    LESSTHAN        reduce using rule 40 (factor -> factoraux codeAskFactor .)
    SEMICOLON       reduce using rule 40 (factor -> factoraux codeAskFactor .)
    RGTBRACSQR      reduce using rule 40 (factor -> factoraux codeAskFactor .)


state 104

    (103) codeAskFactor -> empty .

    MULTIPLICATION  reduce using rule 103 (codeAskFactor -> empty .)
    DIVISION        reduce using rule 103 (codeAskFactor -> empty .)
    PLUS            reduce using rule 103 (codeAskFactor -> empty .)
    MINUS           reduce using rule 103 (codeAskFactor -> empty .)
    AND             reduce using rule 103 (codeAskFactor -> empty .)
    DOUBEQUAL       reduce using rule 103 (codeAskFactor -> empty .)
    NOT             reduce using rule 103 (codeAskFactor -> empty .)
    OR              reduce using rule 103 (codeAskFactor -> empty .)
    LESSTHANEQUAL   reduce using rule 103 (codeAskFactor -> empty .)
    GREATTHANEQUAL  reduce using rule 103 (codeAskFactor -> empty .)
    GREATTHAN       reduce using rule 103 (codeAskFactor -> empty .)
    LESSTHAN        reduce using rule 103 (codeAskFactor -> empty .)
    SEMICOLON       reduce using rule 103 (codeAskFactor -> empty .)
    COMMA           reduce using rule 103 (codeAskFactor -> empty .)
    RGTPAREN        reduce using rule 103 (codeAskFactor -> empty .)
    RGTBRACSQR      reduce using rule 103 (codeAskFactor -> empty .)


state 105

    (38) factoraux -> MINUS constant .

    MULTIPLICATION  reduce using rule 38 (factoraux -> MINUS constant .)
    DIVISION        reduce using rule 38 (factoraux -> MINUS constant .)
    PLUS            reduce using rule 38 (factoraux -> MINUS constant .)
    MINUS           reduce using rule 38 (factoraux -> MINUS constant .)
    AND             reduce using rule 38 (factoraux -> MINUS constant .)
    DOUBEQUAL       reduce using rule 38 (factoraux -> MINUS constant .)
    NOT             reduce using rule 38 (factoraux -> MINUS constant .)
    OR              reduce using rule 38 (factoraux -> MINUS constant .)
    LESSTHANEQUAL   reduce using rule 38 (factoraux -> MINUS constant .)
    GREATTHANEQUAL  reduce using rule 38 (factoraux -> MINUS constant .)
    GREATTHAN       reduce using rule 38 (factoraux -> MINUS constant .)
    LESSTHAN        reduce using rule 38 (factoraux -> MINUS constant .)
    RGTPAREN        reduce using rule 38 (factoraux -> MINUS constant .)
    SEMICOLON       reduce using rule 38 (factoraux -> MINUS constant .)
    COMMA           reduce using rule 38 (factoraux -> MINUS constant .)
    RGTBRACSQR      reduce using rule 38 (factoraux -> MINUS constant .)


state 106

    (57) term -> factor DIVISION . codeAddOperator term
    (101) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 143
    empty                          shift and go to state 144

state 107

    (58) term -> factor codeAskTerm .

    PLUS            reduce using rule 58 (term -> factor codeAskTerm .)
    MINUS           reduce using rule 58 (term -> factor codeAskTerm .)
    AND             reduce using rule 58 (term -> factor codeAskTerm .)
    DOUBEQUAL       reduce using rule 58 (term -> factor codeAskTerm .)
    NOT             reduce using rule 58 (term -> factor codeAskTerm .)
    OR              reduce using rule 58 (term -> factor codeAskTerm .)
    LESSTHANEQUAL   reduce using rule 58 (term -> factor codeAskTerm .)
    GREATTHANEQUAL  reduce using rule 58 (term -> factor codeAskTerm .)
    GREATTHAN       reduce using rule 58 (term -> factor codeAskTerm .)
    LESSTHAN        reduce using rule 58 (term -> factor codeAskTerm .)
    RGTPAREN        reduce using rule 58 (term -> factor codeAskTerm .)
    SEMICOLON       reduce using rule 58 (term -> factor codeAskTerm .)
    COMMA           reduce using rule 58 (term -> factor codeAskTerm .)
    RGTBRACSQR      reduce using rule 58 (term -> factor codeAskTerm .)


state 108

    (56) term -> factor MULTIPLICATION . codeAddOperator term
    (101) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 145
    empty                          shift and go to state 144

state 109

    (102) codeAskTerm -> empty .

    PLUS            reduce using rule 102 (codeAskTerm -> empty .)
    MINUS           reduce using rule 102 (codeAskTerm -> empty .)
    AND             reduce using rule 102 (codeAskTerm -> empty .)
    DOUBEQUAL       reduce using rule 102 (codeAskTerm -> empty .)
    NOT             reduce using rule 102 (codeAskTerm -> empty .)
    OR              reduce using rule 102 (codeAskTerm -> empty .)
    LESSTHANEQUAL   reduce using rule 102 (codeAskTerm -> empty .)
    GREATTHANEQUAL  reduce using rule 102 (codeAskTerm -> empty .)
    GREATTHAN       reduce using rule 102 (codeAskTerm -> empty .)
    LESSTHAN        reduce using rule 102 (codeAskTerm -> empty .)
    SEMICOLON       reduce using rule 102 (codeAskTerm -> empty .)
    COMMA           reduce using rule 102 (codeAskTerm -> empty .)
    RGTPAREN        reduce using rule 102 (codeAskTerm -> empty .)
    RGTBRACSQR      reduce using rule 102 (codeAskTerm -> empty .)


state 110

    (37) factoraux -> PLUS constant .

    MULTIPLICATION  reduce using rule 37 (factoraux -> PLUS constant .)
    DIVISION        reduce using rule 37 (factoraux -> PLUS constant .)
    PLUS            reduce using rule 37 (factoraux -> PLUS constant .)
    MINUS           reduce using rule 37 (factoraux -> PLUS constant .)
    AND             reduce using rule 37 (factoraux -> PLUS constant .)
    DOUBEQUAL       reduce using rule 37 (factoraux -> PLUS constant .)
    NOT             reduce using rule 37 (factoraux -> PLUS constant .)
    OR              reduce using rule 37 (factoraux -> PLUS constant .)
    LESSTHANEQUAL   reduce using rule 37 (factoraux -> PLUS constant .)
    GREATTHANEQUAL  reduce using rule 37 (factoraux -> PLUS constant .)
    GREATTHAN       reduce using rule 37 (factoraux -> PLUS constant .)
    LESSTHAN        reduce using rule 37 (factoraux -> PLUS constant .)
    RGTPAREN        reduce using rule 37 (factoraux -> PLUS constant .)
    SEMICOLON       reduce using rule 37 (factoraux -> PLUS constant .)
    COMMA           reduce using rule 37 (factoraux -> PLUS constant .)
    RGTBRACSQR      reduce using rule 37 (factoraux -> PLUS constant .)


state 111

    (39) factor -> LFTPAREN codeAddOpenParen . expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) expression -> . exp
    (42) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    term                           shift and go to state 83
    constant                       shift and go to state 70
    cteS                           shift and go to state 80
    cteN                           shift and go to state 73
    call2                          shift and go to state 75
    exp                            shift and go to state 87
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    expression                     shift and go to state 146
    array                          shift and go to state 72

state 112

    (99) codeAddOpenParen -> empty .

    LFTPAREN        reduce using rule 99 (codeAddOpenParen -> empty .)
    PLUS            reduce using rule 99 (codeAddOpenParen -> empty .)
    MINUS           reduce using rule 99 (codeAddOpenParen -> empty .)
    ID              reduce using rule 99 (codeAddOpenParen -> empty .)
    TRUE            reduce using rule 99 (codeAddOpenParen -> empty .)
    FALSE           reduce using rule 99 (codeAddOpenParen -> empty .)
    FLOAT           reduce using rule 99 (codeAddOpenParen -> empty .)
    INT             reduce using rule 99 (codeAddOpenParen -> empty .)
    STRING          reduce using rule 99 (codeAddOpenParen -> empty .)


state 113

    (82) call2 -> ID LFTPAREN . exp callaux RGTPAREN
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 147
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 114

    (34) exp -> term PLUS . codeAddOperator exp
    (101) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 148
    empty                          shift and go to state 144

state 115

    (35) exp -> term MINUS . codeAddOperator exp
    (101) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 149
    empty                          shift and go to state 144

state 116

    (31) cteN -> INT codeAddConst .

    MULTIPLICATION  reduce using rule 31 (cteN -> INT codeAddConst .)
    DIVISION        reduce using rule 31 (cteN -> INT codeAddConst .)
    PLUS            reduce using rule 31 (cteN -> INT codeAddConst .)
    MINUS           reduce using rule 31 (cteN -> INT codeAddConst .)
    AND             reduce using rule 31 (cteN -> INT codeAddConst .)
    DOUBEQUAL       reduce using rule 31 (cteN -> INT codeAddConst .)
    NOT             reduce using rule 31 (cteN -> INT codeAddConst .)
    OR              reduce using rule 31 (cteN -> INT codeAddConst .)
    LESSTHANEQUAL   reduce using rule 31 (cteN -> INT codeAddConst .)
    GREATTHANEQUAL  reduce using rule 31 (cteN -> INT codeAddConst .)
    GREATTHAN       reduce using rule 31 (cteN -> INT codeAddConst .)
    LESSTHAN        reduce using rule 31 (cteN -> INT codeAddConst .)
    SEMICOLON       reduce using rule 31 (cteN -> INT codeAddConst .)
    COMMA           reduce using rule 31 (cteN -> INT codeAddConst .)
    RGTPAREN        reduce using rule 31 (cteN -> INT codeAddConst .)
    RGTBRACSQR      reduce using rule 31 (cteN -> INT codeAddConst .)


state 117

    (100) codeAddConst -> empty .

    MULTIPLICATION  reduce using rule 100 (codeAddConst -> empty .)
    DIVISION        reduce using rule 100 (codeAddConst -> empty .)
    PLUS            reduce using rule 100 (codeAddConst -> empty .)
    MINUS           reduce using rule 100 (codeAddConst -> empty .)
    AND             reduce using rule 100 (codeAddConst -> empty .)
    DOUBEQUAL       reduce using rule 100 (codeAddConst -> empty .)
    NOT             reduce using rule 100 (codeAddConst -> empty .)
    OR              reduce using rule 100 (codeAddConst -> empty .)
    LESSTHANEQUAL   reduce using rule 100 (codeAddConst -> empty .)
    GREATTHANEQUAL  reduce using rule 100 (codeAddConst -> empty .)
    GREATTHAN       reduce using rule 100 (codeAddConst -> empty .)
    LESSTHAN        reduce using rule 100 (codeAddConst -> empty .)
    SEMICOLON       reduce using rule 100 (codeAddConst -> empty .)
    COMMA           reduce using rule 100 (codeAddConst -> empty .)
    RGTPAREN        reduce using rule 100 (codeAddConst -> empty .)
    RGTBRACSQR      reduce using rule 100 (codeAddConst -> empty .)


state 118

    (30) cteN -> FLOAT codeAddConst .

    MULTIPLICATION  reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    DIVISION        reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    PLUS            reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    MINUS           reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    AND             reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    DOUBEQUAL       reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    NOT             reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    OR              reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    LESSTHANEQUAL   reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    GREATTHANEQUAL  reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    GREATTHAN       reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    LESSTHAN        reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    SEMICOLON       reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    COMMA           reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    RGTPAREN        reduce using rule 30 (cteN -> FLOAT codeAddConst .)
    RGTBRACSQR      reduce using rule 30 (cteN -> FLOAT codeAddConst .)


state 119

    (43) expressionaux -> AND .

    LFTPAREN        reduce using rule 43 (expressionaux -> AND .)
    PLUS            reduce using rule 43 (expressionaux -> AND .)
    MINUS           reduce using rule 43 (expressionaux -> AND .)
    ID              reduce using rule 43 (expressionaux -> AND .)
    TRUE            reduce using rule 43 (expressionaux -> AND .)
    FALSE           reduce using rule 43 (expressionaux -> AND .)
    FLOAT           reduce using rule 43 (expressionaux -> AND .)
    INT             reduce using rule 43 (expressionaux -> AND .)
    STRING          reduce using rule 43 (expressionaux -> AND .)


state 120

    (42) expression -> exp expressionaux . codeAddOperator exp codeAskExpression
    (101) codeAddOperator -> . empty
    (86) empty -> .

    LFTPAREN        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    TRUE            reduce using rule 86 (empty -> .)
    FALSE           reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)

    codeAddOperator                shift and go to state 150
    empty                          shift and go to state 144

state 121

    (48) expressionaux -> GREATTHANEQUAL .

    LFTPAREN        reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    PLUS            reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    MINUS           reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    ID              reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    TRUE            reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    FALSE           reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    FLOAT           reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    INT             reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)
    STRING          reduce using rule 48 (expressionaux -> GREATTHANEQUAL .)


state 122

    (49) expressionaux -> GREATTHAN .

    LFTPAREN        reduce using rule 49 (expressionaux -> GREATTHAN .)
    PLUS            reduce using rule 49 (expressionaux -> GREATTHAN .)
    MINUS           reduce using rule 49 (expressionaux -> GREATTHAN .)
    ID              reduce using rule 49 (expressionaux -> GREATTHAN .)
    TRUE            reduce using rule 49 (expressionaux -> GREATTHAN .)
    FALSE           reduce using rule 49 (expressionaux -> GREATTHAN .)
    FLOAT           reduce using rule 49 (expressionaux -> GREATTHAN .)
    INT             reduce using rule 49 (expressionaux -> GREATTHAN .)
    STRING          reduce using rule 49 (expressionaux -> GREATTHAN .)


state 123

    (47) expressionaux -> LESSTHANEQUAL .

    LFTPAREN        reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    PLUS            reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    MINUS           reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    ID              reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    TRUE            reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    FALSE           reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    FLOAT           reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    INT             reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)
    STRING          reduce using rule 47 (expressionaux -> LESSTHANEQUAL .)


state 124

    (50) expressionaux -> LESSTHAN .

    LFTPAREN        reduce using rule 50 (expressionaux -> LESSTHAN .)
    PLUS            reduce using rule 50 (expressionaux -> LESSTHAN .)
    MINUS           reduce using rule 50 (expressionaux -> LESSTHAN .)
    ID              reduce using rule 50 (expressionaux -> LESSTHAN .)
    TRUE            reduce using rule 50 (expressionaux -> LESSTHAN .)
    FALSE           reduce using rule 50 (expressionaux -> LESSTHAN .)
    FLOAT           reduce using rule 50 (expressionaux -> LESSTHAN .)
    INT             reduce using rule 50 (expressionaux -> LESSTHAN .)
    STRING          reduce using rule 50 (expressionaux -> LESSTHAN .)


state 125

    (45) expressionaux -> NOT .

    LFTPAREN        reduce using rule 45 (expressionaux -> NOT .)
    PLUS            reduce using rule 45 (expressionaux -> NOT .)
    MINUS           reduce using rule 45 (expressionaux -> NOT .)
    ID              reduce using rule 45 (expressionaux -> NOT .)
    TRUE            reduce using rule 45 (expressionaux -> NOT .)
    FALSE           reduce using rule 45 (expressionaux -> NOT .)
    FLOAT           reduce using rule 45 (expressionaux -> NOT .)
    INT             reduce using rule 45 (expressionaux -> NOT .)
    STRING          reduce using rule 45 (expressionaux -> NOT .)


state 126

    (44) expressionaux -> DOUBEQUAL .

    LFTPAREN        reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    PLUS            reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    MINUS           reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    ID              reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    TRUE            reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    FALSE           reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    FLOAT           reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    INT             reduce using rule 44 (expressionaux -> DOUBEQUAL .)
    STRING          reduce using rule 44 (expressionaux -> DOUBEQUAL .)


state 127

    (46) expressionaux -> OR .

    LFTPAREN        reduce using rule 46 (expressionaux -> OR .)
    PLUS            reduce using rule 46 (expressionaux -> OR .)
    MINUS           reduce using rule 46 (expressionaux -> OR .)
    ID              reduce using rule 46 (expressionaux -> OR .)
    TRUE            reduce using rule 46 (expressionaux -> OR .)
    FALSE           reduce using rule 46 (expressionaux -> OR .)
    FLOAT           reduce using rule 46 (expressionaux -> OR .)
    INT             reduce using rule 46 (expressionaux -> OR .)
    STRING          reduce using rule 46 (expressionaux -> OR .)


state 128

    (75) varsaux -> ID codeAddVar EQUAL expression SEMICOLON .

    FUNCTION        reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    INT             reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    STRING          reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    PRIOMH          reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    IF              reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    READ            reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    ID              reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 75 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)


state 129

    (76) varsaux -> ID codeAddVar EQUAL expression COMMA . varsaux
    (75) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (76) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (77) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    ID              shift and go to state 26

    varsaux                        shift and go to state 151

state 130

    (53) parameter -> type codeCheckType . ID codeAddParameters
    (54) parameter -> type codeCheckType . ID codeAddParameters COMMA parameter

    ID              shift and go to state 152


state 131

    (71) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN . blockreturn codeScope
    (12) blockreturn -> . LFTBRAC blockneutral RGTBRAC
    (13) blockreturn -> . LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC

    LFTBRAC         shift and go to state 153

    blockreturn                    shift and go to state 154

state 132

    (83) read -> READ LFTPAREN readaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 155


state 133

    (51) loop -> WHILE codeWhileCondition LFTPAREN expression . RGTPAREN codeGOTOF block codeGOTO

    RGTPAREN        shift and go to state 156


state 134

    (52) write -> PRINT LFTPAREN constant RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 157


state 135

    (9) assignment -> assignmentaux EQUAL expression SEMICOLON .

    IF              reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    READ            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    ID              reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    INT             reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    STRING          reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)


state 136

    (79) call -> ID LFTPAREN exp callaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 158


state 137

    (80) callaux -> COMMA . exp callaux
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 159
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 138

    (81) callaux -> empty .

    RGTPAREN        reduce using rule 81 (callaux -> empty .)


state 139

    (5) array -> ID LFTBRACSQR exp RGTBRACSQR .

    COMMA           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTBRACSQR      reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MULTIPLICATION  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DIVISION        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    PLUS            reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MINUS           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    AND             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DOUBEQUAL       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    NOT             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    OR              reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHANEQUAL   reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHANEQUAL  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHAN       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHAN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    SEMICOLON       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTPAREN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    EQUAL           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)


state 140

    (20) conditionaux -> LFTPAREN expression RGTPAREN . block conditionaux2
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 31

    block                          shift and go to state 160

state 141

    (19) condition -> IF conditionaux ELSE block .

    IF              reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    WHILE           reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    PRINT           reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    READ            reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    ID              reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    INT             reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    FLOAT           reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    CHAR            reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    BOOL            reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    STRING          reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    RGTBRAC         reduce using rule 19 (condition -> IF conditionaux ELSE block .)
    RETURN          reduce using rule 19 (condition -> IF conditionaux ELSE block .)


state 142

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvals SEMICOLON
    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvals COMMA varsaux
    (6) arrayvals -> . LFTBRACSQR arrayvalsaux RGTBRACSQR

    LFTBRACSQR      shift and go to state 161

    arrayvals                      shift and go to state 162

state 143

    (57) term -> factor DIVISION codeAddOperator . term
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 163
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 144

    (101) codeAddOperator -> empty .

    LFTPAREN        reduce using rule 101 (codeAddOperator -> empty .)
    PLUS            reduce using rule 101 (codeAddOperator -> empty .)
    MINUS           reduce using rule 101 (codeAddOperator -> empty .)
    ID              reduce using rule 101 (codeAddOperator -> empty .)
    TRUE            reduce using rule 101 (codeAddOperator -> empty .)
    FALSE           reduce using rule 101 (codeAddOperator -> empty .)
    FLOAT           reduce using rule 101 (codeAddOperator -> empty .)
    INT             reduce using rule 101 (codeAddOperator -> empty .)
    STRING          reduce using rule 101 (codeAddOperator -> empty .)


state 145

    (56) term -> factor MULTIPLICATION codeAddOperator . term
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 164
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 146

    (39) factor -> LFTPAREN codeAddOpenParen expression . RGTPAREN codeDeleteOpenParen codeAskFactor

    RGTPAREN        shift and go to state 165


state 147

    (82) call2 -> ID LFTPAREN exp . callaux RGTPAREN
    (80) callaux -> . COMMA exp callaux
    (81) callaux -> . empty
    (86) empty -> .

    COMMA           shift and go to state 137
    RGTPAREN        reduce using rule 86 (empty -> .)

    empty                          shift and go to state 138
    callaux                        shift and go to state 166

state 148

    (34) exp -> term PLUS codeAddOperator . exp
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 167
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 149

    (35) exp -> term MINUS codeAddOperator . exp
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 168
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 150

    (42) expression -> exp expressionaux codeAddOperator . exp codeAskExpression
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    term                           shift and go to state 83
    constant                       shift and go to state 70
    cteS                           shift and go to state 80
    cteN                           shift and go to state 73
    call2                          shift and go to state 75
    exp                            shift and go to state 169
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 151

    (76) varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .

    FUNCTION        reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    INT             reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    FLOAT           reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    CHAR            reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    BOOL            reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    STRING          reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    PRIOMH          reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    IF              reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    WHILE           reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    PRINT           reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    READ            reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    ID              reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    RGTBRAC         reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    RETURN          reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)


state 152

    (53) parameter -> type codeCheckType ID . codeAddParameters
    (54) parameter -> type codeCheckType ID . codeAddParameters COMMA parameter
    (94) codeAddParameters -> .

    COMMA           reduce using rule 94 (codeAddParameters -> .)
    RGTPAREN        reduce using rule 94 (codeAddParameters -> .)

    codeAddParameters              shift and go to state 170

state 153

    (12) blockreturn -> LFTBRAC . blockneutral RGTBRAC
    (13) blockreturn -> LFTBRAC . blockneutral RETURN exp SEMICOLON RGTBRAC
    (14) blockneutral -> . statement blockneutral
    (15) blockneutral -> . vars blockneutral
    (16) blockneutral -> . empty
    (59) statement -> . assignment
    (60) statement -> . condition
    (61) statement -> . loop
    (62) statement -> . write
    (63) statement -> . read
    (64) statement -> . call
    (74) vars -> . type codeCheckType varsaux
    (86) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (18) condition -> . IF conditionaux
    (19) condition -> . IF conditionaux ELSE block
    (51) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO
    (52) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (83) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (79) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    IF              shift and go to state 52
    WHILE           shift and go to state 40
    PRINT           shift and go to state 41
    READ            shift and go to state 39
    ID              shift and go to state 50
    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10

    vars                           shift and go to state 38
    array                          shift and go to state 42
    write                          shift and go to state 43
    call                           shift and go to state 45
    statement                      shift and go to state 46
    type                           shift and go to state 12
    empty                          shift and go to state 47
    read                           shift and go to state 44
    assignment                     shift and go to state 48
    assignmentaux                  shift and go to state 49
    condition                      shift and go to state 51
    blockneutral                   shift and go to state 171
    loop                           shift and go to state 54

state 154

    (71) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn . codeScope
    (90) codeScope -> .

    FUNCTION        reduce using rule 90 (codeScope -> .)
    INT             reduce using rule 90 (codeScope -> .)
    FLOAT           reduce using rule 90 (codeScope -> .)
    CHAR            reduce using rule 90 (codeScope -> .)
    BOOL            reduce using rule 90 (codeScope -> .)
    STRING          reduce using rule 90 (codeScope -> .)
    PRIOMH          reduce using rule 90 (codeScope -> .)

    codeScope                      shift and go to state 172

state 155

    (83) read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .

    IF              reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 83 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)


state 156

    (51) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN . codeGOTOF block codeGOTO
    (88) codeGOTOF -> .

    LFTBRAC         reduce using rule 88 (codeGOTOF -> .)

    codeGOTOF                      shift and go to state 173

state 157

    (52) write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .

    IF              reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    READ            reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    ID              reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    INT             reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    STRING          reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 52 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)


state 158

    (79) call -> ID LFTPAREN exp callaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 174


state 159

    (80) callaux -> COMMA exp . callaux
    (80) callaux -> . COMMA exp callaux
    (81) callaux -> . empty
    (86) empty -> .

    COMMA           shift and go to state 137
    RGTPAREN        reduce using rule 86 (empty -> .)

    empty                          shift and go to state 138
    callaux                        shift and go to state 175

state 160

    (20) conditionaux -> LFTPAREN expression RGTPAREN block . conditionaux2
    (21) conditionaux2 -> . ELSEIF conditionaux
    (22) conditionaux2 -> . empty
    (86) empty -> .

    ELSEIF          shift and go to state 178
    ELSE            reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    PRINT           reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    INT             reduce using rule 86 (empty -> .)
    FLOAT           reduce using rule 86 (empty -> .)
    CHAR            reduce using rule 86 (empty -> .)
    BOOL            reduce using rule 86 (empty -> .)
    STRING          reduce using rule 86 (empty -> .)
    RGTBRAC         reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)

    empty                          shift and go to state 177
    conditionaux2                  shift and go to state 176

state 161

    (6) arrayvals -> LFTBRACSQR . arrayvalsaux RGTBRACSQR
    (7) arrayvalsaux -> . constant
    (8) arrayvalsaux -> . constant COMMA arrayvalsaux
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    constant                       shift and go to state 179
    call2                          shift and go to state 75
    array                          shift and go to state 72
    cteN                           shift and go to state 73
    arrayvalsaux                   shift and go to state 180

state 162

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals . SEMICOLON
    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals . COMMA varsaux

    SEMICOLON       shift and go to state 181
    COMMA           shift and go to state 182


state 163

    (57) term -> factor DIVISION codeAddOperator term .

    PLUS            reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    MINUS           reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    AND             reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    DOUBEQUAL       reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    NOT             reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    OR              reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    LESSTHANEQUAL   reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    GREATTHANEQUAL  reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    GREATTHAN       reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    LESSTHAN        reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    RGTPAREN        reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    SEMICOLON       reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    COMMA           reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)
    RGTBRACSQR      reduce using rule 57 (term -> factor DIVISION codeAddOperator term .)


state 164

    (56) term -> factor MULTIPLICATION codeAddOperator term .

    PLUS            reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    MINUS           reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    AND             reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    DOUBEQUAL       reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    NOT             reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    OR              reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    LESSTHANEQUAL   reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    GREATTHANEQUAL  reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    GREATTHAN       reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    LESSTHAN        reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    RGTPAREN        reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    SEMICOLON       reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    COMMA           reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)
    RGTBRACSQR      reduce using rule 56 (term -> factor MULTIPLICATION codeAddOperator term .)


state 165

    (39) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN . codeDeleteOpenParen codeAskFactor
    (98) codeDeleteOpenParen -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeDeleteOpenParen            shift and go to state 183
    empty                          shift and go to state 184

state 166

    (82) call2 -> ID LFTPAREN exp callaux . RGTPAREN

    RGTPAREN        shift and go to state 185


state 167

    (34) exp -> term PLUS codeAddOperator exp .

    SEMICOLON       reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    COMMA           reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    RGTPAREN        reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    AND             reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    DOUBEQUAL       reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    NOT             reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    OR              reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    LESSTHANEQUAL   reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    GREATTHANEQUAL  reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    GREATTHAN       reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    LESSTHAN        reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)
    RGTBRACSQR      reduce using rule 34 (exp -> term PLUS codeAddOperator exp .)


state 168

    (35) exp -> term MINUS codeAddOperator exp .

    SEMICOLON       reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    COMMA           reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    RGTPAREN        reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    AND             reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    DOUBEQUAL       reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    NOT             reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    OR              reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    LESSTHANEQUAL   reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    GREATTHANEQUAL  reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    GREATTHAN       reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    LESSTHAN        reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)
    RGTBRACSQR      reduce using rule 35 (exp -> term MINUS codeAddOperator exp .)


state 169

    (42) expression -> exp expressionaux codeAddOperator exp . codeAskExpression
    (104) codeAskExpression -> . empty
    (86) empty -> .

    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)

    empty                          shift and go to state 186
    codeAskExpression              shift and go to state 187

state 170

    (53) parameter -> type codeCheckType ID codeAddParameters .
    (54) parameter -> type codeCheckType ID codeAddParameters . COMMA parameter

    RGTPAREN        reduce using rule 53 (parameter -> type codeCheckType ID codeAddParameters .)
    COMMA           shift and go to state 188


state 171

    (12) blockreturn -> LFTBRAC blockneutral . RGTBRAC
    (13) blockreturn -> LFTBRAC blockneutral . RETURN exp SEMICOLON RGTBRAC

    RGTBRAC         shift and go to state 190
    RETURN          shift and go to state 189


state 172

    (71) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .

    FUNCTION        reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    INT             reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    FLOAT           reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    CHAR            reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    BOOL            reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    STRING          reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)
    PRIOMH          reduce using rule 71 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN blockreturn codeScope .)


state 173

    (51) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF . block codeGOTO
    (17) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 31

    block                          shift and go to state 191

state 174

    (79) call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .

    IF              reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 79 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)


state 175

    (80) callaux -> COMMA exp callaux .

    RGTPAREN        reduce using rule 80 (callaux -> COMMA exp callaux .)


state 176

    (20) conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .

    ELSE            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    IF              reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    WHILE           reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    PRINT           reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    READ            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    ID              reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    INT             reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    FLOAT           reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    CHAR            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    BOOL            reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    STRING          reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RGTBRAC         reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RETURN          reduce using rule 20 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)


state 177

    (22) conditionaux2 -> empty .

    ELSE            reduce using rule 22 (conditionaux2 -> empty .)
    IF              reduce using rule 22 (conditionaux2 -> empty .)
    WHILE           reduce using rule 22 (conditionaux2 -> empty .)
    PRINT           reduce using rule 22 (conditionaux2 -> empty .)
    READ            reduce using rule 22 (conditionaux2 -> empty .)
    ID              reduce using rule 22 (conditionaux2 -> empty .)
    INT             reduce using rule 22 (conditionaux2 -> empty .)
    FLOAT           reduce using rule 22 (conditionaux2 -> empty .)
    CHAR            reduce using rule 22 (conditionaux2 -> empty .)
    BOOL            reduce using rule 22 (conditionaux2 -> empty .)
    STRING          reduce using rule 22 (conditionaux2 -> empty .)
    RGTBRAC         reduce using rule 22 (conditionaux2 -> empty .)
    RETURN          reduce using rule 22 (conditionaux2 -> empty .)


state 178

    (21) conditionaux2 -> ELSEIF . conditionaux
    (20) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 66

    conditionaux                   shift and go to state 192

state 179

    (7) arrayvalsaux -> constant .
    (8) arrayvalsaux -> constant . COMMA arrayvalsaux

    RGTBRACSQR      reduce using rule 7 (arrayvalsaux -> constant .)
    COMMA           shift and go to state 193


state 180

    (6) arrayvals -> LFTBRACSQR arrayvalsaux . RGTBRACSQR

    RGTBRACSQR      shift and go to state 194


state 181

    (77) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .

    FUNCTION        reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    INT             reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    FLOAT           reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    CHAR            reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    BOOL            reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    STRING          reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    PRIOMH          reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    IF              reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    WHILE           reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    PRINT           reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    READ            reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    ID              reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    RGTBRAC         reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    RETURN          reduce using rule 77 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)


state 182

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA . varsaux
    (75) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (76) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (77) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (78) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    ID              shift and go to state 26

    varsaux                        shift and go to state 195

state 183

    (39) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen . codeAskFactor
    (103) codeAskFactor -> . empty
    (86) empty -> .

    MULTIPLICATION  reduce using rule 86 (empty -> .)
    DIVISION        reduce using rule 86 (empty -> .)
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    DOUBEQUAL       reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    LESSTHANEQUAL   reduce using rule 86 (empty -> .)
    GREATTHANEQUAL  reduce using rule 86 (empty -> .)
    GREATTHAN       reduce using rule 86 (empty -> .)
    LESSTHAN        reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RGTPAREN        reduce using rule 86 (empty -> .)
    RGTBRACSQR      reduce using rule 86 (empty -> .)

    codeAskFactor                  shift and go to state 196
    empty                          shift and go to state 104

state 184

    (98) codeDeleteOpenParen -> empty .

    MULTIPLICATION  reduce using rule 98 (codeDeleteOpenParen -> empty .)
    DIVISION        reduce using rule 98 (codeDeleteOpenParen -> empty .)
    PLUS            reduce using rule 98 (codeDeleteOpenParen -> empty .)
    MINUS           reduce using rule 98 (codeDeleteOpenParen -> empty .)
    AND             reduce using rule 98 (codeDeleteOpenParen -> empty .)
    DOUBEQUAL       reduce using rule 98 (codeDeleteOpenParen -> empty .)
    NOT             reduce using rule 98 (codeDeleteOpenParen -> empty .)
    OR              reduce using rule 98 (codeDeleteOpenParen -> empty .)
    LESSTHANEQUAL   reduce using rule 98 (codeDeleteOpenParen -> empty .)
    GREATTHANEQUAL  reduce using rule 98 (codeDeleteOpenParen -> empty .)
    GREATTHAN       reduce using rule 98 (codeDeleteOpenParen -> empty .)
    LESSTHAN        reduce using rule 98 (codeDeleteOpenParen -> empty .)
    SEMICOLON       reduce using rule 98 (codeDeleteOpenParen -> empty .)
    COMMA           reduce using rule 98 (codeDeleteOpenParen -> empty .)
    RGTPAREN        reduce using rule 98 (codeDeleteOpenParen -> empty .)
    RGTBRACSQR      reduce using rule 98 (codeDeleteOpenParen -> empty .)


state 185

    (82) call2 -> ID LFTPAREN exp callaux RGTPAREN .

    MULTIPLICATION  reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DIVISION        reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    PLUS            reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    MINUS           reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    AND             reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DOUBEQUAL       reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    NOT             reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    OR              reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHAN       reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHAN        reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTPAREN        reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    SEMICOLON       reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    COMMA           reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTBRACSQR      reduce using rule 82 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)


state 186

    (104) codeAskExpression -> empty .

    SEMICOLON       reduce using rule 104 (codeAskExpression -> empty .)
    COMMA           reduce using rule 104 (codeAskExpression -> empty .)
    RGTPAREN        reduce using rule 104 (codeAskExpression -> empty .)


state 187

    (42) expression -> exp expressionaux codeAddOperator exp codeAskExpression .

    RGTPAREN        reduce using rule 42 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)
    SEMICOLON       reduce using rule 42 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)
    COMMA           reduce using rule 42 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)


state 188

    (54) parameter -> type codeCheckType ID codeAddParameters COMMA . parameter
    (53) parameter -> . type codeCheckType ID codeAddParameters
    (54) parameter -> . type codeCheckType ID codeAddParameters COMMA parameter
    (55) parameter -> . empty
    (65) type -> . INT
    (66) type -> . FLOAT
    (67) type -> . CHAR
    (68) type -> . BOOL
    (69) type -> . STRING
    (86) empty -> .

    INT             shift and go to state 11
    FLOAT           shift and go to state 13
    CHAR            shift and go to state 7
    BOOL            shift and go to state 14
    STRING          shift and go to state 10
    RGTPAREN        reduce using rule 86 (empty -> .)

    parameter                      shift and go to state 197
    type                           shift and go to state 89
    empty                          shift and go to state 91

state 189

    (13) blockreturn -> LFTBRAC blockneutral RETURN . exp SEMICOLON RGTBRAC
    (33) exp -> . term
    (34) exp -> . term PLUS codeAddOperator exp
    (35) exp -> . term MINUS codeAddOperator exp
    (56) term -> . factor MULTIPLICATION codeAddOperator term
    (57) term -> . factor DIVISION codeAddOperator term
    (58) term -> . factor codeAskTerm
    (39) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (40) factor -> . factoraux codeAskFactor
    (36) factoraux -> . constant
    (37) factoraux -> . PLUS constant
    (38) factoraux -> . MINUS constant
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 81
    PLUS            shift and go to state 78
    MINUS           shift and go to state 74
    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    term                           shift and go to state 83
    constant                       shift and go to state 70
    call2                          shift and go to state 75
    cteN                           shift and go to state 73
    exp                            shift and go to state 198
    factor                         shift and go to state 77
    factoraux                      shift and go to state 71
    array                          shift and go to state 72

state 190

    (12) blockreturn -> LFTBRAC blockneutral RGTBRAC .

    FUNCTION        reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    INT             reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    FLOAT           reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    CHAR            reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    BOOL            reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    STRING          reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    PRIOMH          reduce using rule 12 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)


state 191

    (51) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block . codeGOTO
    (87) codeGOTO -> .

    IF              reduce using rule 87 (codeGOTO -> .)
    WHILE           reduce using rule 87 (codeGOTO -> .)
    PRINT           reduce using rule 87 (codeGOTO -> .)
    READ            reduce using rule 87 (codeGOTO -> .)
    ID              reduce using rule 87 (codeGOTO -> .)
    INT             reduce using rule 87 (codeGOTO -> .)
    FLOAT           reduce using rule 87 (codeGOTO -> .)
    CHAR            reduce using rule 87 (codeGOTO -> .)
    BOOL            reduce using rule 87 (codeGOTO -> .)
    STRING          reduce using rule 87 (codeGOTO -> .)
    RGTBRAC         reduce using rule 87 (codeGOTO -> .)
    RETURN          reduce using rule 87 (codeGOTO -> .)

    codeGOTO                       shift and go to state 199

state 192

    (21) conditionaux2 -> ELSEIF conditionaux .

    ELSE            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    IF              reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    WHILE           reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    PRINT           reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    READ            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    ID              reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    INT             reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    FLOAT           reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    CHAR            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    BOOL            reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    STRING          reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    RGTBRAC         reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)
    RETURN          reduce using rule 21 (conditionaux2 -> ELSEIF conditionaux .)


state 193

    (8) arrayvalsaux -> constant COMMA . arrayvalsaux
    (7) arrayvalsaux -> . constant
    (8) arrayvalsaux -> . constant COMMA arrayvalsaux
    (23) constant -> . ID
    (24) constant -> . array
    (25) constant -> . cteN
    (26) constant -> . cteS
    (27) constant -> . TRUE
    (28) constant -> . FALSE
    (29) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (30) cteN -> . FLOAT codeAddConst
    (31) cteN -> . INT codeAddConst
    (32) cteS -> . STRING
    (82) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 82
    TRUE            shift and go to state 76
    FALSE           shift and go to state 84
    FLOAT           shift and go to state 86
    INT             shift and go to state 85
    STRING          shift and go to state 79

    cteS                           shift and go to state 80
    constant                       shift and go to state 179
    call2                          shift and go to state 75
    array                          shift and go to state 72
    cteN                           shift and go to state 73
    arrayvalsaux                   shift and go to state 200

state 194

    (6) arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .

    SEMICOLON       reduce using rule 6 (arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .)
    COMMA           reduce using rule 6 (arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .)


state 195

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .

    FUNCTION        reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    INT             reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    FLOAT           reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    CHAR            reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    BOOL            reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    STRING          reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    PRIOMH          reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    IF              reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    WHILE           reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    PRINT           reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    READ            reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    ID              reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    RGTBRAC         reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    RETURN          reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)


state 196

    (39) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .

    MULTIPLICATION  reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    DIVISION        reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    PLUS            reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    MINUS           reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    COMMA           reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    RGTPAREN        reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    AND             reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    DOUBEQUAL       reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    NOT             reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    OR              reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    LESSTHANEQUAL   reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    GREATTHANEQUAL  reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    GREATTHAN       reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    LESSTHAN        reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    SEMICOLON       reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    RGTBRACSQR      reduce using rule 39 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)


state 197

    (54) parameter -> type codeCheckType ID codeAddParameters COMMA parameter .

    RGTPAREN        reduce using rule 54 (parameter -> type codeCheckType ID codeAddParameters COMMA parameter .)


state 198

    (13) blockreturn -> LFTBRAC blockneutral RETURN exp . SEMICOLON RGTBRAC

    SEMICOLON       shift and go to state 201


state 199

    (51) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .

    IF              reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    WHILE           reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    PRINT           reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    READ            reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    ID              reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    INT             reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    FLOAT           reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    CHAR            reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    BOOL            reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    STRING          reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    RGTBRAC         reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)
    RETURN          reduce using rule 51 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTO .)


state 200

    (8) arrayvalsaux -> constant COMMA arrayvalsaux .

    RGTBRACSQR      reduce using rule 8 (arrayvalsaux -> constant COMMA arrayvalsaux .)


state 201

    (13) blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON . RGTBRAC

    RGTBRAC         shift and go to state 202


state 202

    (13) blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .

    FUNCTION        reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    INT             reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    FLOAT           reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    CHAR            reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    BOOL            reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    STRING          reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)
    PRIOMH          reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RETURN exp SEMICOLON RGTBRAC .)

