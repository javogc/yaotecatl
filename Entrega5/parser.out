Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC
Rule 2     auxprogramvars -> vars auxprogramvars
Rule 3     auxprogramvars -> empty
Rule 4     auxprogramfunct -> function auxprogramfunct
Rule 5     auxprogramfunct -> empty
Rule 6     array -> ID LFTBRACSQR exp RGTBRACSQR
Rule 7     arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR
Rule 8     arrayvalsaux -> constant
Rule 9     arrayvalsaux -> constant COMMA arrayvalsaux
Rule 10    assignment -> assignmentaux EQUAL expression SEMICOLON
Rule 11    assignmentaux -> ID
Rule 12    assignmentaux -> array
Rule 13    blockreturn -> LFTBRAC blockneutral RGTBRAC
Rule 14    blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC
Rule 15    blockneutral -> statement blockneutral
Rule 16    blockneutral -> vars blockneutral
Rule 17    blockneutral -> empty
Rule 18    block -> LFTBRAC blockneutral RGTBRAC
Rule 19    condition -> IF conditionaux codeEndIf
Rule 20    condition -> IF conditionaux ELSE codeElse block codeEndIf
Rule 21    conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2
Rule 22    conditionaux2 -> codeNextIf ELSEIF conditionaux
Rule 23    conditionaux2 -> empty
Rule 24    constant -> ID
Rule 25    constant -> array
Rule 26    constant -> cteN
Rule 27    constant -> cteS
Rule 28    constant -> TRUE codeAddConstBool
Rule 29    constant -> FALSE codeAddConstBool
Rule 30    constant -> call2
Rule 31    cteN -> FLOAT codeAddConstNumber
Rule 32    cteN -> INT codeAddConstNumber
Rule 33    cteS -> STRING codeAddConstString
Rule 34    exp -> term
Rule 35    exp -> term PLUS codeAddOperator exp
Rule 36    exp -> term MINUS codeAddOperator exp
Rule 37    factoraux -> constant
Rule 38    factoraux -> PLUS constant
Rule 39    factoraux -> MINUS constant
Rule 40    factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
Rule 41    factor -> factoraux codeAskFactor
Rule 42    expression -> exp
Rule 43    expression -> exp expressionaux codeAddOperator exp codeAskExpression
Rule 44    expressionaux -> AND
Rule 45    expressionaux -> DOUBEQUAL
Rule 46    expressionaux -> NOT
Rule 47    expressionaux -> OR
Rule 48    expressionaux -> LESSTHANEQUAL
Rule 49    expressionaux -> GREATTHANEQUAL
Rule 50    expressionaux -> GREATTHAN
Rule 51    expressionaux -> LESSTHAN
Rule 52    loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
Rule 53    write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON
Rule 54    parameter -> type codeCheckType ID codeAddParameters
Rule 55    parameter -> type codeCheckType ID codeAddParameters COMMA parameter
Rule 56    parameter -> empty
Rule 57    term -> factor MULTIPLICATION codeAddOperator term
Rule 58    term -> factor DIVISION codeAddOperator term
Rule 59    term -> factor codeAskTerm
Rule 60    statement -> assignment
Rule 61    statement -> condition
Rule 62    statement -> loop
Rule 63    statement -> write
Rule 64    statement -> read
Rule 65    statement -> call
Rule 66    type -> INT
Rule 67    type -> FLOAT
Rule 68    type -> CHAR
Rule 69    type -> BOOL
Rule 70    type -> STRING
Rule 71    main -> codeLocationMain PRIOMH codeScope block
Rule 72    function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
Rule 73    functionaux -> VOID codeTypeVoid codeCheckType
Rule 74    functionaux -> codeFuncIndicator type codeCheckType
Rule 75    vars -> type codeCheckType varsaux
Rule 76    varsaux -> ID codeAddVar EQUAL expression SEMICOLON
Rule 77    varsaux -> ID codeAddVar EQUAL expression COMMA varsaux
Rule 78    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
Rule 79    varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux
Rule 80    call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON
Rule 81    callaux -> COMMA exp callaux
Rule 82    callaux -> empty
Rule 83    call2 -> ID LFTPAREN exp callaux RGTPAREN
Rule 84    read -> READ LFTPAREN readaux RGTPAREN SEMICOLON
Rule 85    readaux -> ID
Rule 86    readaux -> array
Rule 87    empty -> <empty>
Rule 88    codeReturnQuad -> <empty>
Rule 89    codeAddFunctQuad -> <empty>
Rule 90    codeLocationMain -> <empty>
Rule 91    codeGOTOMain -> <empty>
Rule 92    codeElse -> <empty>
Rule 93    codeEndIf -> <empty>
Rule 94    codeNextIf -> <empty>
Rule 95    codeGOTOF -> <empty>
Rule 96    codeGOTOWhile -> <empty>
Rule 97    codeWhileCondition -> <empty>
Rule 98    codeScope -> <empty>
Rule 99    codeCheckType -> <empty>
Rule 100   codeAddVar -> <empty>
Rule 101   codeAddVarArreglo -> <empty>
Rule 102   codeAddParameters -> <empty>
Rule 103   codeNameOfFunct -> <empty>
Rule 104   codeTypeVoid -> <empty>
Rule 105   codeFuncIndicator -> <empty>
Rule 106   codeDeleteOpenParen -> empty
Rule 107   codeAddOpenParen -> empty
Rule 108   codeAddConstBool -> empty
Rule 109   codeAddConstString -> empty
Rule 110   codeAddConstNumber -> empty
Rule 111   codeAddOperator -> empty
Rule 112   codeAskTerm -> empty
Rule 113   codeAskFactor -> empty
Rule 114   codeAskExpression -> empty

Terminals, with rules where they appear

AND                  : 44
BOOL                 : 69
CHAR                 : 68
COMMA                : 9 55 77 79 81
DIVISION             : 58
DOUBEQUAL            : 45
ELSE                 : 20
ELSEIF               : 22
EQUAL                : 10 76 77 78 79
FALSE                : 29
FLOAT                : 31 67
FUNCTION             : 72
GREATTHAN            : 50
GREATTHANEQUAL       : 49
ID                   : 1 6 11 24 54 55 72 76 77 78 79 80 83 85
IF                   : 19 20
INT                  : 32 66 78 79
LESSTHAN             : 51
LESSTHANEQUAL        : 48
LFTBRAC              : 1 13 14 18
LFTBRACSQR           : 6 7 78 79
LFTPAREN             : 21 40 52 53 72 80 83 84
MINUS                : 36 39
MULTIPLICATION       : 57
NOT                  : 46
OR                   : 47
PLUS                 : 35 38
PRINT                : 53
PRIOMH               : 71
PROGRAM              : 1
READ                 : 84
RETURN               : 14
RGTBRAC              : 1 13 14 18
RGTBRACSQR           : 6 7 78 79
RGTPAREN             : 21 40 52 53 72 80 83 84
SEMICOLON            : 10 14 53 76 78 80 84
STRING               : 33 70
TRUE                 : 28
VOID                 : 73
WHILE                : 52
error                : 

Nonterminals, with rules where they appear

array                : 12 25 86
arrayvals            : 78 79
arrayvalsaux         : 7 9
assignment           : 60
assignmentaux        : 10
auxprogramfunct      : 1 4
auxprogramvars       : 1 2
block                : 20 21 52 71
blockneutral         : 13 14 15 16 18
blockreturn          : 72
call                 : 65
call2                : 30
callaux              : 80 81 83
codeAddConstBool     : 28 29
codeAddConstNumber   : 31 32
codeAddConstString   : 33
codeAddFunctQuad     : 72
codeAddOpenParen     : 40
codeAddOperator      : 35 36 43 57 58
codeAddParameters    : 54 55
codeAddVar           : 76 77
codeAddVarArreglo    : 78 79
codeAskExpression    : 43
codeAskFactor        : 40 41
codeAskTerm          : 59
codeCheckType        : 54 55 73 74 75
codeDeleteOpenParen  : 40
codeElse             : 20
codeEndIf            : 19 20
codeFuncIndicator    : 74
codeGOTOF            : 21 52
codeGOTOMain         : 1
codeGOTOWhile        : 52
codeLocationMain     : 71
codeNameOfFunct      : 72
codeNextIf           : 22
codeReturnQuad       : 14
codeScope            : 71 72 72
codeTypeVoid         : 73
codeWhileCondition   : 52
condition            : 61
conditionaux         : 19 20 22
conditionaux2        : 21
constant             : 8 9 37 38 39 53
cteN                 : 26
cteS                 : 27
empty                : 3 5 17 23 56 82 106 107 108 109 110 111 112 113 114
exp                  : 6 14 35 36 42 43 43 80 81 83
expression           : 10 21 40 52 76 77
expressionaux        : 43
factor               : 57 58 59
factoraux            : 41
function             : 4
functionaux          : 72
loop                 : 62
main                 : 1
parameter            : 55 72
program              : 0
read                 : 64
readaux              : 84
statement            : 15
term                 : 34 35 36 57 58
type                 : 54 55 74 75
vars                 : 2 16
varsaux              : 75 77 79
write                : 63

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC

    LFTBRAC         shift and go to state 4


state 4

    (1) program -> PROGRAM ID LFTBRAC . auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC
    (2) auxprogramvars -> . vars auxprogramvars
    (3) auxprogramvars -> . empty
    (75) vars -> . type codeCheckType varsaux
    (87) empty -> .
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING

    FUNCTION        reduce using rule 87 (empty -> .)
    PRIOMH          reduce using rule 87 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    auxprogramvars                 shift and go to state 5
    vars                           shift and go to state 6
    type                           shift and go to state 12
    empty                          shift and go to state 13

state 5

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars . codeGOTOMain auxprogramfunct main RGTBRAC
    (91) codeGOTOMain -> .

    FUNCTION        reduce using rule 91 (codeGOTOMain -> .)
    PRIOMH          reduce using rule 91 (codeGOTOMain -> .)

    codeGOTOMain                   shift and go to state 14

state 6

    (2) auxprogramvars -> vars . auxprogramvars
    (2) auxprogramvars -> . vars auxprogramvars
    (3) auxprogramvars -> . empty
    (75) vars -> . type codeCheckType varsaux
    (87) empty -> .
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING

    FUNCTION        reduce using rule 87 (empty -> .)
    PRIOMH          reduce using rule 87 (empty -> .)
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 6
    auxprogramvars                 shift and go to state 15
    type                           shift and go to state 12
    empty                          shift and go to state 13

state 7

    (67) type -> FLOAT .

    ID              reduce using rule 67 (type -> FLOAT .)


state 8

    (66) type -> INT .

    ID              reduce using rule 66 (type -> INT .)


state 9

    (68) type -> CHAR .

    ID              reduce using rule 68 (type -> CHAR .)


state 10

    (69) type -> BOOL .

    ID              reduce using rule 69 (type -> BOOL .)


state 11

    (70) type -> STRING .

    ID              reduce using rule 70 (type -> STRING .)


state 12

    (75) vars -> type . codeCheckType varsaux
    (99) codeCheckType -> .

    ID              reduce using rule 99 (codeCheckType -> .)

    codeCheckType                  shift and go to state 16

state 13

    (3) auxprogramvars -> empty .

    FUNCTION        reduce using rule 3 (auxprogramvars -> empty .)
    PRIOMH          reduce using rule 3 (auxprogramvars -> empty .)


state 14

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain . auxprogramfunct main RGTBRAC
    (4) auxprogramfunct -> . function auxprogramfunct
    (5) auxprogramfunct -> . empty
    (72) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (87) empty -> .

    FUNCTION        shift and go to state 18
    PRIOMH          reduce using rule 87 (empty -> .)

    function                       shift and go to state 17
    auxprogramfunct                shift and go to state 19
    empty                          shift and go to state 20

state 15

    (2) auxprogramvars -> vars auxprogramvars .

    FUNCTION        reduce using rule 2 (auxprogramvars -> vars auxprogramvars .)
    PRIOMH          reduce using rule 2 (auxprogramvars -> vars auxprogramvars .)


state 16

    (75) vars -> type codeCheckType . varsaux
    (76) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (77) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (78) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    ID              shift and go to state 21

    varsaux                        shift and go to state 22

state 17

    (4) auxprogramfunct -> function . auxprogramfunct
    (4) auxprogramfunct -> . function auxprogramfunct
    (5) auxprogramfunct -> . empty
    (72) function -> . FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (87) empty -> .

    FUNCTION        shift and go to state 18
    PRIOMH          reduce using rule 87 (empty -> .)

    function                       shift and go to state 17
    auxprogramfunct                shift and go to state 23
    empty                          shift and go to state 20

state 18

    (72) function -> FUNCTION . codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (98) codeScope -> .

    VOID            reduce using rule 98 (codeScope -> .)
    INT             reduce using rule 98 (codeScope -> .)
    FLOAT           reduce using rule 98 (codeScope -> .)
    CHAR            reduce using rule 98 (codeScope -> .)
    BOOL            reduce using rule 98 (codeScope -> .)
    STRING          reduce using rule 98 (codeScope -> .)

    codeScope                      shift and go to state 24

state 19

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct . main RGTBRAC
    (71) main -> . codeLocationMain PRIOMH codeScope block
    (90) codeLocationMain -> .

    PRIOMH          reduce using rule 90 (codeLocationMain -> .)

    codeLocationMain               shift and go to state 26
    main                           shift and go to state 25

state 20

    (5) auxprogramfunct -> empty .

    PRIOMH          reduce using rule 5 (auxprogramfunct -> empty .)


state 21

    (76) varsaux -> ID . codeAddVar EQUAL expression SEMICOLON
    (77) varsaux -> ID . codeAddVar EQUAL expression COMMA varsaux
    (78) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> ID . codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux
    (100) codeAddVar -> .
    (101) codeAddVarArreglo -> .

    EQUAL           reduce using rule 100 (codeAddVar -> .)
    LFTBRACSQR      reduce using rule 101 (codeAddVarArreglo -> .)

    codeAddVarArreglo              shift and go to state 27
    codeAddVar                     shift and go to state 28

state 22

    (75) vars -> type codeCheckType varsaux .

    IF              reduce using rule 75 (vars -> type codeCheckType varsaux .)
    WHILE           reduce using rule 75 (vars -> type codeCheckType varsaux .)
    PRINT           reduce using rule 75 (vars -> type codeCheckType varsaux .)
    READ            reduce using rule 75 (vars -> type codeCheckType varsaux .)
    ID              reduce using rule 75 (vars -> type codeCheckType varsaux .)
    INT             reduce using rule 75 (vars -> type codeCheckType varsaux .)
    FLOAT           reduce using rule 75 (vars -> type codeCheckType varsaux .)
    CHAR            reduce using rule 75 (vars -> type codeCheckType varsaux .)
    BOOL            reduce using rule 75 (vars -> type codeCheckType varsaux .)
    STRING          reduce using rule 75 (vars -> type codeCheckType varsaux .)
    RGTBRAC         reduce using rule 75 (vars -> type codeCheckType varsaux .)
    RETURN          reduce using rule 75 (vars -> type codeCheckType varsaux .)
    FUNCTION        reduce using rule 75 (vars -> type codeCheckType varsaux .)
    PRIOMH          reduce using rule 75 (vars -> type codeCheckType varsaux .)


state 23

    (4) auxprogramfunct -> function auxprogramfunct .

    PRIOMH          reduce using rule 4 (auxprogramfunct -> function auxprogramfunct .)


state 24

    (72) function -> FUNCTION codeScope . functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (73) functionaux -> . VOID codeTypeVoid codeCheckType
    (74) functionaux -> . codeFuncIndicator type codeCheckType
    (105) codeFuncIndicator -> .

    VOID            shift and go to state 31
    INT             reduce using rule 105 (codeFuncIndicator -> .)
    FLOAT           reduce using rule 105 (codeFuncIndicator -> .)
    CHAR            reduce using rule 105 (codeFuncIndicator -> .)
    BOOL            reduce using rule 105 (codeFuncIndicator -> .)
    STRING          reduce using rule 105 (codeFuncIndicator -> .)

    functionaux                    shift and go to state 29
    codeFuncIndicator              shift and go to state 30

state 25

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main . RGTBRAC

    RGTBRAC         shift and go to state 32


state 26

    (71) main -> codeLocationMain . PRIOMH codeScope block

    PRIOMH          shift and go to state 33


state 27

    (78) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> ID codeAddVarArreglo . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    LFTBRACSQR      shift and go to state 34


state 28

    (76) varsaux -> ID codeAddVar . EQUAL expression SEMICOLON
    (77) varsaux -> ID codeAddVar . EQUAL expression COMMA varsaux

    EQUAL           shift and go to state 35


state 29

    (72) function -> FUNCTION codeScope functionaux . ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope

    ID              shift and go to state 36


state 30

    (74) functionaux -> codeFuncIndicator . type codeCheckType
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    type                           shift and go to state 37

state 31

    (73) functionaux -> VOID . codeTypeVoid codeCheckType
    (104) codeTypeVoid -> .

    ID              reduce using rule 104 (codeTypeVoid -> .)

    codeTypeVoid                   shift and go to state 38

state 32

    (1) program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC .

    $end            reduce using rule 1 (program -> PROGRAM ID LFTBRAC auxprogramvars codeGOTOMain auxprogramfunct main RGTBRAC .)


state 33

    (71) main -> codeLocationMain PRIOMH . codeScope block
    (98) codeScope -> .

    LFTBRAC         reduce using rule 98 (codeScope -> .)

    codeScope                      shift and go to state 39

state 34

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    INT             shift and go to state 40


state 35

    (76) varsaux -> ID codeAddVar EQUAL . expression SEMICOLON
    (77) varsaux -> ID codeAddVar EQUAL . expression COMMA varsaux
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call2                          shift and go to state 46
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 59

state 36

    (72) function -> FUNCTION codeScope functionaux ID . codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (103) codeNameOfFunct -> .

    LFTPAREN        reduce using rule 103 (codeNameOfFunct -> .)

    codeNameOfFunct                shift and go to state 60

state 37

    (74) functionaux -> codeFuncIndicator type . codeCheckType
    (99) codeCheckType -> .

    ID              reduce using rule 99 (codeCheckType -> .)

    codeCheckType                  shift and go to state 61

state 38

    (73) functionaux -> VOID codeTypeVoid . codeCheckType
    (99) codeCheckType -> .

    ID              reduce using rule 99 (codeCheckType -> .)

    codeCheckType                  shift and go to state 62

state 39

    (71) main -> codeLocationMain PRIOMH codeScope . block
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 64

state 40

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvals COMMA varsaux

    RGTBRACSQR      shift and go to state 65


state 41

    (37) factoraux -> constant .

    MULTIPLICATION  reduce using rule 37 (factoraux -> constant .)
    DIVISION        reduce using rule 37 (factoraux -> constant .)
    PLUS            reduce using rule 37 (factoraux -> constant .)
    MINUS           reduce using rule 37 (factoraux -> constant .)
    AND             reduce using rule 37 (factoraux -> constant .)
    DOUBEQUAL       reduce using rule 37 (factoraux -> constant .)
    NOT             reduce using rule 37 (factoraux -> constant .)
    OR              reduce using rule 37 (factoraux -> constant .)
    LESSTHANEQUAL   reduce using rule 37 (factoraux -> constant .)
    GREATTHANEQUAL  reduce using rule 37 (factoraux -> constant .)
    GREATTHAN       reduce using rule 37 (factoraux -> constant .)
    LESSTHAN        reduce using rule 37 (factoraux -> constant .)
    SEMICOLON       reduce using rule 37 (factoraux -> constant .)
    COMMA           reduce using rule 37 (factoraux -> constant .)
    RGTPAREN        reduce using rule 37 (factoraux -> constant .)
    RGTBRACSQR      reduce using rule 37 (factoraux -> constant .)


state 42

    (41) factor -> factoraux . codeAskFactor
    (113) codeAskFactor -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAskFactor                  shift and go to state 66
    empty                          shift and go to state 67

state 43

    (25) constant -> array .

    MULTIPLICATION  reduce using rule 25 (constant -> array .)
    DIVISION        reduce using rule 25 (constant -> array .)
    PLUS            reduce using rule 25 (constant -> array .)
    MINUS           reduce using rule 25 (constant -> array .)
    COMMA           reduce using rule 25 (constant -> array .)
    RGTPAREN        reduce using rule 25 (constant -> array .)
    AND             reduce using rule 25 (constant -> array .)
    DOUBEQUAL       reduce using rule 25 (constant -> array .)
    NOT             reduce using rule 25 (constant -> array .)
    OR              reduce using rule 25 (constant -> array .)
    LESSTHANEQUAL   reduce using rule 25 (constant -> array .)
    GREATTHANEQUAL  reduce using rule 25 (constant -> array .)
    GREATTHAN       reduce using rule 25 (constant -> array .)
    LESSTHAN        reduce using rule 25 (constant -> array .)
    SEMICOLON       reduce using rule 25 (constant -> array .)
    RGTBRACSQR      reduce using rule 25 (constant -> array .)


state 44

    (26) constant -> cteN .

    MULTIPLICATION  reduce using rule 26 (constant -> cteN .)
    DIVISION        reduce using rule 26 (constant -> cteN .)
    PLUS            reduce using rule 26 (constant -> cteN .)
    MINUS           reduce using rule 26 (constant -> cteN .)
    COMMA           reduce using rule 26 (constant -> cteN .)
    RGTPAREN        reduce using rule 26 (constant -> cteN .)
    AND             reduce using rule 26 (constant -> cteN .)
    DOUBEQUAL       reduce using rule 26 (constant -> cteN .)
    NOT             reduce using rule 26 (constant -> cteN .)
    OR              reduce using rule 26 (constant -> cteN .)
    LESSTHANEQUAL   reduce using rule 26 (constant -> cteN .)
    GREATTHANEQUAL  reduce using rule 26 (constant -> cteN .)
    GREATTHAN       reduce using rule 26 (constant -> cteN .)
    LESSTHAN        reduce using rule 26 (constant -> cteN .)
    SEMICOLON       reduce using rule 26 (constant -> cteN .)
    RGTBRACSQR      reduce using rule 26 (constant -> cteN .)


state 45

    (39) factoraux -> MINUS . constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 68
    call2                          shift and go to state 46
    array                          shift and go to state 43
    cteN                           shift and go to state 44

state 46

    (30) constant -> call2 .

    MULTIPLICATION  reduce using rule 30 (constant -> call2 .)
    DIVISION        reduce using rule 30 (constant -> call2 .)
    PLUS            reduce using rule 30 (constant -> call2 .)
    MINUS           reduce using rule 30 (constant -> call2 .)
    COMMA           reduce using rule 30 (constant -> call2 .)
    RGTPAREN        reduce using rule 30 (constant -> call2 .)
    AND             reduce using rule 30 (constant -> call2 .)
    DOUBEQUAL       reduce using rule 30 (constant -> call2 .)
    NOT             reduce using rule 30 (constant -> call2 .)
    OR              reduce using rule 30 (constant -> call2 .)
    LESSTHANEQUAL   reduce using rule 30 (constant -> call2 .)
    GREATTHANEQUAL  reduce using rule 30 (constant -> call2 .)
    GREATTHAN       reduce using rule 30 (constant -> call2 .)
    LESSTHAN        reduce using rule 30 (constant -> call2 .)
    SEMICOLON       reduce using rule 30 (constant -> call2 .)
    RGTBRACSQR      reduce using rule 30 (constant -> call2 .)


state 47

    (28) constant -> TRUE . codeAddConstBool
    (108) codeAddConstBool -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAddConstBool               shift and go to state 69
    empty                          shift and go to state 70

state 48

    (57) term -> factor . MULTIPLICATION codeAddOperator term
    (58) term -> factor . DIVISION codeAddOperator term
    (59) term -> factor . codeAskTerm
    (112) codeAskTerm -> . empty
    (87) empty -> .

    MULTIPLICATION  shift and go to state 73
    DIVISION        shift and go to state 71
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAskTerm                    shift and go to state 72
    empty                          shift and go to state 74

state 49

    (38) factoraux -> PLUS . constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 75
    call2                          shift and go to state 46
    array                          shift and go to state 43
    cteN                           shift and go to state 44

state 50

    (33) cteS -> STRING . codeAddConstString
    (109) codeAddConstString -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAddConstString             shift and go to state 76
    empty                          shift and go to state 77

state 51

    (27) constant -> cteS .

    MULTIPLICATION  reduce using rule 27 (constant -> cteS .)
    DIVISION        reduce using rule 27 (constant -> cteS .)
    PLUS            reduce using rule 27 (constant -> cteS .)
    MINUS           reduce using rule 27 (constant -> cteS .)
    COMMA           reduce using rule 27 (constant -> cteS .)
    RGTPAREN        reduce using rule 27 (constant -> cteS .)
    AND             reduce using rule 27 (constant -> cteS .)
    DOUBEQUAL       reduce using rule 27 (constant -> cteS .)
    NOT             reduce using rule 27 (constant -> cteS .)
    OR              reduce using rule 27 (constant -> cteS .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> cteS .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> cteS .)
    GREATTHAN       reduce using rule 27 (constant -> cteS .)
    LESSTHAN        reduce using rule 27 (constant -> cteS .)
    SEMICOLON       reduce using rule 27 (constant -> cteS .)
    RGTBRACSQR      reduce using rule 27 (constant -> cteS .)


state 52

    (40) factor -> LFTPAREN . codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (107) codeAddOpenParen -> . empty
    (87) empty -> .

    LFTPAREN        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    TRUE            reduce using rule 87 (empty -> .)
    FALSE           reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)

    codeAddOpenParen               shift and go to state 78
    empty                          shift and go to state 79

state 53

    (24) constant -> ID .
    (6) array -> ID . LFTBRACSQR exp RGTBRACSQR
    (83) call2 -> ID . LFTPAREN exp callaux RGTPAREN

    MULTIPLICATION  reduce using rule 24 (constant -> ID .)
    DIVISION        reduce using rule 24 (constant -> ID .)
    PLUS            reduce using rule 24 (constant -> ID .)
    MINUS           reduce using rule 24 (constant -> ID .)
    COMMA           reduce using rule 24 (constant -> ID .)
    RGTPAREN        reduce using rule 24 (constant -> ID .)
    AND             reduce using rule 24 (constant -> ID .)
    DOUBEQUAL       reduce using rule 24 (constant -> ID .)
    NOT             reduce using rule 24 (constant -> ID .)
    OR              reduce using rule 24 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 24 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 24 (constant -> ID .)
    GREATTHAN       reduce using rule 24 (constant -> ID .)
    LESSTHAN        reduce using rule 24 (constant -> ID .)
    SEMICOLON       reduce using rule 24 (constant -> ID .)
    RGTBRACSQR      reduce using rule 24 (constant -> ID .)
    LFTBRACSQR      shift and go to state 81
    LFTPAREN        shift and go to state 80


state 54

    (34) exp -> term .
    (35) exp -> term . PLUS codeAddOperator exp
    (36) exp -> term . MINUS codeAddOperator exp

    AND             reduce using rule 34 (exp -> term .)
    DOUBEQUAL       reduce using rule 34 (exp -> term .)
    NOT             reduce using rule 34 (exp -> term .)
    OR              reduce using rule 34 (exp -> term .)
    LESSTHANEQUAL   reduce using rule 34 (exp -> term .)
    GREATTHANEQUAL  reduce using rule 34 (exp -> term .)
    GREATTHAN       reduce using rule 34 (exp -> term .)
    LESSTHAN        reduce using rule 34 (exp -> term .)
    SEMICOLON       reduce using rule 34 (exp -> term .)
    COMMA           reduce using rule 34 (exp -> term .)
    RGTPAREN        reduce using rule 34 (exp -> term .)
    RGTBRACSQR      reduce using rule 34 (exp -> term .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83


state 55

    (29) constant -> FALSE . codeAddConstBool
    (108) codeAddConstBool -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAddConstBool               shift and go to state 84
    empty                          shift and go to state 70

state 56

    (32) cteN -> INT . codeAddConstNumber
    (110) codeAddConstNumber -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAddConstNumber             shift and go to state 85
    empty                          shift and go to state 86

state 57

    (31) cteN -> FLOAT . codeAddConstNumber
    (110) codeAddConstNumber -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAddConstNumber             shift and go to state 87
    empty                          shift and go to state 86

state 58

    (42) expression -> exp .
    (43) expression -> exp . expressionaux codeAddOperator exp codeAskExpression
    (44) expressionaux -> . AND
    (45) expressionaux -> . DOUBEQUAL
    (46) expressionaux -> . NOT
    (47) expressionaux -> . OR
    (48) expressionaux -> . LESSTHANEQUAL
    (49) expressionaux -> . GREATTHANEQUAL
    (50) expressionaux -> . GREATTHAN
    (51) expressionaux -> . LESSTHAN

    RGTPAREN        reduce using rule 42 (expression -> exp .)
    SEMICOLON       reduce using rule 42 (expression -> exp .)
    COMMA           reduce using rule 42 (expression -> exp .)
    AND             shift and go to state 88
    DOUBEQUAL       shift and go to state 95
    NOT             shift and go to state 94
    OR              shift and go to state 96
    LESSTHANEQUAL   shift and go to state 92
    GREATTHANEQUAL  shift and go to state 90
    GREATTHAN       shift and go to state 91
    LESSTHAN        shift and go to state 93

    expressionaux                  shift and go to state 89

state 59

    (76) varsaux -> ID codeAddVar EQUAL expression . SEMICOLON
    (77) varsaux -> ID codeAddVar EQUAL expression . COMMA varsaux

    SEMICOLON       shift and go to state 97
    COMMA           shift and go to state 98


state 60

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct . LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope

    LFTPAREN        shift and go to state 99


state 61

    (74) functionaux -> codeFuncIndicator type codeCheckType .

    ID              reduce using rule 74 (functionaux -> codeFuncIndicator type codeCheckType .)


state 62

    (73) functionaux -> VOID codeTypeVoid codeCheckType .

    ID              reduce using rule 73 (functionaux -> VOID codeTypeVoid codeCheckType .)


state 63

    (18) block -> LFTBRAC . blockneutral RGTBRAC
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call
    (75) vars -> . type codeCheckType varsaux
    (87) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (84) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (80) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 87 (empty -> .)
    IF              shift and go to state 114
    WHILE           shift and go to state 103
    PRINT           shift and go to state 102
    READ            shift and go to state 101
    ID              shift and go to state 112
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 100
    array                          shift and go to state 104
    write                          shift and go to state 105
    call                           shift and go to state 107
    type                           shift and go to state 12
    empty                          shift and go to state 108
    statement                      shift and go to state 109
    read                           shift and go to state 106
    assignment                     shift and go to state 110
    assignmentaux                  shift and go to state 111
    condition                      shift and go to state 113
    blockneutral                   shift and go to state 115
    loop                           shift and go to state 116

state 64

    (71) main -> codeLocationMain PRIOMH codeScope block .

    RGTBRAC         reduce using rule 71 (main -> codeLocationMain PRIOMH codeScope block .)


state 65

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvals SEMICOLON
    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvals COMMA varsaux

    EQUAL           shift and go to state 117


state 66

    (41) factor -> factoraux codeAskFactor .

    MULTIPLICATION  reduce using rule 41 (factor -> factoraux codeAskFactor .)
    DIVISION        reduce using rule 41 (factor -> factoraux codeAskFactor .)
    PLUS            reduce using rule 41 (factor -> factoraux codeAskFactor .)
    MINUS           reduce using rule 41 (factor -> factoraux codeAskFactor .)
    COMMA           reduce using rule 41 (factor -> factoraux codeAskFactor .)
    RGTPAREN        reduce using rule 41 (factor -> factoraux codeAskFactor .)
    AND             reduce using rule 41 (factor -> factoraux codeAskFactor .)
    DOUBEQUAL       reduce using rule 41 (factor -> factoraux codeAskFactor .)
    NOT             reduce using rule 41 (factor -> factoraux codeAskFactor .)
    OR              reduce using rule 41 (factor -> factoraux codeAskFactor .)
    LESSTHANEQUAL   reduce using rule 41 (factor -> factoraux codeAskFactor .)
    GREATTHANEQUAL  reduce using rule 41 (factor -> factoraux codeAskFactor .)
    GREATTHAN       reduce using rule 41 (factor -> factoraux codeAskFactor .)
    LESSTHAN        reduce using rule 41 (factor -> factoraux codeAskFactor .)
    SEMICOLON       reduce using rule 41 (factor -> factoraux codeAskFactor .)
    RGTBRACSQR      reduce using rule 41 (factor -> factoraux codeAskFactor .)


state 67

    (113) codeAskFactor -> empty .

    MULTIPLICATION  reduce using rule 113 (codeAskFactor -> empty .)
    DIVISION        reduce using rule 113 (codeAskFactor -> empty .)
    PLUS            reduce using rule 113 (codeAskFactor -> empty .)
    MINUS           reduce using rule 113 (codeAskFactor -> empty .)
    AND             reduce using rule 113 (codeAskFactor -> empty .)
    DOUBEQUAL       reduce using rule 113 (codeAskFactor -> empty .)
    NOT             reduce using rule 113 (codeAskFactor -> empty .)
    OR              reduce using rule 113 (codeAskFactor -> empty .)
    LESSTHANEQUAL   reduce using rule 113 (codeAskFactor -> empty .)
    GREATTHANEQUAL  reduce using rule 113 (codeAskFactor -> empty .)
    GREATTHAN       reduce using rule 113 (codeAskFactor -> empty .)
    LESSTHAN        reduce using rule 113 (codeAskFactor -> empty .)
    SEMICOLON       reduce using rule 113 (codeAskFactor -> empty .)
    COMMA           reduce using rule 113 (codeAskFactor -> empty .)
    RGTPAREN        reduce using rule 113 (codeAskFactor -> empty .)
    RGTBRACSQR      reduce using rule 113 (codeAskFactor -> empty .)


state 68

    (39) factoraux -> MINUS constant .

    MULTIPLICATION  reduce using rule 39 (factoraux -> MINUS constant .)
    DIVISION        reduce using rule 39 (factoraux -> MINUS constant .)
    PLUS            reduce using rule 39 (factoraux -> MINUS constant .)
    MINUS           reduce using rule 39 (factoraux -> MINUS constant .)
    AND             reduce using rule 39 (factoraux -> MINUS constant .)
    DOUBEQUAL       reduce using rule 39 (factoraux -> MINUS constant .)
    NOT             reduce using rule 39 (factoraux -> MINUS constant .)
    OR              reduce using rule 39 (factoraux -> MINUS constant .)
    LESSTHANEQUAL   reduce using rule 39 (factoraux -> MINUS constant .)
    GREATTHANEQUAL  reduce using rule 39 (factoraux -> MINUS constant .)
    GREATTHAN       reduce using rule 39 (factoraux -> MINUS constant .)
    LESSTHAN        reduce using rule 39 (factoraux -> MINUS constant .)
    SEMICOLON       reduce using rule 39 (factoraux -> MINUS constant .)
    COMMA           reduce using rule 39 (factoraux -> MINUS constant .)
    RGTPAREN        reduce using rule 39 (factoraux -> MINUS constant .)
    RGTBRACSQR      reduce using rule 39 (factoraux -> MINUS constant .)


state 69

    (28) constant -> TRUE codeAddConstBool .

    MULTIPLICATION  reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    DIVISION        reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    PLUS            reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    MINUS           reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    COMMA           reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    RGTPAREN        reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    AND             reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    DOUBEQUAL       reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    NOT             reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    OR              reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    LESSTHANEQUAL   reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    GREATTHANEQUAL  reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    GREATTHAN       reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    LESSTHAN        reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    SEMICOLON       reduce using rule 28 (constant -> TRUE codeAddConstBool .)
    RGTBRACSQR      reduce using rule 28 (constant -> TRUE codeAddConstBool .)


state 70

    (108) codeAddConstBool -> empty .

    MULTIPLICATION  reduce using rule 108 (codeAddConstBool -> empty .)
    DIVISION        reduce using rule 108 (codeAddConstBool -> empty .)
    PLUS            reduce using rule 108 (codeAddConstBool -> empty .)
    MINUS           reduce using rule 108 (codeAddConstBool -> empty .)
    AND             reduce using rule 108 (codeAddConstBool -> empty .)
    DOUBEQUAL       reduce using rule 108 (codeAddConstBool -> empty .)
    NOT             reduce using rule 108 (codeAddConstBool -> empty .)
    OR              reduce using rule 108 (codeAddConstBool -> empty .)
    LESSTHANEQUAL   reduce using rule 108 (codeAddConstBool -> empty .)
    GREATTHANEQUAL  reduce using rule 108 (codeAddConstBool -> empty .)
    GREATTHAN       reduce using rule 108 (codeAddConstBool -> empty .)
    LESSTHAN        reduce using rule 108 (codeAddConstBool -> empty .)
    SEMICOLON       reduce using rule 108 (codeAddConstBool -> empty .)
    COMMA           reduce using rule 108 (codeAddConstBool -> empty .)
    RGTPAREN        reduce using rule 108 (codeAddConstBool -> empty .)
    RGTBRACSQR      reduce using rule 108 (codeAddConstBool -> empty .)


state 71

    (58) term -> factor DIVISION . codeAddOperator term
    (111) codeAddOperator -> . empty
    (87) empty -> .

    LFTPAREN        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    TRUE            reduce using rule 87 (empty -> .)
    FALSE           reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)

    codeAddOperator                shift and go to state 118
    empty                          shift and go to state 119

state 72

    (59) term -> factor codeAskTerm .

    PLUS            reduce using rule 59 (term -> factor codeAskTerm .)
    MINUS           reduce using rule 59 (term -> factor codeAskTerm .)
    RGTBRACSQR      reduce using rule 59 (term -> factor codeAskTerm .)
    AND             reduce using rule 59 (term -> factor codeAskTerm .)
    DOUBEQUAL       reduce using rule 59 (term -> factor codeAskTerm .)
    NOT             reduce using rule 59 (term -> factor codeAskTerm .)
    OR              reduce using rule 59 (term -> factor codeAskTerm .)
    LESSTHANEQUAL   reduce using rule 59 (term -> factor codeAskTerm .)
    GREATTHANEQUAL  reduce using rule 59 (term -> factor codeAskTerm .)
    GREATTHAN       reduce using rule 59 (term -> factor codeAskTerm .)
    LESSTHAN        reduce using rule 59 (term -> factor codeAskTerm .)
    RGTPAREN        reduce using rule 59 (term -> factor codeAskTerm .)
    SEMICOLON       reduce using rule 59 (term -> factor codeAskTerm .)
    COMMA           reduce using rule 59 (term -> factor codeAskTerm .)


state 73

    (57) term -> factor MULTIPLICATION . codeAddOperator term
    (111) codeAddOperator -> . empty
    (87) empty -> .

    LFTPAREN        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    TRUE            reduce using rule 87 (empty -> .)
    FALSE           reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)

    codeAddOperator                shift and go to state 120
    empty                          shift and go to state 119

state 74

    (112) codeAskTerm -> empty .

    PLUS            reduce using rule 112 (codeAskTerm -> empty .)
    MINUS           reduce using rule 112 (codeAskTerm -> empty .)
    AND             reduce using rule 112 (codeAskTerm -> empty .)
    DOUBEQUAL       reduce using rule 112 (codeAskTerm -> empty .)
    NOT             reduce using rule 112 (codeAskTerm -> empty .)
    OR              reduce using rule 112 (codeAskTerm -> empty .)
    LESSTHANEQUAL   reduce using rule 112 (codeAskTerm -> empty .)
    GREATTHANEQUAL  reduce using rule 112 (codeAskTerm -> empty .)
    GREATTHAN       reduce using rule 112 (codeAskTerm -> empty .)
    LESSTHAN        reduce using rule 112 (codeAskTerm -> empty .)
    SEMICOLON       reduce using rule 112 (codeAskTerm -> empty .)
    COMMA           reduce using rule 112 (codeAskTerm -> empty .)
    RGTPAREN        reduce using rule 112 (codeAskTerm -> empty .)
    RGTBRACSQR      reduce using rule 112 (codeAskTerm -> empty .)


state 75

    (38) factoraux -> PLUS constant .

    MULTIPLICATION  reduce using rule 38 (factoraux -> PLUS constant .)
    DIVISION        reduce using rule 38 (factoraux -> PLUS constant .)
    PLUS            reduce using rule 38 (factoraux -> PLUS constant .)
    MINUS           reduce using rule 38 (factoraux -> PLUS constant .)
    AND             reduce using rule 38 (factoraux -> PLUS constant .)
    DOUBEQUAL       reduce using rule 38 (factoraux -> PLUS constant .)
    NOT             reduce using rule 38 (factoraux -> PLUS constant .)
    OR              reduce using rule 38 (factoraux -> PLUS constant .)
    LESSTHANEQUAL   reduce using rule 38 (factoraux -> PLUS constant .)
    GREATTHANEQUAL  reduce using rule 38 (factoraux -> PLUS constant .)
    GREATTHAN       reduce using rule 38 (factoraux -> PLUS constant .)
    LESSTHAN        reduce using rule 38 (factoraux -> PLUS constant .)
    SEMICOLON       reduce using rule 38 (factoraux -> PLUS constant .)
    COMMA           reduce using rule 38 (factoraux -> PLUS constant .)
    RGTPAREN        reduce using rule 38 (factoraux -> PLUS constant .)
    RGTBRACSQR      reduce using rule 38 (factoraux -> PLUS constant .)


state 76

    (33) cteS -> STRING codeAddConstString .

    MULTIPLICATION  reduce using rule 33 (cteS -> STRING codeAddConstString .)
    DIVISION        reduce using rule 33 (cteS -> STRING codeAddConstString .)
    PLUS            reduce using rule 33 (cteS -> STRING codeAddConstString .)
    MINUS           reduce using rule 33 (cteS -> STRING codeAddConstString .)
    COMMA           reduce using rule 33 (cteS -> STRING codeAddConstString .)
    RGTPAREN        reduce using rule 33 (cteS -> STRING codeAddConstString .)
    AND             reduce using rule 33 (cteS -> STRING codeAddConstString .)
    DOUBEQUAL       reduce using rule 33 (cteS -> STRING codeAddConstString .)
    NOT             reduce using rule 33 (cteS -> STRING codeAddConstString .)
    OR              reduce using rule 33 (cteS -> STRING codeAddConstString .)
    LESSTHANEQUAL   reduce using rule 33 (cteS -> STRING codeAddConstString .)
    GREATTHANEQUAL  reduce using rule 33 (cteS -> STRING codeAddConstString .)
    GREATTHAN       reduce using rule 33 (cteS -> STRING codeAddConstString .)
    LESSTHAN        reduce using rule 33 (cteS -> STRING codeAddConstString .)
    SEMICOLON       reduce using rule 33 (cteS -> STRING codeAddConstString .)
    RGTBRACSQR      reduce using rule 33 (cteS -> STRING codeAddConstString .)


state 77

    (109) codeAddConstString -> empty .

    MULTIPLICATION  reduce using rule 109 (codeAddConstString -> empty .)
    DIVISION        reduce using rule 109 (codeAddConstString -> empty .)
    PLUS            reduce using rule 109 (codeAddConstString -> empty .)
    MINUS           reduce using rule 109 (codeAddConstString -> empty .)
    AND             reduce using rule 109 (codeAddConstString -> empty .)
    DOUBEQUAL       reduce using rule 109 (codeAddConstString -> empty .)
    NOT             reduce using rule 109 (codeAddConstString -> empty .)
    OR              reduce using rule 109 (codeAddConstString -> empty .)
    LESSTHANEQUAL   reduce using rule 109 (codeAddConstString -> empty .)
    GREATTHANEQUAL  reduce using rule 109 (codeAddConstString -> empty .)
    GREATTHAN       reduce using rule 109 (codeAddConstString -> empty .)
    LESSTHAN        reduce using rule 109 (codeAddConstString -> empty .)
    SEMICOLON       reduce using rule 109 (codeAddConstString -> empty .)
    COMMA           reduce using rule 109 (codeAddConstString -> empty .)
    RGTPAREN        reduce using rule 109 (codeAddConstString -> empty .)
    RGTBRACSQR      reduce using rule 109 (codeAddConstString -> empty .)


state 78

    (40) factor -> LFTPAREN codeAddOpenParen . expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    term                           shift and go to state 54
    constant                       shift and go to state 41
    cteS                           shift and go to state 51
    cteN                           shift and go to state 44
    call2                          shift and go to state 46
    exp                            shift and go to state 58
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    expression                     shift and go to state 121
    array                          shift and go to state 43

state 79

    (107) codeAddOpenParen -> empty .

    LFTPAREN        reduce using rule 107 (codeAddOpenParen -> empty .)
    PLUS            reduce using rule 107 (codeAddOpenParen -> empty .)
    MINUS           reduce using rule 107 (codeAddOpenParen -> empty .)
    ID              reduce using rule 107 (codeAddOpenParen -> empty .)
    TRUE            reduce using rule 107 (codeAddOpenParen -> empty .)
    FALSE           reduce using rule 107 (codeAddOpenParen -> empty .)
    FLOAT           reduce using rule 107 (codeAddOpenParen -> empty .)
    INT             reduce using rule 107 (codeAddOpenParen -> empty .)
    STRING          reduce using rule 107 (codeAddOpenParen -> empty .)


state 80

    (83) call2 -> ID LFTPAREN . exp callaux RGTPAREN
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 122
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 81

    (6) array -> ID LFTBRACSQR . exp RGTBRACSQR
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 123
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 82

    (35) exp -> term PLUS . codeAddOperator exp
    (111) codeAddOperator -> . empty
    (87) empty -> .

    LFTPAREN        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    TRUE            reduce using rule 87 (empty -> .)
    FALSE           reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)

    codeAddOperator                shift and go to state 124
    empty                          shift and go to state 119

state 83

    (36) exp -> term MINUS . codeAddOperator exp
    (111) codeAddOperator -> . empty
    (87) empty -> .

    LFTPAREN        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    TRUE            reduce using rule 87 (empty -> .)
    FALSE           reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)

    codeAddOperator                shift and go to state 125
    empty                          shift and go to state 119

state 84

    (29) constant -> FALSE codeAddConstBool .

    MULTIPLICATION  reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    DIVISION        reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    PLUS            reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    MINUS           reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    COMMA           reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    RGTPAREN        reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    AND             reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    DOUBEQUAL       reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    NOT             reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    OR              reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    LESSTHANEQUAL   reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    GREATTHANEQUAL  reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    GREATTHAN       reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    LESSTHAN        reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    SEMICOLON       reduce using rule 29 (constant -> FALSE codeAddConstBool .)
    RGTBRACSQR      reduce using rule 29 (constant -> FALSE codeAddConstBool .)


state 85

    (32) cteN -> INT codeAddConstNumber .

    MULTIPLICATION  reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    DIVISION        reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    PLUS            reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    MINUS           reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    SEMICOLON       reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    COMMA           reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    RGTPAREN        reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    AND             reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    DOUBEQUAL       reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    NOT             reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    OR              reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    LESSTHANEQUAL   reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    GREATTHANEQUAL  reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    GREATTHAN       reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    LESSTHAN        reduce using rule 32 (cteN -> INT codeAddConstNumber .)
    RGTBRACSQR      reduce using rule 32 (cteN -> INT codeAddConstNumber .)


state 86

    (110) codeAddConstNumber -> empty .

    MULTIPLICATION  reduce using rule 110 (codeAddConstNumber -> empty .)
    DIVISION        reduce using rule 110 (codeAddConstNumber -> empty .)
    PLUS            reduce using rule 110 (codeAddConstNumber -> empty .)
    MINUS           reduce using rule 110 (codeAddConstNumber -> empty .)
    AND             reduce using rule 110 (codeAddConstNumber -> empty .)
    DOUBEQUAL       reduce using rule 110 (codeAddConstNumber -> empty .)
    NOT             reduce using rule 110 (codeAddConstNumber -> empty .)
    OR              reduce using rule 110 (codeAddConstNumber -> empty .)
    LESSTHANEQUAL   reduce using rule 110 (codeAddConstNumber -> empty .)
    GREATTHANEQUAL  reduce using rule 110 (codeAddConstNumber -> empty .)
    GREATTHAN       reduce using rule 110 (codeAddConstNumber -> empty .)
    LESSTHAN        reduce using rule 110 (codeAddConstNumber -> empty .)
    SEMICOLON       reduce using rule 110 (codeAddConstNumber -> empty .)
    COMMA           reduce using rule 110 (codeAddConstNumber -> empty .)
    RGTPAREN        reduce using rule 110 (codeAddConstNumber -> empty .)
    RGTBRACSQR      reduce using rule 110 (codeAddConstNumber -> empty .)


state 87

    (31) cteN -> FLOAT codeAddConstNumber .

    MULTIPLICATION  reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    DIVISION        reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    PLUS            reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    MINUS           reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    SEMICOLON       reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    COMMA           reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    RGTPAREN        reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    AND             reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    DOUBEQUAL       reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    NOT             reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    OR              reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    LESSTHANEQUAL   reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    GREATTHANEQUAL  reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    GREATTHAN       reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    LESSTHAN        reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)
    RGTBRACSQR      reduce using rule 31 (cteN -> FLOAT codeAddConstNumber .)


state 88

    (44) expressionaux -> AND .

    LFTPAREN        reduce using rule 44 (expressionaux -> AND .)
    PLUS            reduce using rule 44 (expressionaux -> AND .)
    MINUS           reduce using rule 44 (expressionaux -> AND .)
    ID              reduce using rule 44 (expressionaux -> AND .)
    TRUE            reduce using rule 44 (expressionaux -> AND .)
    FALSE           reduce using rule 44 (expressionaux -> AND .)
    FLOAT           reduce using rule 44 (expressionaux -> AND .)
    INT             reduce using rule 44 (expressionaux -> AND .)
    STRING          reduce using rule 44 (expressionaux -> AND .)


state 89

    (43) expression -> exp expressionaux . codeAddOperator exp codeAskExpression
    (111) codeAddOperator -> . empty
    (87) empty -> .

    LFTPAREN        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    TRUE            reduce using rule 87 (empty -> .)
    FALSE           reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)

    codeAddOperator                shift and go to state 126
    empty                          shift and go to state 119

state 90

    (49) expressionaux -> GREATTHANEQUAL .

    LFTPAREN        reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    PLUS            reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    MINUS           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    ID              reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    TRUE            reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    FALSE           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    FLOAT           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    INT             reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    STRING          reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)


state 91

    (50) expressionaux -> GREATTHAN .

    LFTPAREN        reduce using rule 50 (expressionaux -> GREATTHAN .)
    PLUS            reduce using rule 50 (expressionaux -> GREATTHAN .)
    MINUS           reduce using rule 50 (expressionaux -> GREATTHAN .)
    ID              reduce using rule 50 (expressionaux -> GREATTHAN .)
    TRUE            reduce using rule 50 (expressionaux -> GREATTHAN .)
    FALSE           reduce using rule 50 (expressionaux -> GREATTHAN .)
    FLOAT           reduce using rule 50 (expressionaux -> GREATTHAN .)
    INT             reduce using rule 50 (expressionaux -> GREATTHAN .)
    STRING          reduce using rule 50 (expressionaux -> GREATTHAN .)


state 92

    (48) expressionaux -> LESSTHANEQUAL .

    LFTPAREN        reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    PLUS            reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    MINUS           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    ID              reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    TRUE            reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    FALSE           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    FLOAT           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    INT             reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    STRING          reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)


state 93

    (51) expressionaux -> LESSTHAN .

    LFTPAREN        reduce using rule 51 (expressionaux -> LESSTHAN .)
    PLUS            reduce using rule 51 (expressionaux -> LESSTHAN .)
    MINUS           reduce using rule 51 (expressionaux -> LESSTHAN .)
    ID              reduce using rule 51 (expressionaux -> LESSTHAN .)
    TRUE            reduce using rule 51 (expressionaux -> LESSTHAN .)
    FALSE           reduce using rule 51 (expressionaux -> LESSTHAN .)
    FLOAT           reduce using rule 51 (expressionaux -> LESSTHAN .)
    INT             reduce using rule 51 (expressionaux -> LESSTHAN .)
    STRING          reduce using rule 51 (expressionaux -> LESSTHAN .)


state 94

    (46) expressionaux -> NOT .

    LFTPAREN        reduce using rule 46 (expressionaux -> NOT .)
    PLUS            reduce using rule 46 (expressionaux -> NOT .)
    MINUS           reduce using rule 46 (expressionaux -> NOT .)
    ID              reduce using rule 46 (expressionaux -> NOT .)
    TRUE            reduce using rule 46 (expressionaux -> NOT .)
    FALSE           reduce using rule 46 (expressionaux -> NOT .)
    FLOAT           reduce using rule 46 (expressionaux -> NOT .)
    INT             reduce using rule 46 (expressionaux -> NOT .)
    STRING          reduce using rule 46 (expressionaux -> NOT .)


state 95

    (45) expressionaux -> DOUBEQUAL .

    LFTPAREN        reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    PLUS            reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    MINUS           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    ID              reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    TRUE            reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    FALSE           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    FLOAT           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    INT             reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    STRING          reduce using rule 45 (expressionaux -> DOUBEQUAL .)


state 96

    (47) expressionaux -> OR .

    LFTPAREN        reduce using rule 47 (expressionaux -> OR .)
    PLUS            reduce using rule 47 (expressionaux -> OR .)
    MINUS           reduce using rule 47 (expressionaux -> OR .)
    ID              reduce using rule 47 (expressionaux -> OR .)
    TRUE            reduce using rule 47 (expressionaux -> OR .)
    FALSE           reduce using rule 47 (expressionaux -> OR .)
    FLOAT           reduce using rule 47 (expressionaux -> OR .)
    INT             reduce using rule 47 (expressionaux -> OR .)
    STRING          reduce using rule 47 (expressionaux -> OR .)


state 97

    (76) varsaux -> ID codeAddVar EQUAL expression SEMICOLON .

    INT             reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    STRING          reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    FUNCTION        reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    PRIOMH          reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    IF              reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    READ            reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    ID              reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 76 (varsaux -> ID codeAddVar EQUAL expression SEMICOLON .)


state 98

    (77) varsaux -> ID codeAddVar EQUAL expression COMMA . varsaux
    (76) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (77) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (78) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    ID              shift and go to state 21

    varsaux                        shift and go to state 127

state 99

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN . parameter RGTPAREN codeAddFunctQuad blockreturn codeScope
    (54) parameter -> . type codeCheckType ID codeAddParameters
    (55) parameter -> . type codeCheckType ID codeAddParameters COMMA parameter
    (56) parameter -> . empty
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (87) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 87 (empty -> .)

    type                           shift and go to state 128
    parameter                      shift and go to state 129
    empty                          shift and go to state 130

state 100

    (16) blockneutral -> vars . blockneutral
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call
    (75) vars -> . type codeCheckType varsaux
    (87) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (84) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (80) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 87 (empty -> .)
    RETURN          reduce using rule 87 (empty -> .)
    IF              shift and go to state 114
    WHILE           shift and go to state 103
    PRINT           shift and go to state 102
    READ            shift and go to state 101
    ID              shift and go to state 112
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 100
    array                          shift and go to state 104
    write                          shift and go to state 105
    call                           shift and go to state 107
    type                           shift and go to state 12
    empty                          shift and go to state 108
    statement                      shift and go to state 109
    read                           shift and go to state 106
    assignment                     shift and go to state 110
    assignmentaux                  shift and go to state 111
    condition                      shift and go to state 113
    blockneutral                   shift and go to state 131
    loop                           shift and go to state 116

state 101

    (84) read -> READ . LFTPAREN readaux RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 132


state 102

    (53) write -> PRINT . LFTPAREN constant RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 133


state 103

    (52) loop -> WHILE . codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (97) codeWhileCondition -> .

    LFTPAREN        reduce using rule 97 (codeWhileCondition -> .)

    codeWhileCondition             shift and go to state 134

state 104

    (12) assignmentaux -> array .

    EQUAL           reduce using rule 12 (assignmentaux -> array .)


state 105

    (63) statement -> write .

    IF              reduce using rule 63 (statement -> write .)
    WHILE           reduce using rule 63 (statement -> write .)
    PRINT           reduce using rule 63 (statement -> write .)
    READ            reduce using rule 63 (statement -> write .)
    ID              reduce using rule 63 (statement -> write .)
    INT             reduce using rule 63 (statement -> write .)
    FLOAT           reduce using rule 63 (statement -> write .)
    CHAR            reduce using rule 63 (statement -> write .)
    BOOL            reduce using rule 63 (statement -> write .)
    STRING          reduce using rule 63 (statement -> write .)
    RGTBRAC         reduce using rule 63 (statement -> write .)
    RETURN          reduce using rule 63 (statement -> write .)


state 106

    (64) statement -> read .

    IF              reduce using rule 64 (statement -> read .)
    WHILE           reduce using rule 64 (statement -> read .)
    PRINT           reduce using rule 64 (statement -> read .)
    READ            reduce using rule 64 (statement -> read .)
    ID              reduce using rule 64 (statement -> read .)
    INT             reduce using rule 64 (statement -> read .)
    FLOAT           reduce using rule 64 (statement -> read .)
    CHAR            reduce using rule 64 (statement -> read .)
    BOOL            reduce using rule 64 (statement -> read .)
    STRING          reduce using rule 64 (statement -> read .)
    RGTBRAC         reduce using rule 64 (statement -> read .)
    RETURN          reduce using rule 64 (statement -> read .)


state 107

    (65) statement -> call .

    IF              reduce using rule 65 (statement -> call .)
    WHILE           reduce using rule 65 (statement -> call .)
    PRINT           reduce using rule 65 (statement -> call .)
    READ            reduce using rule 65 (statement -> call .)
    ID              reduce using rule 65 (statement -> call .)
    INT             reduce using rule 65 (statement -> call .)
    FLOAT           reduce using rule 65 (statement -> call .)
    CHAR            reduce using rule 65 (statement -> call .)
    BOOL            reduce using rule 65 (statement -> call .)
    STRING          reduce using rule 65 (statement -> call .)
    RGTBRAC         reduce using rule 65 (statement -> call .)
    RETURN          reduce using rule 65 (statement -> call .)


state 108

    (17) blockneutral -> empty .

    RGTBRAC         reduce using rule 17 (blockneutral -> empty .)
    RETURN          reduce using rule 17 (blockneutral -> empty .)


state 109

    (15) blockneutral -> statement . blockneutral
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call
    (75) vars -> . type codeCheckType varsaux
    (87) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (84) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (80) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 87 (empty -> .)
    RETURN          reduce using rule 87 (empty -> .)
    IF              shift and go to state 114
    WHILE           shift and go to state 103
    PRINT           shift and go to state 102
    READ            shift and go to state 101
    ID              shift and go to state 112
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 100
    array                          shift and go to state 104
    write                          shift and go to state 105
    call                           shift and go to state 107
    type                           shift and go to state 12
    empty                          shift and go to state 108
    statement                      shift and go to state 109
    read                           shift and go to state 106
    assignment                     shift and go to state 110
    assignmentaux                  shift and go to state 111
    condition                      shift and go to state 113
    blockneutral                   shift and go to state 135
    loop                           shift and go to state 116

state 110

    (60) statement -> assignment .

    IF              reduce using rule 60 (statement -> assignment .)
    WHILE           reduce using rule 60 (statement -> assignment .)
    PRINT           reduce using rule 60 (statement -> assignment .)
    READ            reduce using rule 60 (statement -> assignment .)
    ID              reduce using rule 60 (statement -> assignment .)
    INT             reduce using rule 60 (statement -> assignment .)
    FLOAT           reduce using rule 60 (statement -> assignment .)
    CHAR            reduce using rule 60 (statement -> assignment .)
    BOOL            reduce using rule 60 (statement -> assignment .)
    STRING          reduce using rule 60 (statement -> assignment .)
    RGTBRAC         reduce using rule 60 (statement -> assignment .)
    RETURN          reduce using rule 60 (statement -> assignment .)


state 111

    (10) assignment -> assignmentaux . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 136


state 112

    (80) call -> ID . LFTPAREN exp callaux RGTPAREN SEMICOLON
    (11) assignmentaux -> ID .
    (6) array -> ID . LFTBRACSQR exp RGTBRACSQR

    LFTPAREN        shift and go to state 137
    EQUAL           reduce using rule 11 (assignmentaux -> ID .)
    LFTBRACSQR      shift and go to state 81


state 113

    (61) statement -> condition .

    IF              reduce using rule 61 (statement -> condition .)
    WHILE           reduce using rule 61 (statement -> condition .)
    PRINT           reduce using rule 61 (statement -> condition .)
    READ            reduce using rule 61 (statement -> condition .)
    ID              reduce using rule 61 (statement -> condition .)
    INT             reduce using rule 61 (statement -> condition .)
    FLOAT           reduce using rule 61 (statement -> condition .)
    CHAR            reduce using rule 61 (statement -> condition .)
    BOOL            reduce using rule 61 (statement -> condition .)
    STRING          reduce using rule 61 (statement -> condition .)
    RGTBRAC         reduce using rule 61 (statement -> condition .)
    RETURN          reduce using rule 61 (statement -> condition .)


state 114

    (19) condition -> IF . conditionaux codeEndIf
    (20) condition -> IF . conditionaux ELSE codeElse block codeEndIf
    (21) conditionaux -> . LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2

    LFTPAREN        shift and go to state 138

    conditionaux                   shift and go to state 139

state 115

    (18) block -> LFTBRAC blockneutral . RGTBRAC

    RGTBRAC         shift and go to state 140


state 116

    (62) statement -> loop .

    IF              reduce using rule 62 (statement -> loop .)
    WHILE           reduce using rule 62 (statement -> loop .)
    PRINT           reduce using rule 62 (statement -> loop .)
    READ            reduce using rule 62 (statement -> loop .)
    ID              reduce using rule 62 (statement -> loop .)
    INT             reduce using rule 62 (statement -> loop .)
    FLOAT           reduce using rule 62 (statement -> loop .)
    CHAR            reduce using rule 62 (statement -> loop .)
    BOOL            reduce using rule 62 (statement -> loop .)
    STRING          reduce using rule 62 (statement -> loop .)
    RGTBRAC         reduce using rule 62 (statement -> loop .)
    RETURN          reduce using rule 62 (statement -> loop .)


state 117

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvals SEMICOLON
    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvals COMMA varsaux
    (7) arrayvals -> . LFTBRACSQR arrayvalsaux RGTBRACSQR

    LFTBRACSQR      shift and go to state 141

    arrayvals                      shift and go to state 142

state 118

    (58) term -> factor DIVISION codeAddOperator . term
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 143
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 119

    (111) codeAddOperator -> empty .

    LFTPAREN        reduce using rule 111 (codeAddOperator -> empty .)
    PLUS            reduce using rule 111 (codeAddOperator -> empty .)
    MINUS           reduce using rule 111 (codeAddOperator -> empty .)
    ID              reduce using rule 111 (codeAddOperator -> empty .)
    TRUE            reduce using rule 111 (codeAddOperator -> empty .)
    FALSE           reduce using rule 111 (codeAddOperator -> empty .)
    FLOAT           reduce using rule 111 (codeAddOperator -> empty .)
    INT             reduce using rule 111 (codeAddOperator -> empty .)
    STRING          reduce using rule 111 (codeAddOperator -> empty .)


state 120

    (57) term -> factor MULTIPLICATION codeAddOperator . term
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 144
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 121

    (40) factor -> LFTPAREN codeAddOpenParen expression . RGTPAREN codeDeleteOpenParen codeAskFactor

    RGTPAREN        shift and go to state 145


state 122

    (83) call2 -> ID LFTPAREN exp . callaux RGTPAREN
    (81) callaux -> . COMMA exp callaux
    (82) callaux -> . empty
    (87) empty -> .

    COMMA           shift and go to state 147
    RGTPAREN        reduce using rule 87 (empty -> .)

    empty                          shift and go to state 148
    callaux                        shift and go to state 146

state 123

    (6) array -> ID LFTBRACSQR exp . RGTBRACSQR

    RGTBRACSQR      shift and go to state 149


state 124

    (35) exp -> term PLUS codeAddOperator . exp
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 150
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 125

    (36) exp -> term MINUS codeAddOperator . exp
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 151
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 126

    (43) expression -> exp expressionaux codeAddOperator . exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    term                           shift and go to state 54
    constant                       shift and go to state 41
    cteS                           shift and go to state 51
    cteN                           shift and go to state 44
    call2                          shift and go to state 46
    exp                            shift and go to state 152
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 127

    (77) varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .

    INT             reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    FLOAT           reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    CHAR            reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    BOOL            reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    STRING          reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    FUNCTION        reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    PRIOMH          reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    IF              reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    WHILE           reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    PRINT           reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    READ            reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    ID              reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    RGTBRAC         reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)
    RETURN          reduce using rule 77 (varsaux -> ID codeAddVar EQUAL expression COMMA varsaux .)


state 128

    (54) parameter -> type . codeCheckType ID codeAddParameters
    (55) parameter -> type . codeCheckType ID codeAddParameters COMMA parameter
    (99) codeCheckType -> .

    ID              reduce using rule 99 (codeCheckType -> .)

    codeCheckType                  shift and go to state 153

state 129

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter . RGTPAREN codeAddFunctQuad blockreturn codeScope

    RGTPAREN        shift and go to state 154


state 130

    (56) parameter -> empty .

    RGTPAREN        reduce using rule 56 (parameter -> empty .)


state 131

    (16) blockneutral -> vars blockneutral .

    RGTBRAC         reduce using rule 16 (blockneutral -> vars blockneutral .)
    RETURN          reduce using rule 16 (blockneutral -> vars blockneutral .)


state 132

    (84) read -> READ LFTPAREN . readaux RGTPAREN SEMICOLON
    (85) readaux -> . ID
    (86) readaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    ID              shift and go to state 157

    readaux                        shift and go to state 155
    array                          shift and go to state 156

state 133

    (53) write -> PRINT LFTPAREN . constant RGTPAREN SEMICOLON
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 158
    call2                          shift and go to state 46
    array                          shift and go to state 43
    cteN                           shift and go to state 44

state 134

    (52) loop -> WHILE codeWhileCondition . LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile

    LFTPAREN        shift and go to state 159


state 135

    (15) blockneutral -> statement blockneutral .

    RGTBRAC         reduce using rule 15 (blockneutral -> statement blockneutral .)
    RETURN          reduce using rule 15 (blockneutral -> statement blockneutral .)


state 136

    (10) assignment -> assignmentaux EQUAL . expression SEMICOLON
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call2                          shift and go to state 46
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 160

state 137

    (80) call -> ID LFTPAREN . exp callaux RGTPAREN SEMICOLON
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 161
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 138

    (21) conditionaux -> LFTPAREN . expression RGTPAREN codeGOTOF block conditionaux2
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call2                          shift and go to state 46
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 162

state 139

    (19) condition -> IF conditionaux . codeEndIf
    (20) condition -> IF conditionaux . ELSE codeElse block codeEndIf
    (93) codeEndIf -> .

    ELSE            shift and go to state 163
    IF              reduce using rule 93 (codeEndIf -> .)
    WHILE           reduce using rule 93 (codeEndIf -> .)
    PRINT           reduce using rule 93 (codeEndIf -> .)
    READ            reduce using rule 93 (codeEndIf -> .)
    ID              reduce using rule 93 (codeEndIf -> .)
    INT             reduce using rule 93 (codeEndIf -> .)
    FLOAT           reduce using rule 93 (codeEndIf -> .)
    CHAR            reduce using rule 93 (codeEndIf -> .)
    BOOL            reduce using rule 93 (codeEndIf -> .)
    STRING          reduce using rule 93 (codeEndIf -> .)
    RGTBRAC         reduce using rule 93 (codeEndIf -> .)
    RETURN          reduce using rule 93 (codeEndIf -> .)

    codeEndIf                      shift and go to state 164

state 140

    (18) block -> LFTBRAC blockneutral RGTBRAC .

    IF              reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    WHILE           reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    PRINT           reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    READ            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    ID              reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    INT             reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    FLOAT           reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    CHAR            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    BOOL            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    STRING          reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    RGTBRAC         reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    RETURN          reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSEIF          reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)
    ELSE            reduce using rule 18 (block -> LFTBRAC blockneutral RGTBRAC .)


state 141

    (7) arrayvals -> LFTBRACSQR . arrayvalsaux RGTBRACSQR
    (8) arrayvalsaux -> . constant
    (9) arrayvalsaux -> . constant COMMA arrayvalsaux
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 165
    call2                          shift and go to state 46
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    arrayvalsaux                   shift and go to state 166

state 142

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals . SEMICOLON
    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals . COMMA varsaux

    SEMICOLON       shift and go to state 167
    COMMA           shift and go to state 168


state 143

    (58) term -> factor DIVISION codeAddOperator term .

    PLUS            reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    MINUS           reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    RGTBRACSQR      reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    AND             reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    DOUBEQUAL       reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    NOT             reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    OR              reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    LESSTHANEQUAL   reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    GREATTHANEQUAL  reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    GREATTHAN       reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    LESSTHAN        reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    RGTPAREN        reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    SEMICOLON       reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)
    COMMA           reduce using rule 58 (term -> factor DIVISION codeAddOperator term .)


state 144

    (57) term -> factor MULTIPLICATION codeAddOperator term .

    PLUS            reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    MINUS           reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    RGTBRACSQR      reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    AND             reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    DOUBEQUAL       reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    NOT             reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    OR              reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    LESSTHANEQUAL   reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    GREATTHANEQUAL  reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    GREATTHAN       reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    LESSTHAN        reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    RGTPAREN        reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    SEMICOLON       reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)
    COMMA           reduce using rule 57 (term -> factor MULTIPLICATION codeAddOperator term .)


state 145

    (40) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN . codeDeleteOpenParen codeAskFactor
    (106) codeDeleteOpenParen -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeDeleteOpenParen            shift and go to state 169
    empty                          shift and go to state 170

state 146

    (83) call2 -> ID LFTPAREN exp callaux . RGTPAREN

    RGTPAREN        shift and go to state 171


state 147

    (81) callaux -> COMMA . exp callaux
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 172
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 148

    (82) callaux -> empty .

    RGTPAREN        reduce using rule 82 (callaux -> empty .)


state 149

    (6) array -> ID LFTBRACSQR exp RGTBRACSQR .

    MULTIPLICATION  reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DIVISION        reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    PLUS            reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MINUS           reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    AND             reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DOUBEQUAL       reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    NOT             reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    OR              reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHANEQUAL   reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHANEQUAL  reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHAN       reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHAN        reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    SEMICOLON       reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    COMMA           reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTPAREN        reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTBRACSQR      reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    EQUAL           reduce using rule 6 (array -> ID LFTBRACSQR exp RGTBRACSQR .)


state 150

    (35) exp -> term PLUS codeAddOperator exp .

    AND             reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    DOUBEQUAL       reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    NOT             reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    OR              reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    LESSTHANEQUAL   reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    GREATTHANEQUAL  reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    GREATTHAN       reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    LESSTHAN        reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    SEMICOLON       reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    COMMA           reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    RGTPAREN        reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)
    RGTBRACSQR      reduce using rule 35 (exp -> term PLUS codeAddOperator exp .)


state 151

    (36) exp -> term MINUS codeAddOperator exp .

    AND             reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    DOUBEQUAL       reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    NOT             reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    OR              reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    LESSTHANEQUAL   reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    GREATTHANEQUAL  reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    GREATTHAN       reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    LESSTHAN        reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    SEMICOLON       reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    COMMA           reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    RGTPAREN        reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)
    RGTBRACSQR      reduce using rule 36 (exp -> term MINUS codeAddOperator exp .)


state 152

    (43) expression -> exp expressionaux codeAddOperator exp . codeAskExpression
    (114) codeAskExpression -> . empty
    (87) empty -> .

    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)

    empty                          shift and go to state 173
    codeAskExpression              shift and go to state 174

state 153

    (54) parameter -> type codeCheckType . ID codeAddParameters
    (55) parameter -> type codeCheckType . ID codeAddParameters COMMA parameter

    ID              shift and go to state 175


state 154

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN . codeAddFunctQuad blockreturn codeScope
    (89) codeAddFunctQuad -> .

    LFTBRAC         reduce using rule 89 (codeAddFunctQuad -> .)

    codeAddFunctQuad               shift and go to state 176

state 155

    (84) read -> READ LFTPAREN readaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 177


state 156

    (86) readaux -> array .

    RGTPAREN        reduce using rule 86 (readaux -> array .)


state 157

    (85) readaux -> ID .
    (6) array -> ID . LFTBRACSQR exp RGTBRACSQR

    RGTPAREN        reduce using rule 85 (readaux -> ID .)
    LFTBRACSQR      shift and go to state 81


state 158

    (53) write -> PRINT LFTPAREN constant . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 178


state 159

    (52) loop -> WHILE codeWhileCondition LFTPAREN . expression RGTPAREN codeGOTOF block codeGOTOWhile
    (42) expression -> . exp
    (43) expression -> . exp expressionaux codeAddOperator exp codeAskExpression
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 41
    factoraux                      shift and go to state 42
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    call2                          shift and go to state 46
    factor                         shift and go to state 48
    term                           shift and go to state 54
    exp                            shift and go to state 58
    expression                     shift and go to state 179

state 160

    (10) assignment -> assignmentaux EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 180


state 161

    (80) call -> ID LFTPAREN exp . callaux RGTPAREN SEMICOLON
    (81) callaux -> . COMMA exp callaux
    (82) callaux -> . empty
    (87) empty -> .

    COMMA           shift and go to state 147
    RGTPAREN        reduce using rule 87 (empty -> .)

    empty                          shift and go to state 148
    callaux                        shift and go to state 181

state 162

    (21) conditionaux -> LFTPAREN expression . RGTPAREN codeGOTOF block conditionaux2

    RGTPAREN        shift and go to state 182


state 163

    (20) condition -> IF conditionaux ELSE . codeElse block codeEndIf
    (92) codeElse -> .

    LFTBRAC         reduce using rule 92 (codeElse -> .)

    codeElse                       shift and go to state 183

state 164

    (19) condition -> IF conditionaux codeEndIf .

    IF              reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    WHILE           reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    PRINT           reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    READ            reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    ID              reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    INT             reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    FLOAT           reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    CHAR            reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    BOOL            reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    STRING          reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    RGTBRAC         reduce using rule 19 (condition -> IF conditionaux codeEndIf .)
    RETURN          reduce using rule 19 (condition -> IF conditionaux codeEndIf .)


state 165

    (8) arrayvalsaux -> constant .
    (9) arrayvalsaux -> constant . COMMA arrayvalsaux

    RGTBRACSQR      reduce using rule 8 (arrayvalsaux -> constant .)
    COMMA           shift and go to state 184


state 166

    (7) arrayvals -> LFTBRACSQR arrayvalsaux . RGTBRACSQR

    RGTBRACSQR      shift and go to state 185


state 167

    (78) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .

    INT             reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    FLOAT           reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    CHAR            reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    BOOL            reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    STRING          reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    FUNCTION        reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    PRIOMH          reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    IF              reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    WHILE           reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    PRINT           reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    READ            reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    ID              reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    RGTBRAC         reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)
    RETURN          reduce using rule 78 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON .)


state 168

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA . varsaux
    (76) varsaux -> . ID codeAddVar EQUAL expression SEMICOLON
    (77) varsaux -> . ID codeAddVar EQUAL expression COMMA varsaux
    (78) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals SEMICOLON
    (79) varsaux -> . ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux

    ID              shift and go to state 21

    varsaux                        shift and go to state 186

state 169

    (40) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen . codeAskFactor
    (113) codeAskFactor -> . empty
    (87) empty -> .

    MULTIPLICATION  reduce using rule 87 (empty -> .)
    DIVISION        reduce using rule 87 (empty -> .)
    PLUS            reduce using rule 87 (empty -> .)
    MINUS           reduce using rule 87 (empty -> .)
    AND             reduce using rule 87 (empty -> .)
    DOUBEQUAL       reduce using rule 87 (empty -> .)
    NOT             reduce using rule 87 (empty -> .)
    OR              reduce using rule 87 (empty -> .)
    LESSTHANEQUAL   reduce using rule 87 (empty -> .)
    GREATTHANEQUAL  reduce using rule 87 (empty -> .)
    GREATTHAN       reduce using rule 87 (empty -> .)
    LESSTHAN        reduce using rule 87 (empty -> .)
    SEMICOLON       reduce using rule 87 (empty -> .)
    COMMA           reduce using rule 87 (empty -> .)
    RGTPAREN        reduce using rule 87 (empty -> .)
    RGTBRACSQR      reduce using rule 87 (empty -> .)

    codeAskFactor                  shift and go to state 187
    empty                          shift and go to state 67

state 170

    (106) codeDeleteOpenParen -> empty .

    MULTIPLICATION  reduce using rule 106 (codeDeleteOpenParen -> empty .)
    DIVISION        reduce using rule 106 (codeDeleteOpenParen -> empty .)
    PLUS            reduce using rule 106 (codeDeleteOpenParen -> empty .)
    MINUS           reduce using rule 106 (codeDeleteOpenParen -> empty .)
    AND             reduce using rule 106 (codeDeleteOpenParen -> empty .)
    DOUBEQUAL       reduce using rule 106 (codeDeleteOpenParen -> empty .)
    NOT             reduce using rule 106 (codeDeleteOpenParen -> empty .)
    OR              reduce using rule 106 (codeDeleteOpenParen -> empty .)
    LESSTHANEQUAL   reduce using rule 106 (codeDeleteOpenParen -> empty .)
    GREATTHANEQUAL  reduce using rule 106 (codeDeleteOpenParen -> empty .)
    GREATTHAN       reduce using rule 106 (codeDeleteOpenParen -> empty .)
    LESSTHAN        reduce using rule 106 (codeDeleteOpenParen -> empty .)
    SEMICOLON       reduce using rule 106 (codeDeleteOpenParen -> empty .)
    COMMA           reduce using rule 106 (codeDeleteOpenParen -> empty .)
    RGTPAREN        reduce using rule 106 (codeDeleteOpenParen -> empty .)
    RGTBRACSQR      reduce using rule 106 (codeDeleteOpenParen -> empty .)


state 171

    (83) call2 -> ID LFTPAREN exp callaux RGTPAREN .

    MULTIPLICATION  reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DIVISION        reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    PLUS            reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    MINUS           reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    AND             reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DOUBEQUAL       reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    NOT             reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    OR              reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHAN       reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHAN        reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    SEMICOLON       reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    COMMA           reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTPAREN        reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTBRACSQR      reduce using rule 83 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)


state 172

    (81) callaux -> COMMA exp . callaux
    (81) callaux -> . COMMA exp callaux
    (82) callaux -> . empty
    (87) empty -> .

    COMMA           shift and go to state 147
    RGTPAREN        reduce using rule 87 (empty -> .)

    empty                          shift and go to state 148
    callaux                        shift and go to state 188

state 173

    (114) codeAskExpression -> empty .

    SEMICOLON       reduce using rule 114 (codeAskExpression -> empty .)
    COMMA           reduce using rule 114 (codeAskExpression -> empty .)
    RGTPAREN        reduce using rule 114 (codeAskExpression -> empty .)


state 174

    (43) expression -> exp expressionaux codeAddOperator exp codeAskExpression .

    RGTPAREN        reduce using rule 43 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)
    SEMICOLON       reduce using rule 43 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)
    COMMA           reduce using rule 43 (expression -> exp expressionaux codeAddOperator exp codeAskExpression .)


state 175

    (54) parameter -> type codeCheckType ID . codeAddParameters
    (55) parameter -> type codeCheckType ID . codeAddParameters COMMA parameter
    (102) codeAddParameters -> .

    COMMA           reduce using rule 102 (codeAddParameters -> .)
    RGTPAREN        reduce using rule 102 (codeAddParameters -> .)

    codeAddParameters              shift and go to state 189

state 176

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad . blockreturn codeScope
    (13) blockreturn -> . LFTBRAC blockneutral RGTBRAC
    (14) blockreturn -> . LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC

    LFTBRAC         shift and go to state 190

    blockreturn                    shift and go to state 191

state 177

    (84) read -> READ LFTPAREN readaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 192


state 178

    (53) write -> PRINT LFTPAREN constant RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 193


state 179

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression . RGTPAREN codeGOTOF block codeGOTOWhile

    RGTPAREN        shift and go to state 194


state 180

    (10) assignment -> assignmentaux EQUAL expression SEMICOLON .

    IF              reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    READ            reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    ID              reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    INT             reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    STRING          reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 10 (assignment -> assignmentaux EQUAL expression SEMICOLON .)


state 181

    (80) call -> ID LFTPAREN exp callaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 195


state 182

    (21) conditionaux -> LFTPAREN expression RGTPAREN . codeGOTOF block conditionaux2
    (95) codeGOTOF -> .

    LFTBRAC         reduce using rule 95 (codeGOTOF -> .)

    codeGOTOF                      shift and go to state 196

state 183

    (20) condition -> IF conditionaux ELSE codeElse . block codeEndIf
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 197

state 184

    (9) arrayvalsaux -> constant COMMA . arrayvalsaux
    (8) arrayvalsaux -> . constant
    (9) arrayvalsaux -> . constant COMMA arrayvalsaux
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    constant                       shift and go to state 165
    call2                          shift and go to state 46
    array                          shift and go to state 43
    cteN                           shift and go to state 44
    arrayvalsaux                   shift and go to state 198

state 185

    (7) arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .

    SEMICOLON       reduce using rule 7 (arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .)
    COMMA           reduce using rule 7 (arrayvals -> LFTBRACSQR arrayvalsaux RGTBRACSQR .)


state 186

    (79) varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .

    INT             reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    FLOAT           reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    CHAR            reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    BOOL            reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    STRING          reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    FUNCTION        reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    PRIOMH          reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    IF              reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    WHILE           reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    PRINT           reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    READ            reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    ID              reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    RGTBRAC         reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)
    RETURN          reduce using rule 79 (varsaux -> ID codeAddVarArreglo LFTBRACSQR INT RGTBRACSQR EQUAL arrayvals COMMA varsaux .)


state 187

    (40) factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .

    MULTIPLICATION  reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    DIVISION        reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    PLUS            reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    MINUS           reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    COMMA           reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    RGTPAREN        reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    AND             reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    DOUBEQUAL       reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    NOT             reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    OR              reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    LESSTHANEQUAL   reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    GREATTHANEQUAL  reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    GREATTHAN       reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    LESSTHAN        reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    SEMICOLON       reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)
    RGTBRACSQR      reduce using rule 40 (factor -> LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor .)


state 188

    (81) callaux -> COMMA exp callaux .

    RGTPAREN        reduce using rule 81 (callaux -> COMMA exp callaux .)


state 189

    (54) parameter -> type codeCheckType ID codeAddParameters .
    (55) parameter -> type codeCheckType ID codeAddParameters . COMMA parameter

    RGTPAREN        reduce using rule 54 (parameter -> type codeCheckType ID codeAddParameters .)
    COMMA           shift and go to state 199


state 190

    (13) blockreturn -> LFTBRAC . blockneutral RGTBRAC
    (14) blockreturn -> LFTBRAC . blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC
    (15) blockneutral -> . statement blockneutral
    (16) blockneutral -> . vars blockneutral
    (17) blockneutral -> . empty
    (60) statement -> . assignment
    (61) statement -> . condition
    (62) statement -> . loop
    (63) statement -> . write
    (64) statement -> . read
    (65) statement -> . call
    (75) vars -> . type codeCheckType varsaux
    (87) empty -> .
    (10) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux codeEndIf
    (20) condition -> . IF conditionaux ELSE codeElse block codeEndIf
    (52) loop -> . WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (84) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (80) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (11) assignmentaux -> . ID
    (12) assignmentaux -> . array
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 87 (empty -> .)
    RETURN          reduce using rule 87 (empty -> .)
    IF              shift and go to state 114
    WHILE           shift and go to state 103
    PRINT           shift and go to state 102
    READ            shift and go to state 101
    ID              shift and go to state 112
    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11

    vars                           shift and go to state 100
    array                          shift and go to state 104
    write                          shift and go to state 105
    call                           shift and go to state 107
    type                           shift and go to state 12
    empty                          shift and go to state 108
    statement                      shift and go to state 109
    read                           shift and go to state 106
    assignment                     shift and go to state 110
    assignmentaux                  shift and go to state 111
    condition                      shift and go to state 113
    blockneutral                   shift and go to state 200
    loop                           shift and go to state 116

state 191

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn . codeScope
    (98) codeScope -> .

    FUNCTION        reduce using rule 98 (codeScope -> .)
    PRIOMH          reduce using rule 98 (codeScope -> .)

    codeScope                      shift and go to state 201

state 192

    (84) read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .

    IF              reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 84 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)


state 193

    (53) write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .

    IF              reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    READ            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    ID              reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    INT             reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    STRING          reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)


state 194

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN . codeGOTOF block codeGOTOWhile
    (95) codeGOTOF -> .

    LFTBRAC         reduce using rule 95 (codeGOTOF -> .)

    codeGOTOF                      shift and go to state 202

state 195

    (80) call -> ID LFTPAREN exp callaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 203


state 196

    (21) conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF . block conditionaux2
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 204

state 197

    (20) condition -> IF conditionaux ELSE codeElse block . codeEndIf
    (93) codeEndIf -> .

    IF              reduce using rule 93 (codeEndIf -> .)
    WHILE           reduce using rule 93 (codeEndIf -> .)
    PRINT           reduce using rule 93 (codeEndIf -> .)
    READ            reduce using rule 93 (codeEndIf -> .)
    ID              reduce using rule 93 (codeEndIf -> .)
    INT             reduce using rule 93 (codeEndIf -> .)
    FLOAT           reduce using rule 93 (codeEndIf -> .)
    CHAR            reduce using rule 93 (codeEndIf -> .)
    BOOL            reduce using rule 93 (codeEndIf -> .)
    STRING          reduce using rule 93 (codeEndIf -> .)
    RGTBRAC         reduce using rule 93 (codeEndIf -> .)
    RETURN          reduce using rule 93 (codeEndIf -> .)

    codeEndIf                      shift and go to state 205

state 198

    (9) arrayvalsaux -> constant COMMA arrayvalsaux .

    RGTBRACSQR      reduce using rule 9 (arrayvalsaux -> constant COMMA arrayvalsaux .)


state 199

    (55) parameter -> type codeCheckType ID codeAddParameters COMMA . parameter
    (54) parameter -> . type codeCheckType ID codeAddParameters
    (55) parameter -> . type codeCheckType ID codeAddParameters COMMA parameter
    (56) parameter -> . empty
    (66) type -> . INT
    (67) type -> . FLOAT
    (68) type -> . CHAR
    (69) type -> . BOOL
    (70) type -> . STRING
    (87) empty -> .

    INT             shift and go to state 8
    FLOAT           shift and go to state 7
    CHAR            shift and go to state 9
    BOOL            shift and go to state 10
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 87 (empty -> .)

    parameter                      shift and go to state 206
    type                           shift and go to state 128
    empty                          shift and go to state 130

state 200

    (13) blockreturn -> LFTBRAC blockneutral . RGTBRAC
    (14) blockreturn -> LFTBRAC blockneutral . RETURN exp codeReturnQuad SEMICOLON RGTBRAC

    RGTBRAC         shift and go to state 208
    RETURN          shift and go to state 207


state 201

    (72) function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope .

    FUNCTION        reduce using rule 72 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope .)
    PRIOMH          reduce using rule 72 (function -> FUNCTION codeScope functionaux ID codeNameOfFunct LFTPAREN parameter RGTPAREN codeAddFunctQuad blockreturn codeScope .)


state 202

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF . block codeGOTOWhile
    (18) block -> . LFTBRAC blockneutral RGTBRAC

    LFTBRAC         shift and go to state 63

    block                          shift and go to state 209

state 203

    (80) call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .

    IF              reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 80 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)


state 204

    (21) conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block . conditionaux2
    (22) conditionaux2 -> . codeNextIf ELSEIF conditionaux
    (23) conditionaux2 -> . empty
    (94) codeNextIf -> .
    (87) empty -> .

    ELSEIF          reduce using rule 94 (codeNextIf -> .)
    ELSE            reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    PRINT           reduce using rule 87 (empty -> .)
    READ            reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    INT             reduce using rule 87 (empty -> .)
    FLOAT           reduce using rule 87 (empty -> .)
    CHAR            reduce using rule 87 (empty -> .)
    BOOL            reduce using rule 87 (empty -> .)
    STRING          reduce using rule 87 (empty -> .)
    RGTBRAC         reduce using rule 87 (empty -> .)
    RETURN          reduce using rule 87 (empty -> .)

    conditionaux2                  shift and go to state 210
    codeNextIf                     shift and go to state 211
    empty                          shift and go to state 212

state 205

    (20) condition -> IF conditionaux ELSE codeElse block codeEndIf .

    IF              reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    WHILE           reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    PRINT           reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    READ            reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    ID              reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    INT             reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    FLOAT           reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    CHAR            reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    BOOL            reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    STRING          reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    RGTBRAC         reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)
    RETURN          reduce using rule 20 (condition -> IF conditionaux ELSE codeElse block codeEndIf .)


state 206

    (55) parameter -> type codeCheckType ID codeAddParameters COMMA parameter .

    RGTPAREN        reduce using rule 55 (parameter -> type codeCheckType ID codeAddParameters COMMA parameter .)


state 207

    (14) blockreturn -> LFTBRAC blockneutral RETURN . exp codeReturnQuad SEMICOLON RGTBRAC
    (34) exp -> . term
    (35) exp -> . term PLUS codeAddOperator exp
    (36) exp -> . term MINUS codeAddOperator exp
    (57) term -> . factor MULTIPLICATION codeAddOperator term
    (58) term -> . factor DIVISION codeAddOperator term
    (59) term -> . factor codeAskTerm
    (40) factor -> . LFTPAREN codeAddOpenParen expression RGTPAREN codeDeleteOpenParen codeAskFactor
    (41) factor -> . factoraux codeAskFactor
    (37) factoraux -> . constant
    (38) factoraux -> . PLUS constant
    (39) factoraux -> . MINUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE codeAddConstBool
    (29) constant -> . FALSE codeAddConstBool
    (30) constant -> . call2
    (6) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT codeAddConstNumber
    (32) cteN -> . INT codeAddConstNumber
    (33) cteS -> . STRING codeAddConstString
    (83) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 52
    PLUS            shift and go to state 49
    MINUS           shift and go to state 45
    ID              shift and go to state 53
    TRUE            shift and go to state 47
    FALSE           shift and go to state 55
    FLOAT           shift and go to state 57
    INT             shift and go to state 56
    STRING          shift and go to state 50

    cteS                           shift and go to state 51
    term                           shift and go to state 54
    constant                       shift and go to state 41
    call2                          shift and go to state 46
    cteN                           shift and go to state 44
    exp                            shift and go to state 213
    factor                         shift and go to state 48
    factoraux                      shift and go to state 42
    array                          shift and go to state 43

state 208

    (13) blockreturn -> LFTBRAC blockneutral RGTBRAC .

    FUNCTION        reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)
    PRIOMH          reduce using rule 13 (blockreturn -> LFTBRAC blockneutral RGTBRAC .)


state 209

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block . codeGOTOWhile
    (96) codeGOTOWhile -> .

    IF              reduce using rule 96 (codeGOTOWhile -> .)
    WHILE           reduce using rule 96 (codeGOTOWhile -> .)
    PRINT           reduce using rule 96 (codeGOTOWhile -> .)
    READ            reduce using rule 96 (codeGOTOWhile -> .)
    ID              reduce using rule 96 (codeGOTOWhile -> .)
    INT             reduce using rule 96 (codeGOTOWhile -> .)
    FLOAT           reduce using rule 96 (codeGOTOWhile -> .)
    CHAR            reduce using rule 96 (codeGOTOWhile -> .)
    BOOL            reduce using rule 96 (codeGOTOWhile -> .)
    STRING          reduce using rule 96 (codeGOTOWhile -> .)
    RGTBRAC         reduce using rule 96 (codeGOTOWhile -> .)
    RETURN          reduce using rule 96 (codeGOTOWhile -> .)

    codeGOTOWhile                  shift and go to state 214

state 210

    (21) conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .

    ELSE            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    IF              reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    WHILE           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    PRINT           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    READ            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    ID              reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    INT             reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    FLOAT           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    CHAR            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    BOOL            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    STRING          reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    RGTBRAC         reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)
    RETURN          reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2 .)


state 211

    (22) conditionaux2 -> codeNextIf . ELSEIF conditionaux

    ELSEIF          shift and go to state 215


state 212

    (23) conditionaux2 -> empty .

    ELSE            reduce using rule 23 (conditionaux2 -> empty .)
    IF              reduce using rule 23 (conditionaux2 -> empty .)
    WHILE           reduce using rule 23 (conditionaux2 -> empty .)
    PRINT           reduce using rule 23 (conditionaux2 -> empty .)
    READ            reduce using rule 23 (conditionaux2 -> empty .)
    ID              reduce using rule 23 (conditionaux2 -> empty .)
    INT             reduce using rule 23 (conditionaux2 -> empty .)
    FLOAT           reduce using rule 23 (conditionaux2 -> empty .)
    CHAR            reduce using rule 23 (conditionaux2 -> empty .)
    BOOL            reduce using rule 23 (conditionaux2 -> empty .)
    STRING          reduce using rule 23 (conditionaux2 -> empty .)
    RGTBRAC         reduce using rule 23 (conditionaux2 -> empty .)
    RETURN          reduce using rule 23 (conditionaux2 -> empty .)


state 213

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp . codeReturnQuad SEMICOLON RGTBRAC
    (88) codeReturnQuad -> .

    SEMICOLON       reduce using rule 88 (codeReturnQuad -> .)

    codeReturnQuad                 shift and go to state 216

state 214

    (52) loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .

    IF              reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    WHILE           reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    PRINT           reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    READ            reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    ID              reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    INT             reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    FLOAT           reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    CHAR            reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    BOOL            reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    STRING          reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    RGTBRAC         reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)
    RETURN          reduce using rule 52 (loop -> WHILE codeWhileCondition LFTPAREN expression RGTPAREN codeGOTOF block codeGOTOWhile .)


state 215

    (22) conditionaux2 -> codeNextIf ELSEIF . conditionaux
    (21) conditionaux -> . LFTPAREN expression RGTPAREN codeGOTOF block conditionaux2

    LFTPAREN        shift and go to state 138

    conditionaux                   shift and go to state 217

state 216

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad . SEMICOLON RGTBRAC

    SEMICOLON       shift and go to state 218


state 217

    (22) conditionaux2 -> codeNextIf ELSEIF conditionaux .

    ELSE            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    IF              reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    WHILE           reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    PRINT           reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    READ            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    ID              reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    INT             reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    FLOAT           reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    CHAR            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    BOOL            reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    STRING          reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    RGTBRAC         reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)
    RETURN          reduce using rule 22 (conditionaux2 -> codeNextIf ELSEIF conditionaux .)


state 218

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON . RGTBRAC

    RGTBRAC         shift and go to state 219


state 219

    (14) blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC .

    FUNCTION        reduce using rule 14 (blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC .)
    PRIOMH          reduce using rule 14 (blockreturn -> LFTBRAC blockneutral RETURN exp codeReturnQuad SEMICOLON RGTBRAC .)

