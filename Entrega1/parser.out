Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC
Rule 2     auxprogram -> vars auxprogram
Rule 3     auxprogram -> function auxprogram
Rule 4     auxprogram -> empty
Rule 5     array -> ID LFTBRACSQR exp RGTBRACSQR
Rule 6     arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR
Rule 7     arrayvaluesaux -> constant
Rule 8     arrayvaluesaux -> constant COMMA arrayvaluesaux
Rule 9     assignment -> assignmentaux EQUAL expression SEMICOLON
Rule 10    assignmentaux -> ID
Rule 11    assignmentaux -> array
Rule 12    blockreturn -> LFTBRAC blockreturnaux RGTBRAC
Rule 13    blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC
Rule 14    blockreturnaux -> statement blockreturnaux
Rule 15    blockreturnaux -> empty
Rule 16    block -> LFTBRAC blockaux RGTBRAC
Rule 17    blockaux -> statement blockaux
Rule 18    blockaux -> empty
Rule 19    condition -> IF conditionaux
Rule 20    condition -> IF conditionaux ELSE block
Rule 21    conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2
Rule 22    conditionaux2 -> ELSEIF conditionaux
Rule 23    conditionaux2 -> empty
Rule 24    constant -> ID
Rule 25    constant -> array
Rule 26    constant -> cteN
Rule 27    constant -> cteS
Rule 28    constant -> TRUE
Rule 29    constant -> FALSE
Rule 30    constant -> call2
Rule 31    cteN -> FLOAT
Rule 32    cteN -> INT
Rule 33    cteS -> STRING
Rule 34    exp -> term expaux
Rule 35    expaux -> PLUS exp expaux
Rule 36    expaux -> MINUS exp expaux
Rule 37    expaux -> empty
Rule 38    factor -> LFTPAREN expression RGTPAREN
Rule 39    factor -> constant
Rule 40    factor -> MINUS constant
Rule 41    factor -> PLUS constant
Rule 42    expression -> exp
Rule 43    expression -> exp expressionaux exp
Rule 44    expressionaux -> AND
Rule 45    expressionaux -> DOUBEQUAL
Rule 46    expressionaux -> NOT
Rule 47    expressionaux -> OR
Rule 48    expressionaux -> LESSTHANEQUAL
Rule 49    expressionaux -> GREATTHANEQUAL
Rule 50    expressionaux -> GREATTHAN
Rule 51    expressionaux -> LESSTHAN
Rule 52    loop -> WHILE LFTPAREN expression RGTPAREN block
Rule 53    write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON
Rule 54    parameter -> type ID
Rule 55    parameter -> type ID COMMA parameter
Rule 56    parameter -> empty
Rule 57    term -> factor termaux
Rule 58    termaux -> MULTIPLICATION term termaux
Rule 59    termaux -> DIVISION term termaux
Rule 60    termaux -> empty
Rule 61    statement -> assignment
Rule 62    statement -> condition
Rule 63    statement -> loop
Rule 64    statement -> vars
Rule 65    statement -> write
Rule 66    statement -> read
Rule 67    statement -> call
Rule 68    type -> INT
Rule 69    type -> FLOAT
Rule 70    type -> CHAR
Rule 71    type -> BOOL
Rule 72    type -> STRING
Rule 73    main -> PRIOMH block
Rule 74    function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
Rule 75    functionaux -> VOID
Rule 76    functionaux -> type
Rule 77    vars -> type varsaux
Rule 78    varsaux -> ID EQUAL expression SEMICOLON
Rule 79    varsaux -> ID EQUAL expression COMMA varsaux
Rule 80    varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
Rule 81    varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux
Rule 82    call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON
Rule 83    callaux -> COMMA exp callaux
Rule 84    callaux -> empty
Rule 85    call2 -> ID LFTPAREN exp callaux RGTPAREN
Rule 86    read -> READ LFTPAREN readaux RGTPAREN SEMICOLON
Rule 87    readaux -> ID
Rule 88    readaux -> array
Rule 89    empty -> <empty>

Terminals, with rules where they appear

AND                  : 44
BOOL                 : 71
CHAR                 : 70
COMMA                : 8 55 79 81 83
DIVISION             : 59
DOUBEQUAL            : 45
ELSE                 : 20
ELSEIF               : 22
EQUAL                : 9 78 79 80 81
FALSE                : 29
FLOAT                : 31 69
FUNCTION             : 74
GREATTHAN            : 50
GREATTHANEQUAL       : 49
ID                   : 1 5 10 24 54 55 74 78 79 80 81 82 85 87
IF                   : 19 20
INT                  : 32 68 80 81
LESSTHAN             : 51
LESSTHANEQUAL        : 48
LFTBRAC              : 1 12 13 16
LFTBRACSQR           : 5 6 80 81
LFTPAREN             : 21 38 52 53 74 82 85 86
MINUS                : 36 40
MULTIPLICATION       : 58
NOT                  : 46
OR                   : 47
PLUS                 : 35 41
PRINT                : 53
PRIOMH               : 73
PROGRAM              : 1
READ                 : 86
RETURN               : 13
RGTBRAC              : 1 12 13 16
RGTBRACSQR           : 5 6 80 81
RGTPAREN             : 21 38 52 53 74 82 85 86
SEMICOLON            : 9 13 53 78 80 82 86
STRING               : 33 72
TRUE                 : 28
VOID                 : 75
WHILE                : 52
error                : 

Nonterminals, with rules where they appear

array                : 11 25 88
arrayvalues          : 80 81
arrayvaluesaux       : 6 8
assignment           : 61
assignmentaux        : 9
auxprogram           : 1 2 3
block                : 20 21 52 73
blockaux             : 16 17
blockreturn          : 74
blockreturnaux       : 12 13 14
call                 : 67
call2                : 30
callaux              : 82 83 85
condition            : 62
conditionaux         : 19 20 22
conditionaux2        : 21
constant             : 7 8 39 40 41 53
cteN                 : 26
cteS                 : 27
empty                : 4 15 18 23 37 56 60 84
exp                  : 5 13 35 36 42 43 43 82 83 85
expaux               : 34 35 36
expression           : 9 21 38 52 78 79
expressionaux        : 43
factor               : 57
function             : 3
functionaux          : 74
loop                 : 63
main                 : 1
parameter            : 55 74
program              : 0
read                 : 66
readaux              : 86
statement            : 14 17
term                 : 34 58 59
termaux              : 57 58 59
type                 : 54 55 76 77
vars                 : 2 64
varsaux              : 77 79 81
write                : 65

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LFTBRAC auxprogram main RGTBRAC

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LFTBRAC auxprogram main RGTBRAC

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LFTBRAC auxprogram main RGTBRAC

    LFTBRAC         shift and go to state 4


state 4

    (1) program -> PROGRAM ID LFTBRAC . auxprogram main RGTBRAC
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> . empty
    (77) vars -> . type varsaux
    (74) function -> . FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (89) empty -> .
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING

    FUNCTION        shift and go to state 5
    PRIOMH          reduce using rule 89 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    function                       shift and go to state 10
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 8
    type                           shift and go to state 13
    empty                          shift and go to state 9

state 5

    (74) function -> FUNCTION . functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (75) functionaux -> . VOID
    (76) functionaux -> . type
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING

    VOID            shift and go to state 18
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    functionaux                    shift and go to state 16
    type                           shift and go to state 17

state 6

    (2) auxprogram -> vars . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> . empty
    (77) vars -> . type varsaux
    (74) function -> . FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (89) empty -> .
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING

    FUNCTION        shift and go to state 5
    PRIOMH          reduce using rule 89 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    function                       shift and go to state 10
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 19
    type                           shift and go to state 13
    empty                          shift and go to state 9

state 7

    (70) type -> CHAR .

    ID              reduce using rule 70 (type -> CHAR .)


state 8

    (1) program -> PROGRAM ID LFTBRAC auxprogram . main RGTBRAC
    (73) main -> . PRIOMH block

    PRIOMH          shift and go to state 20

    main                           shift and go to state 21

state 9

    (4) auxprogram -> empty .

    PRIOMH          reduce using rule 4 (auxprogram -> empty .)


state 10

    (3) auxprogram -> function . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> . empty
    (77) vars -> . type varsaux
    (74) function -> . FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (89) empty -> .
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING

    FUNCTION        shift and go to state 5
    PRIOMH          reduce using rule 89 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    function                       shift and go to state 10
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 22
    type                           shift and go to state 13
    empty                          shift and go to state 9

state 11

    (72) type -> STRING .

    ID              reduce using rule 72 (type -> STRING .)


state 12

    (68) type -> INT .

    ID              reduce using rule 68 (type -> INT .)


state 13

    (77) vars -> type . varsaux
    (78) varsaux -> . ID EQUAL expression SEMICOLON
    (79) varsaux -> . ID EQUAL expression COMMA varsaux
    (80) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (81) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 24

state 14

    (69) type -> FLOAT .

    ID              reduce using rule 69 (type -> FLOAT .)


state 15

    (71) type -> BOOL .

    ID              reduce using rule 71 (type -> BOOL .)


state 16

    (74) function -> FUNCTION functionaux . ID LFTPAREN parameter RGTPAREN blockreturn

    ID              shift and go to state 25


state 17

    (76) functionaux -> type .

    ID              reduce using rule 76 (functionaux -> type .)


state 18

    (75) functionaux -> VOID .

    ID              reduce using rule 75 (functionaux -> VOID .)


state 19

    (2) auxprogram -> vars auxprogram .

    PRIOMH          reduce using rule 2 (auxprogram -> vars auxprogram .)


state 20

    (73) main -> PRIOMH . block
    (16) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 27

state 21

    (1) program -> PROGRAM ID LFTBRAC auxprogram main . RGTBRAC

    RGTBRAC         shift and go to state 28


state 22

    (3) auxprogram -> function auxprogram .

    PRIOMH          reduce using rule 3 (auxprogram -> function auxprogram .)


state 23

    (78) varsaux -> ID . EQUAL expression SEMICOLON
    (79) varsaux -> ID . EQUAL expression COMMA varsaux
    (80) varsaux -> ID . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (81) varsaux -> ID . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    EQUAL           shift and go to state 29
    LFTBRACSQR      shift and go to state 30


state 24

    (77) vars -> type varsaux .

    IF              reduce using rule 77 (vars -> type varsaux .)
    WHILE           reduce using rule 77 (vars -> type varsaux .)
    PRINT           reduce using rule 77 (vars -> type varsaux .)
    READ            reduce using rule 77 (vars -> type varsaux .)
    ID              reduce using rule 77 (vars -> type varsaux .)
    INT             reduce using rule 77 (vars -> type varsaux .)
    FLOAT           reduce using rule 77 (vars -> type varsaux .)
    CHAR            reduce using rule 77 (vars -> type varsaux .)
    BOOL            reduce using rule 77 (vars -> type varsaux .)
    STRING          reduce using rule 77 (vars -> type varsaux .)
    RGTBRAC         reduce using rule 77 (vars -> type varsaux .)
    FUNCTION        reduce using rule 77 (vars -> type varsaux .)
    PRIOMH          reduce using rule 77 (vars -> type varsaux .)
    RETURN          reduce using rule 77 (vars -> type varsaux .)


state 25

    (74) function -> FUNCTION functionaux ID . LFTPAREN parameter RGTPAREN blockreturn

    LFTPAREN        shift and go to state 31


state 26

    (16) block -> LFTBRAC . blockaux RGTBRAC
    (17) blockaux -> . statement blockaux
    (18) blockaux -> . empty
    (61) statement -> . assignment
    (62) statement -> . condition
    (63) statement -> . loop
    (64) statement -> . vars
    (65) statement -> . write
    (66) statement -> . read
    (67) statement -> . call
    (89) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux
    (20) condition -> . IF conditionaux ELSE block
    (52) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (77) vars -> . type varsaux
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (86) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    empty                          shift and go to state 41
    call                           shift and go to state 39
    condition                      shift and go to state 46
    statement                      shift and go to state 40
    type                           shift and go to state 13
    array                          shift and go to state 36
    loop                           shift and go to state 48
    blockaux                       shift and go to state 42

state 27

    (73) main -> PRIOMH block .

    RGTBRAC         reduce using rule 73 (main -> PRIOMH block .)


state 28

    (1) program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .

    $end            reduce using rule 1 (program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .)


state 29

    (78) varsaux -> ID EQUAL . expression SEMICOLON
    (79) varsaux -> ID EQUAL . expression COMMA varsaux
    (42) expression -> . exp
    (43) expression -> . exp expressionaux exp
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call2                          shift and go to state 54
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 66

state 30

    (80) varsaux -> ID LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (81) varsaux -> ID LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    INT             shift and go to state 67


state 31

    (74) function -> FUNCTION functionaux ID LFTPAREN . parameter RGTPAREN blockreturn
    (54) parameter -> . type ID
    (55) parameter -> . type ID COMMA parameter
    (56) parameter -> . empty
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING
    (89) empty -> .

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 89 (empty -> .)

    parameter                      shift and go to state 69
    empty                          shift and go to state 70
    type                           shift and go to state 68

state 32

    (64) statement -> vars .

    IF              reduce using rule 64 (statement -> vars .)
    WHILE           reduce using rule 64 (statement -> vars .)
    PRINT           reduce using rule 64 (statement -> vars .)
    READ            reduce using rule 64 (statement -> vars .)
    ID              reduce using rule 64 (statement -> vars .)
    INT             reduce using rule 64 (statement -> vars .)
    FLOAT           reduce using rule 64 (statement -> vars .)
    CHAR            reduce using rule 64 (statement -> vars .)
    BOOL            reduce using rule 64 (statement -> vars .)
    STRING          reduce using rule 64 (statement -> vars .)
    RGTBRAC         reduce using rule 64 (statement -> vars .)
    RETURN          reduce using rule 64 (statement -> vars .)


state 33

    (86) read -> READ . LFTPAREN readaux RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 71


state 34

    (52) loop -> WHILE . LFTPAREN expression RGTPAREN block

    LFTPAREN        shift and go to state 72


state 35

    (53) write -> PRINT . LFTPAREN constant RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 73


state 36

    (11) assignmentaux -> array .

    EQUAL           reduce using rule 11 (assignmentaux -> array .)


state 37

    (65) statement -> write .

    IF              reduce using rule 65 (statement -> write .)
    WHILE           reduce using rule 65 (statement -> write .)
    PRINT           reduce using rule 65 (statement -> write .)
    READ            reduce using rule 65 (statement -> write .)
    ID              reduce using rule 65 (statement -> write .)
    INT             reduce using rule 65 (statement -> write .)
    FLOAT           reduce using rule 65 (statement -> write .)
    CHAR            reduce using rule 65 (statement -> write .)
    BOOL            reduce using rule 65 (statement -> write .)
    STRING          reduce using rule 65 (statement -> write .)
    RGTBRAC         reduce using rule 65 (statement -> write .)
    RETURN          reduce using rule 65 (statement -> write .)


state 38

    (66) statement -> read .

    IF              reduce using rule 66 (statement -> read .)
    WHILE           reduce using rule 66 (statement -> read .)
    PRINT           reduce using rule 66 (statement -> read .)
    READ            reduce using rule 66 (statement -> read .)
    ID              reduce using rule 66 (statement -> read .)
    INT             reduce using rule 66 (statement -> read .)
    FLOAT           reduce using rule 66 (statement -> read .)
    CHAR            reduce using rule 66 (statement -> read .)
    BOOL            reduce using rule 66 (statement -> read .)
    STRING          reduce using rule 66 (statement -> read .)
    RGTBRAC         reduce using rule 66 (statement -> read .)
    RETURN          reduce using rule 66 (statement -> read .)


state 39

    (67) statement -> call .

    IF              reduce using rule 67 (statement -> call .)
    WHILE           reduce using rule 67 (statement -> call .)
    PRINT           reduce using rule 67 (statement -> call .)
    READ            reduce using rule 67 (statement -> call .)
    ID              reduce using rule 67 (statement -> call .)
    INT             reduce using rule 67 (statement -> call .)
    FLOAT           reduce using rule 67 (statement -> call .)
    CHAR            reduce using rule 67 (statement -> call .)
    BOOL            reduce using rule 67 (statement -> call .)
    STRING          reduce using rule 67 (statement -> call .)
    RGTBRAC         reduce using rule 67 (statement -> call .)
    RETURN          reduce using rule 67 (statement -> call .)


state 40

    (17) blockaux -> statement . blockaux
    (17) blockaux -> . statement blockaux
    (18) blockaux -> . empty
    (61) statement -> . assignment
    (62) statement -> . condition
    (63) statement -> . loop
    (64) statement -> . vars
    (65) statement -> . write
    (66) statement -> . read
    (67) statement -> . call
    (89) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux
    (20) condition -> . IF conditionaux ELSE block
    (52) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (77) vars -> . type varsaux
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (86) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    empty                          shift and go to state 41
    call                           shift and go to state 39
    condition                      shift and go to state 46
    statement                      shift and go to state 40
    type                           shift and go to state 13
    array                          shift and go to state 36
    loop                           shift and go to state 48
    blockaux                       shift and go to state 74

state 41

    (18) blockaux -> empty .

    RGTBRAC         reduce using rule 18 (blockaux -> empty .)


state 42

    (16) block -> LFTBRAC blockaux . RGTBRAC

    RGTBRAC         shift and go to state 75


state 43

    (61) statement -> assignment .

    IF              reduce using rule 61 (statement -> assignment .)
    WHILE           reduce using rule 61 (statement -> assignment .)
    PRINT           reduce using rule 61 (statement -> assignment .)
    READ            reduce using rule 61 (statement -> assignment .)
    ID              reduce using rule 61 (statement -> assignment .)
    INT             reduce using rule 61 (statement -> assignment .)
    FLOAT           reduce using rule 61 (statement -> assignment .)
    CHAR            reduce using rule 61 (statement -> assignment .)
    BOOL            reduce using rule 61 (statement -> assignment .)
    STRING          reduce using rule 61 (statement -> assignment .)
    RGTBRAC         reduce using rule 61 (statement -> assignment .)
    RETURN          reduce using rule 61 (statement -> assignment .)


state 44

    (9) assignment -> assignmentaux . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 76


state 45

    (82) call -> ID . LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    LFTPAREN        shift and go to state 77
    EQUAL           reduce using rule 10 (assignmentaux -> ID .)
    LFTBRACSQR      shift and go to state 78


state 46

    (62) statement -> condition .

    IF              reduce using rule 62 (statement -> condition .)
    WHILE           reduce using rule 62 (statement -> condition .)
    PRINT           reduce using rule 62 (statement -> condition .)
    READ            reduce using rule 62 (statement -> condition .)
    ID              reduce using rule 62 (statement -> condition .)
    INT             reduce using rule 62 (statement -> condition .)
    FLOAT           reduce using rule 62 (statement -> condition .)
    CHAR            reduce using rule 62 (statement -> condition .)
    BOOL            reduce using rule 62 (statement -> condition .)
    STRING          reduce using rule 62 (statement -> condition .)
    RGTBRAC         reduce using rule 62 (statement -> condition .)
    RETURN          reduce using rule 62 (statement -> condition .)


state 47

    (19) condition -> IF . conditionaux
    (20) condition -> IF . conditionaux ELSE block
    (21) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 79

    conditionaux                   shift and go to state 80

state 48

    (63) statement -> loop .

    IF              reduce using rule 63 (statement -> loop .)
    WHILE           reduce using rule 63 (statement -> loop .)
    PRINT           reduce using rule 63 (statement -> loop .)
    READ            reduce using rule 63 (statement -> loop .)
    ID              reduce using rule 63 (statement -> loop .)
    INT             reduce using rule 63 (statement -> loop .)
    FLOAT           reduce using rule 63 (statement -> loop .)
    CHAR            reduce using rule 63 (statement -> loop .)
    BOOL            reduce using rule 63 (statement -> loop .)
    STRING          reduce using rule 63 (statement -> loop .)
    RGTBRAC         reduce using rule 63 (statement -> loop .)
    RETURN          reduce using rule 63 (statement -> loop .)


state 49

    (39) factor -> constant .

    MULTIPLICATION  reduce using rule 39 (factor -> constant .)
    DIVISION        reduce using rule 39 (factor -> constant .)
    PLUS            reduce using rule 39 (factor -> constant .)
    MINUS           reduce using rule 39 (factor -> constant .)
    COMMA           reduce using rule 39 (factor -> constant .)
    RGTPAREN        reduce using rule 39 (factor -> constant .)
    AND             reduce using rule 39 (factor -> constant .)
    DOUBEQUAL       reduce using rule 39 (factor -> constant .)
    NOT             reduce using rule 39 (factor -> constant .)
    OR              reduce using rule 39 (factor -> constant .)
    LESSTHANEQUAL   reduce using rule 39 (factor -> constant .)
    GREATTHANEQUAL  reduce using rule 39 (factor -> constant .)
    GREATTHAN       reduce using rule 39 (factor -> constant .)
    LESSTHAN        reduce using rule 39 (factor -> constant .)
    SEMICOLON       reduce using rule 39 (factor -> constant .)
    RGTBRACSQR      reduce using rule 39 (factor -> constant .)


state 50

    (27) constant -> cteS .

    MULTIPLICATION  reduce using rule 27 (constant -> cteS .)
    DIVISION        reduce using rule 27 (constant -> cteS .)
    PLUS            reduce using rule 27 (constant -> cteS .)
    MINUS           reduce using rule 27 (constant -> cteS .)
    AND             reduce using rule 27 (constant -> cteS .)
    DOUBEQUAL       reduce using rule 27 (constant -> cteS .)
    NOT             reduce using rule 27 (constant -> cteS .)
    OR              reduce using rule 27 (constant -> cteS .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> cteS .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> cteS .)
    GREATTHAN       reduce using rule 27 (constant -> cteS .)
    LESSTHAN        reduce using rule 27 (constant -> cteS .)
    SEMICOLON       reduce using rule 27 (constant -> cteS .)
    COMMA           reduce using rule 27 (constant -> cteS .)
    RGTPAREN        reduce using rule 27 (constant -> cteS .)
    RGTBRACSQR      reduce using rule 27 (constant -> cteS .)


state 51

    (25) constant -> array .

    MULTIPLICATION  reduce using rule 25 (constant -> array .)
    DIVISION        reduce using rule 25 (constant -> array .)
    PLUS            reduce using rule 25 (constant -> array .)
    MINUS           reduce using rule 25 (constant -> array .)
    AND             reduce using rule 25 (constant -> array .)
    DOUBEQUAL       reduce using rule 25 (constant -> array .)
    NOT             reduce using rule 25 (constant -> array .)
    OR              reduce using rule 25 (constant -> array .)
    LESSTHANEQUAL   reduce using rule 25 (constant -> array .)
    GREATTHANEQUAL  reduce using rule 25 (constant -> array .)
    GREATTHAN       reduce using rule 25 (constant -> array .)
    LESSTHAN        reduce using rule 25 (constant -> array .)
    SEMICOLON       reduce using rule 25 (constant -> array .)
    COMMA           reduce using rule 25 (constant -> array .)
    RGTPAREN        reduce using rule 25 (constant -> array .)
    RGTBRACSQR      reduce using rule 25 (constant -> array .)


state 52

    (26) constant -> cteN .

    MULTIPLICATION  reduce using rule 26 (constant -> cteN .)
    DIVISION        reduce using rule 26 (constant -> cteN .)
    PLUS            reduce using rule 26 (constant -> cteN .)
    MINUS           reduce using rule 26 (constant -> cteN .)
    AND             reduce using rule 26 (constant -> cteN .)
    DOUBEQUAL       reduce using rule 26 (constant -> cteN .)
    NOT             reduce using rule 26 (constant -> cteN .)
    OR              reduce using rule 26 (constant -> cteN .)
    LESSTHANEQUAL   reduce using rule 26 (constant -> cteN .)
    GREATTHANEQUAL  reduce using rule 26 (constant -> cteN .)
    GREATTHAN       reduce using rule 26 (constant -> cteN .)
    LESSTHAN        reduce using rule 26 (constant -> cteN .)
    SEMICOLON       reduce using rule 26 (constant -> cteN .)
    COMMA           reduce using rule 26 (constant -> cteN .)
    RGTPAREN        reduce using rule 26 (constant -> cteN .)
    RGTBRACSQR      reduce using rule 26 (constant -> cteN .)


state 53

    (40) factor -> MINUS . constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    constant                       shift and go to state 81
    call2                          shift and go to state 54
    array                          shift and go to state 51
    cteN                           shift and go to state 52

state 54

    (30) constant -> call2 .

    MULTIPLICATION  reduce using rule 30 (constant -> call2 .)
    DIVISION        reduce using rule 30 (constant -> call2 .)
    PLUS            reduce using rule 30 (constant -> call2 .)
    MINUS           reduce using rule 30 (constant -> call2 .)
    AND             reduce using rule 30 (constant -> call2 .)
    DOUBEQUAL       reduce using rule 30 (constant -> call2 .)
    NOT             reduce using rule 30 (constant -> call2 .)
    OR              reduce using rule 30 (constant -> call2 .)
    LESSTHANEQUAL   reduce using rule 30 (constant -> call2 .)
    GREATTHANEQUAL  reduce using rule 30 (constant -> call2 .)
    GREATTHAN       reduce using rule 30 (constant -> call2 .)
    LESSTHAN        reduce using rule 30 (constant -> call2 .)
    SEMICOLON       reduce using rule 30 (constant -> call2 .)
    COMMA           reduce using rule 30 (constant -> call2 .)
    RGTPAREN        reduce using rule 30 (constant -> call2 .)
    RGTBRACSQR      reduce using rule 30 (constant -> call2 .)


state 55

    (28) constant -> TRUE .

    MULTIPLICATION  reduce using rule 28 (constant -> TRUE .)
    DIVISION        reduce using rule 28 (constant -> TRUE .)
    PLUS            reduce using rule 28 (constant -> TRUE .)
    MINUS           reduce using rule 28 (constant -> TRUE .)
    AND             reduce using rule 28 (constant -> TRUE .)
    DOUBEQUAL       reduce using rule 28 (constant -> TRUE .)
    NOT             reduce using rule 28 (constant -> TRUE .)
    OR              reduce using rule 28 (constant -> TRUE .)
    LESSTHANEQUAL   reduce using rule 28 (constant -> TRUE .)
    GREATTHANEQUAL  reduce using rule 28 (constant -> TRUE .)
    GREATTHAN       reduce using rule 28 (constant -> TRUE .)
    LESSTHAN        reduce using rule 28 (constant -> TRUE .)
    SEMICOLON       reduce using rule 28 (constant -> TRUE .)
    COMMA           reduce using rule 28 (constant -> TRUE .)
    RGTPAREN        reduce using rule 28 (constant -> TRUE .)
    RGTBRACSQR      reduce using rule 28 (constant -> TRUE .)


state 56

    (57) term -> factor . termaux
    (58) termaux -> . MULTIPLICATION term termaux
    (59) termaux -> . DIVISION term termaux
    (60) termaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    MULTIPLICATION  shift and go to state 83
    DIVISION        shift and go to state 82
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! MULTIPLICATION  [ reduce using rule 89 (empty -> .) ]
  ! DIVISION        [ reduce using rule 89 (empty -> .) ]

    termaux                        shift and go to state 84
    empty                          shift and go to state 85

state 57

    (41) factor -> PLUS . constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    constant                       shift and go to state 86
    call2                          shift and go to state 54
    array                          shift and go to state 51
    cteN                           shift and go to state 52

state 58

    (33) cteS -> STRING .

    MULTIPLICATION  reduce using rule 33 (cteS -> STRING .)
    DIVISION        reduce using rule 33 (cteS -> STRING .)
    PLUS            reduce using rule 33 (cteS -> STRING .)
    MINUS           reduce using rule 33 (cteS -> STRING .)
    SEMICOLON       reduce using rule 33 (cteS -> STRING .)
    COMMA           reduce using rule 33 (cteS -> STRING .)
    RGTPAREN        reduce using rule 33 (cteS -> STRING .)
    AND             reduce using rule 33 (cteS -> STRING .)
    DOUBEQUAL       reduce using rule 33 (cteS -> STRING .)
    NOT             reduce using rule 33 (cteS -> STRING .)
    OR              reduce using rule 33 (cteS -> STRING .)
    LESSTHANEQUAL   reduce using rule 33 (cteS -> STRING .)
    GREATTHANEQUAL  reduce using rule 33 (cteS -> STRING .)
    GREATTHAN       reduce using rule 33 (cteS -> STRING .)
    LESSTHAN        reduce using rule 33 (cteS -> STRING .)
    RGTBRACSQR      reduce using rule 33 (cteS -> STRING .)


state 59

    (38) factor -> LFTPAREN . expression RGTPAREN
    (42) expression -> . exp
    (43) expression -> . exp expressionaux exp
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call2                          shift and go to state 54
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 87

state 60

    (24) constant -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR
    (85) call2 -> ID . LFTPAREN exp callaux RGTPAREN

    MULTIPLICATION  reduce using rule 24 (constant -> ID .)
    DIVISION        reduce using rule 24 (constant -> ID .)
    PLUS            reduce using rule 24 (constant -> ID .)
    MINUS           reduce using rule 24 (constant -> ID .)
    AND             reduce using rule 24 (constant -> ID .)
    DOUBEQUAL       reduce using rule 24 (constant -> ID .)
    NOT             reduce using rule 24 (constant -> ID .)
    OR              reduce using rule 24 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 24 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 24 (constant -> ID .)
    GREATTHAN       reduce using rule 24 (constant -> ID .)
    LESSTHAN        reduce using rule 24 (constant -> ID .)
    SEMICOLON       reduce using rule 24 (constant -> ID .)
    COMMA           reduce using rule 24 (constant -> ID .)
    RGTPAREN        reduce using rule 24 (constant -> ID .)
    RGTBRACSQR      reduce using rule 24 (constant -> ID .)
    LFTBRACSQR      shift and go to state 78
    LFTPAREN        shift and go to state 88


state 61

    (34) exp -> term . expaux
    (35) expaux -> . PLUS exp expaux
    (36) expaux -> . MINUS exp expaux
    (37) expaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! PLUS            [ reduce using rule 89 (empty -> .) ]
  ! MINUS           [ reduce using rule 89 (empty -> .) ]

    expaux                         shift and go to state 89
    empty                          shift and go to state 92

state 62

    (29) constant -> FALSE .

    MULTIPLICATION  reduce using rule 29 (constant -> FALSE .)
    DIVISION        reduce using rule 29 (constant -> FALSE .)
    PLUS            reduce using rule 29 (constant -> FALSE .)
    MINUS           reduce using rule 29 (constant -> FALSE .)
    AND             reduce using rule 29 (constant -> FALSE .)
    DOUBEQUAL       reduce using rule 29 (constant -> FALSE .)
    NOT             reduce using rule 29 (constant -> FALSE .)
    OR              reduce using rule 29 (constant -> FALSE .)
    LESSTHANEQUAL   reduce using rule 29 (constant -> FALSE .)
    GREATTHANEQUAL  reduce using rule 29 (constant -> FALSE .)
    GREATTHAN       reduce using rule 29 (constant -> FALSE .)
    LESSTHAN        reduce using rule 29 (constant -> FALSE .)
    SEMICOLON       reduce using rule 29 (constant -> FALSE .)
    COMMA           reduce using rule 29 (constant -> FALSE .)
    RGTPAREN        reduce using rule 29 (constant -> FALSE .)
    RGTBRACSQR      reduce using rule 29 (constant -> FALSE .)


state 63

    (32) cteN -> INT .

    MULTIPLICATION  reduce using rule 32 (cteN -> INT .)
    DIVISION        reduce using rule 32 (cteN -> INT .)
    PLUS            reduce using rule 32 (cteN -> INT .)
    MINUS           reduce using rule 32 (cteN -> INT .)
    RGTBRACSQR      reduce using rule 32 (cteN -> INT .)
    AND             reduce using rule 32 (cteN -> INT .)
    DOUBEQUAL       reduce using rule 32 (cteN -> INT .)
    NOT             reduce using rule 32 (cteN -> INT .)
    OR              reduce using rule 32 (cteN -> INT .)
    LESSTHANEQUAL   reduce using rule 32 (cteN -> INT .)
    GREATTHANEQUAL  reduce using rule 32 (cteN -> INT .)
    GREATTHAN       reduce using rule 32 (cteN -> INT .)
    LESSTHAN        reduce using rule 32 (cteN -> INT .)
    SEMICOLON       reduce using rule 32 (cteN -> INT .)
    COMMA           reduce using rule 32 (cteN -> INT .)
    RGTPAREN        reduce using rule 32 (cteN -> INT .)


state 64

    (31) cteN -> FLOAT .

    MULTIPLICATION  reduce using rule 31 (cteN -> FLOAT .)
    DIVISION        reduce using rule 31 (cteN -> FLOAT .)
    PLUS            reduce using rule 31 (cteN -> FLOAT .)
    MINUS           reduce using rule 31 (cteN -> FLOAT .)
    RGTBRACSQR      reduce using rule 31 (cteN -> FLOAT .)
    AND             reduce using rule 31 (cteN -> FLOAT .)
    DOUBEQUAL       reduce using rule 31 (cteN -> FLOAT .)
    NOT             reduce using rule 31 (cteN -> FLOAT .)
    OR              reduce using rule 31 (cteN -> FLOAT .)
    LESSTHANEQUAL   reduce using rule 31 (cteN -> FLOAT .)
    GREATTHANEQUAL  reduce using rule 31 (cteN -> FLOAT .)
    GREATTHAN       reduce using rule 31 (cteN -> FLOAT .)
    LESSTHAN        reduce using rule 31 (cteN -> FLOAT .)
    SEMICOLON       reduce using rule 31 (cteN -> FLOAT .)
    COMMA           reduce using rule 31 (cteN -> FLOAT .)
    RGTPAREN        reduce using rule 31 (cteN -> FLOAT .)


state 65

    (42) expression -> exp .
    (43) expression -> exp . expressionaux exp
    (44) expressionaux -> . AND
    (45) expressionaux -> . DOUBEQUAL
    (46) expressionaux -> . NOT
    (47) expressionaux -> . OR
    (48) expressionaux -> . LESSTHANEQUAL
    (49) expressionaux -> . GREATTHANEQUAL
    (50) expressionaux -> . GREATTHAN
    (51) expressionaux -> . LESSTHAN

    RGTPAREN        reduce using rule 42 (expression -> exp .)
    SEMICOLON       reduce using rule 42 (expression -> exp .)
    COMMA           reduce using rule 42 (expression -> exp .)
    AND             shift and go to state 93
    DOUBEQUAL       shift and go to state 100
    NOT             shift and go to state 99
    OR              shift and go to state 101
    LESSTHANEQUAL   shift and go to state 97
    GREATTHANEQUAL  shift and go to state 95
    GREATTHAN       shift and go to state 96
    LESSTHAN        shift and go to state 98

    expressionaux                  shift and go to state 94

state 66

    (78) varsaux -> ID EQUAL expression . SEMICOLON
    (79) varsaux -> ID EQUAL expression . COMMA varsaux

    SEMICOLON       shift and go to state 102
    COMMA           shift and go to state 103


state 67

    (80) varsaux -> ID LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (81) varsaux -> ID LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    RGTBRACSQR      shift and go to state 104


state 68

    (54) parameter -> type . ID
    (55) parameter -> type . ID COMMA parameter

    ID              shift and go to state 105


state 69

    (74) function -> FUNCTION functionaux ID LFTPAREN parameter . RGTPAREN blockreturn

    RGTPAREN        shift and go to state 106


state 70

    (56) parameter -> empty .

    RGTPAREN        reduce using rule 56 (parameter -> empty .)


state 71

    (86) read -> READ LFTPAREN . readaux RGTPAREN SEMICOLON
    (87) readaux -> . ID
    (88) readaux -> . array
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    ID              shift and go to state 109

    readaux                        shift and go to state 107
    array                          shift and go to state 108

state 72

    (52) loop -> WHILE LFTPAREN . expression RGTPAREN block
    (42) expression -> . exp
    (43) expression -> . exp expressionaux exp
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call2                          shift and go to state 54
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 110

state 73

    (53) write -> PRINT LFTPAREN . constant RGTPAREN SEMICOLON
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    constant                       shift and go to state 111
    call2                          shift and go to state 54
    array                          shift and go to state 51
    cteN                           shift and go to state 52

state 74

    (17) blockaux -> statement blockaux .

    RGTBRAC         reduce using rule 17 (blockaux -> statement blockaux .)


state 75

    (16) block -> LFTBRAC blockaux RGTBRAC .

    RGTBRAC         reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    ELSEIF          reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    ELSE            reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    IF              reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    WHILE           reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    PRINT           reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    READ            reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    ID              reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    INT             reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    FLOAT           reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    CHAR            reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    BOOL            reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    STRING          reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)
    RETURN          reduce using rule 16 (block -> LFTBRAC blockaux RGTBRAC .)


state 76

    (9) assignment -> assignmentaux EQUAL . expression SEMICOLON
    (42) expression -> . exp
    (43) expression -> . exp expressionaux exp
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call2                          shift and go to state 54
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 112

state 77

    (82) call -> ID LFTPAREN . exp callaux RGTPAREN SEMICOLON
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 113
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 78

    (5) array -> ID LFTBRACSQR . exp RGTBRACSQR
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 114
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 79

    (21) conditionaux -> LFTPAREN . expression RGTPAREN block conditionaux2
    (42) expression -> . exp
    (43) expression -> . exp expressionaux exp
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call2                          shift and go to state 54
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 115

state 80

    (19) condition -> IF conditionaux .
    (20) condition -> IF conditionaux . ELSE block

    IF              reduce using rule 19 (condition -> IF conditionaux .)
    WHILE           reduce using rule 19 (condition -> IF conditionaux .)
    PRINT           reduce using rule 19 (condition -> IF conditionaux .)
    READ            reduce using rule 19 (condition -> IF conditionaux .)
    ID              reduce using rule 19 (condition -> IF conditionaux .)
    INT             reduce using rule 19 (condition -> IF conditionaux .)
    FLOAT           reduce using rule 19 (condition -> IF conditionaux .)
    CHAR            reduce using rule 19 (condition -> IF conditionaux .)
    BOOL            reduce using rule 19 (condition -> IF conditionaux .)
    STRING          reduce using rule 19 (condition -> IF conditionaux .)
    RGTBRAC         reduce using rule 19 (condition -> IF conditionaux .)
    RETURN          reduce using rule 19 (condition -> IF conditionaux .)
    ELSE            shift and go to state 116


state 81

    (40) factor -> MINUS constant .

    MULTIPLICATION  reduce using rule 40 (factor -> MINUS constant .)
    DIVISION        reduce using rule 40 (factor -> MINUS constant .)
    PLUS            reduce using rule 40 (factor -> MINUS constant .)
    MINUS           reduce using rule 40 (factor -> MINUS constant .)
    COMMA           reduce using rule 40 (factor -> MINUS constant .)
    RGTPAREN        reduce using rule 40 (factor -> MINUS constant .)
    AND             reduce using rule 40 (factor -> MINUS constant .)
    DOUBEQUAL       reduce using rule 40 (factor -> MINUS constant .)
    NOT             reduce using rule 40 (factor -> MINUS constant .)
    OR              reduce using rule 40 (factor -> MINUS constant .)
    LESSTHANEQUAL   reduce using rule 40 (factor -> MINUS constant .)
    GREATTHANEQUAL  reduce using rule 40 (factor -> MINUS constant .)
    GREATTHAN       reduce using rule 40 (factor -> MINUS constant .)
    LESSTHAN        reduce using rule 40 (factor -> MINUS constant .)
    SEMICOLON       reduce using rule 40 (factor -> MINUS constant .)
    RGTBRACSQR      reduce using rule 40 (factor -> MINUS constant .)


state 82

    (59) termaux -> DIVISION . term termaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 117
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 83

    (58) termaux -> MULTIPLICATION . term termaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 118
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 84

    (57) term -> factor termaux .

    PLUS            reduce using rule 57 (term -> factor termaux .)
    MINUS           reduce using rule 57 (term -> factor termaux .)
    AND             reduce using rule 57 (term -> factor termaux .)
    DOUBEQUAL       reduce using rule 57 (term -> factor termaux .)
    NOT             reduce using rule 57 (term -> factor termaux .)
    OR              reduce using rule 57 (term -> factor termaux .)
    LESSTHANEQUAL   reduce using rule 57 (term -> factor termaux .)
    GREATTHANEQUAL  reduce using rule 57 (term -> factor termaux .)
    GREATTHAN       reduce using rule 57 (term -> factor termaux .)
    LESSTHAN        reduce using rule 57 (term -> factor termaux .)
    RGTPAREN        reduce using rule 57 (term -> factor termaux .)
    SEMICOLON       reduce using rule 57 (term -> factor termaux .)
    RGTBRACSQR      reduce using rule 57 (term -> factor termaux .)
    COMMA           reduce using rule 57 (term -> factor termaux .)
    MULTIPLICATION  reduce using rule 57 (term -> factor termaux .)
    DIVISION        reduce using rule 57 (term -> factor termaux .)


state 85

    (60) termaux -> empty .

    MULTIPLICATION  reduce using rule 60 (termaux -> empty .)
    DIVISION        reduce using rule 60 (termaux -> empty .)
    PLUS            reduce using rule 60 (termaux -> empty .)
    MINUS           reduce using rule 60 (termaux -> empty .)
    AND             reduce using rule 60 (termaux -> empty .)
    DOUBEQUAL       reduce using rule 60 (termaux -> empty .)
    NOT             reduce using rule 60 (termaux -> empty .)
    OR              reduce using rule 60 (termaux -> empty .)
    LESSTHANEQUAL   reduce using rule 60 (termaux -> empty .)
    GREATTHANEQUAL  reduce using rule 60 (termaux -> empty .)
    GREATTHAN       reduce using rule 60 (termaux -> empty .)
    LESSTHAN        reduce using rule 60 (termaux -> empty .)
    SEMICOLON       reduce using rule 60 (termaux -> empty .)
    COMMA           reduce using rule 60 (termaux -> empty .)
    RGTPAREN        reduce using rule 60 (termaux -> empty .)
    RGTBRACSQR      reduce using rule 60 (termaux -> empty .)


state 86

    (41) factor -> PLUS constant .

    MULTIPLICATION  reduce using rule 41 (factor -> PLUS constant .)
    DIVISION        reduce using rule 41 (factor -> PLUS constant .)
    PLUS            reduce using rule 41 (factor -> PLUS constant .)
    MINUS           reduce using rule 41 (factor -> PLUS constant .)
    COMMA           reduce using rule 41 (factor -> PLUS constant .)
    RGTPAREN        reduce using rule 41 (factor -> PLUS constant .)
    AND             reduce using rule 41 (factor -> PLUS constant .)
    DOUBEQUAL       reduce using rule 41 (factor -> PLUS constant .)
    NOT             reduce using rule 41 (factor -> PLUS constant .)
    OR              reduce using rule 41 (factor -> PLUS constant .)
    LESSTHANEQUAL   reduce using rule 41 (factor -> PLUS constant .)
    GREATTHANEQUAL  reduce using rule 41 (factor -> PLUS constant .)
    GREATTHAN       reduce using rule 41 (factor -> PLUS constant .)
    LESSTHAN        reduce using rule 41 (factor -> PLUS constant .)
    SEMICOLON       reduce using rule 41 (factor -> PLUS constant .)
    RGTBRACSQR      reduce using rule 41 (factor -> PLUS constant .)


state 87

    (38) factor -> LFTPAREN expression . RGTPAREN

    RGTPAREN        shift and go to state 119


state 88

    (85) call2 -> ID LFTPAREN . exp callaux RGTPAREN
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 120
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 89

    (34) exp -> term expaux .

    COMMA           reduce using rule 34 (exp -> term expaux .)
    RGTPAREN        reduce using rule 34 (exp -> term expaux .)
    AND             reduce using rule 34 (exp -> term expaux .)
    DOUBEQUAL       reduce using rule 34 (exp -> term expaux .)
    NOT             reduce using rule 34 (exp -> term expaux .)
    OR              reduce using rule 34 (exp -> term expaux .)
    LESSTHANEQUAL   reduce using rule 34 (exp -> term expaux .)
    GREATTHANEQUAL  reduce using rule 34 (exp -> term expaux .)
    GREATTHAN       reduce using rule 34 (exp -> term expaux .)
    LESSTHAN        reduce using rule 34 (exp -> term expaux .)
    SEMICOLON       reduce using rule 34 (exp -> term expaux .)
    PLUS            reduce using rule 34 (exp -> term expaux .)
    MINUS           reduce using rule 34 (exp -> term expaux .)
    RGTBRACSQR      reduce using rule 34 (exp -> term expaux .)


state 90

    (35) expaux -> PLUS . exp expaux
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 121
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 91

    (36) expaux -> MINUS . exp expaux
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 122
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 92

    (37) expaux -> empty .

    PLUS            reduce using rule 37 (expaux -> empty .)
    MINUS           reduce using rule 37 (expaux -> empty .)
    AND             reduce using rule 37 (expaux -> empty .)
    DOUBEQUAL       reduce using rule 37 (expaux -> empty .)
    NOT             reduce using rule 37 (expaux -> empty .)
    OR              reduce using rule 37 (expaux -> empty .)
    LESSTHANEQUAL   reduce using rule 37 (expaux -> empty .)
    GREATTHANEQUAL  reduce using rule 37 (expaux -> empty .)
    GREATTHAN       reduce using rule 37 (expaux -> empty .)
    LESSTHAN        reduce using rule 37 (expaux -> empty .)
    SEMICOLON       reduce using rule 37 (expaux -> empty .)
    COMMA           reduce using rule 37 (expaux -> empty .)
    RGTPAREN        reduce using rule 37 (expaux -> empty .)
    RGTBRACSQR      reduce using rule 37 (expaux -> empty .)


state 93

    (44) expressionaux -> AND .

    LFTPAREN        reduce using rule 44 (expressionaux -> AND .)
    MINUS           reduce using rule 44 (expressionaux -> AND .)
    PLUS            reduce using rule 44 (expressionaux -> AND .)
    ID              reduce using rule 44 (expressionaux -> AND .)
    TRUE            reduce using rule 44 (expressionaux -> AND .)
    FALSE           reduce using rule 44 (expressionaux -> AND .)
    FLOAT           reduce using rule 44 (expressionaux -> AND .)
    INT             reduce using rule 44 (expressionaux -> AND .)
    STRING          reduce using rule 44 (expressionaux -> AND .)


state 94

    (43) expression -> exp expressionaux . exp
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call2                          shift and go to state 54
    exp                            shift and go to state 123
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 95

    (49) expressionaux -> GREATTHANEQUAL .

    LFTPAREN        reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    MINUS           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    PLUS            reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    ID              reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    TRUE            reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    FALSE           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    FLOAT           reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    INT             reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)
    STRING          reduce using rule 49 (expressionaux -> GREATTHANEQUAL .)


state 96

    (50) expressionaux -> GREATTHAN .

    LFTPAREN        reduce using rule 50 (expressionaux -> GREATTHAN .)
    MINUS           reduce using rule 50 (expressionaux -> GREATTHAN .)
    PLUS            reduce using rule 50 (expressionaux -> GREATTHAN .)
    ID              reduce using rule 50 (expressionaux -> GREATTHAN .)
    TRUE            reduce using rule 50 (expressionaux -> GREATTHAN .)
    FALSE           reduce using rule 50 (expressionaux -> GREATTHAN .)
    FLOAT           reduce using rule 50 (expressionaux -> GREATTHAN .)
    INT             reduce using rule 50 (expressionaux -> GREATTHAN .)
    STRING          reduce using rule 50 (expressionaux -> GREATTHAN .)


state 97

    (48) expressionaux -> LESSTHANEQUAL .

    LFTPAREN        reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    MINUS           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    PLUS            reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    ID              reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    TRUE            reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    FALSE           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    FLOAT           reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    INT             reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)
    STRING          reduce using rule 48 (expressionaux -> LESSTHANEQUAL .)


state 98

    (51) expressionaux -> LESSTHAN .

    LFTPAREN        reduce using rule 51 (expressionaux -> LESSTHAN .)
    MINUS           reduce using rule 51 (expressionaux -> LESSTHAN .)
    PLUS            reduce using rule 51 (expressionaux -> LESSTHAN .)
    ID              reduce using rule 51 (expressionaux -> LESSTHAN .)
    TRUE            reduce using rule 51 (expressionaux -> LESSTHAN .)
    FALSE           reduce using rule 51 (expressionaux -> LESSTHAN .)
    FLOAT           reduce using rule 51 (expressionaux -> LESSTHAN .)
    INT             reduce using rule 51 (expressionaux -> LESSTHAN .)
    STRING          reduce using rule 51 (expressionaux -> LESSTHAN .)


state 99

    (46) expressionaux -> NOT .

    LFTPAREN        reduce using rule 46 (expressionaux -> NOT .)
    MINUS           reduce using rule 46 (expressionaux -> NOT .)
    PLUS            reduce using rule 46 (expressionaux -> NOT .)
    ID              reduce using rule 46 (expressionaux -> NOT .)
    TRUE            reduce using rule 46 (expressionaux -> NOT .)
    FALSE           reduce using rule 46 (expressionaux -> NOT .)
    FLOAT           reduce using rule 46 (expressionaux -> NOT .)
    INT             reduce using rule 46 (expressionaux -> NOT .)
    STRING          reduce using rule 46 (expressionaux -> NOT .)


state 100

    (45) expressionaux -> DOUBEQUAL .

    LFTPAREN        reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    MINUS           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    PLUS            reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    ID              reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    TRUE            reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    FALSE           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    FLOAT           reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    INT             reduce using rule 45 (expressionaux -> DOUBEQUAL .)
    STRING          reduce using rule 45 (expressionaux -> DOUBEQUAL .)


state 101

    (47) expressionaux -> OR .

    LFTPAREN        reduce using rule 47 (expressionaux -> OR .)
    MINUS           reduce using rule 47 (expressionaux -> OR .)
    PLUS            reduce using rule 47 (expressionaux -> OR .)
    ID              reduce using rule 47 (expressionaux -> OR .)
    TRUE            reduce using rule 47 (expressionaux -> OR .)
    FALSE           reduce using rule 47 (expressionaux -> OR .)
    FLOAT           reduce using rule 47 (expressionaux -> OR .)
    INT             reduce using rule 47 (expressionaux -> OR .)
    STRING          reduce using rule 47 (expressionaux -> OR .)


state 102

    (78) varsaux -> ID EQUAL expression SEMICOLON .

    FUNCTION        reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    INT             reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    STRING          reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    PRIOMH          reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    READ            reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 78 (varsaux -> ID EQUAL expression SEMICOLON .)


state 103

    (79) varsaux -> ID EQUAL expression COMMA . varsaux
    (78) varsaux -> . ID EQUAL expression SEMICOLON
    (79) varsaux -> . ID EQUAL expression COMMA varsaux
    (80) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (81) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 124

state 104

    (80) varsaux -> ID LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvalues SEMICOLON
    (81) varsaux -> ID LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvalues COMMA varsaux

    EQUAL           shift and go to state 125


state 105

    (54) parameter -> type ID .
    (55) parameter -> type ID . COMMA parameter

    RGTPAREN        reduce using rule 54 (parameter -> type ID .)
    COMMA           shift and go to state 126


state 106

    (74) function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN . blockreturn
    (12) blockreturn -> . LFTBRAC blockreturnaux RGTBRAC
    (13) blockreturn -> . LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC

    LFTBRAC         shift and go to state 127

    blockreturn                    shift and go to state 128

state 107

    (86) read -> READ LFTPAREN readaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 129


state 108

    (88) readaux -> array .

    RGTPAREN        reduce using rule 88 (readaux -> array .)


state 109

    (87) readaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    RGTPAREN        reduce using rule 87 (readaux -> ID .)
    LFTBRACSQR      shift and go to state 78


state 110

    (52) loop -> WHILE LFTPAREN expression . RGTPAREN block

    RGTPAREN        shift and go to state 130


state 111

    (53) write -> PRINT LFTPAREN constant . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 131


state 112

    (9) assignment -> assignmentaux EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 132


state 113

    (82) call -> ID LFTPAREN exp . callaux RGTPAREN SEMICOLON
    (83) callaux -> . COMMA exp callaux
    (84) callaux -> . empty
    (89) empty -> .

    COMMA           shift and go to state 134
    RGTPAREN        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 135
    callaux                        shift and go to state 133

state 114

    (5) array -> ID LFTBRACSQR exp . RGTBRACSQR

    RGTBRACSQR      shift and go to state 136


state 115

    (21) conditionaux -> LFTPAREN expression . RGTPAREN block conditionaux2

    RGTPAREN        shift and go to state 137


state 116

    (20) condition -> IF conditionaux ELSE . block
    (16) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 138

state 117

    (59) termaux -> DIVISION term . termaux
    (58) termaux -> . MULTIPLICATION term termaux
    (59) termaux -> . DIVISION term termaux
    (60) termaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    MULTIPLICATION  shift and go to state 83
    DIVISION        shift and go to state 82
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! MULTIPLICATION  [ reduce using rule 89 (empty -> .) ]
  ! DIVISION        [ reduce using rule 89 (empty -> .) ]

    termaux                        shift and go to state 139
    empty                          shift and go to state 85

state 118

    (58) termaux -> MULTIPLICATION term . termaux
    (58) termaux -> . MULTIPLICATION term termaux
    (59) termaux -> . DIVISION term termaux
    (60) termaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    MULTIPLICATION  shift and go to state 83
    DIVISION        shift and go to state 82
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! MULTIPLICATION  [ reduce using rule 89 (empty -> .) ]
  ! DIVISION        [ reduce using rule 89 (empty -> .) ]

    termaux                        shift and go to state 140
    empty                          shift and go to state 85

state 119

    (38) factor -> LFTPAREN expression RGTPAREN .

    MULTIPLICATION  reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    DIVISION        reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    PLUS            reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    MINUS           reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    COMMA           reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    RGTPAREN        reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    AND             reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    DOUBEQUAL       reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    NOT             reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    OR              reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    GREATTHAN       reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    LESSTHAN        reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    SEMICOLON       reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)
    RGTBRACSQR      reduce using rule 38 (factor -> LFTPAREN expression RGTPAREN .)


state 120

    (85) call2 -> ID LFTPAREN exp . callaux RGTPAREN
    (83) callaux -> . COMMA exp callaux
    (84) callaux -> . empty
    (89) empty -> .

    COMMA           shift and go to state 134
    RGTPAREN        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 135
    callaux                        shift and go to state 141

state 121

    (35) expaux -> PLUS exp . expaux
    (35) expaux -> . PLUS exp expaux
    (36) expaux -> . MINUS exp expaux
    (37) expaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! PLUS            [ reduce using rule 89 (empty -> .) ]
  ! MINUS           [ reduce using rule 89 (empty -> .) ]

    expaux                         shift and go to state 142
    empty                          shift and go to state 92

state 122

    (36) expaux -> MINUS exp . expaux
    (35) expaux -> . PLUS exp expaux
    (36) expaux -> . MINUS exp expaux
    (37) expaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! PLUS            [ reduce using rule 89 (empty -> .) ]
  ! MINUS           [ reduce using rule 89 (empty -> .) ]

    expaux                         shift and go to state 143
    empty                          shift and go to state 92

state 123

    (43) expression -> exp expressionaux exp .

    RGTPAREN        reduce using rule 43 (expression -> exp expressionaux exp .)
    SEMICOLON       reduce using rule 43 (expression -> exp expressionaux exp .)
    COMMA           reduce using rule 43 (expression -> exp expressionaux exp .)


state 124

    (79) varsaux -> ID EQUAL expression COMMA varsaux .

    FUNCTION        reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    INT             reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    FLOAT           reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    CHAR            reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    BOOL            reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    STRING          reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    PRIOMH          reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    IF              reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    WHILE           reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    PRINT           reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    READ            reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    ID              reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    RGTBRAC         reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)
    RETURN          reduce using rule 79 (varsaux -> ID EQUAL expression COMMA varsaux .)


state 125

    (80) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvalues SEMICOLON
    (81) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvalues COMMA varsaux
    (6) arrayvalues -> . LFTBRACSQR arrayvaluesaux RGTBRACSQR

    LFTBRACSQR      shift and go to state 144

    arrayvalues                    shift and go to state 145

state 126

    (55) parameter -> type ID COMMA . parameter
    (54) parameter -> . type ID
    (55) parameter -> . type ID COMMA parameter
    (56) parameter -> . empty
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING
    (89) empty -> .

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 89 (empty -> .)

    parameter                      shift and go to state 146
    type                           shift and go to state 68
    empty                          shift and go to state 70

state 127

    (12) blockreturn -> LFTBRAC . blockreturnaux RGTBRAC
    (13) blockreturn -> LFTBRAC . blockreturnaux RETURN exp SEMICOLON RGTBRAC
    (14) blockreturnaux -> . statement blockreturnaux
    (15) blockreturnaux -> . empty
    (61) statement -> . assignment
    (62) statement -> . condition
    (63) statement -> . loop
    (64) statement -> . vars
    (65) statement -> . write
    (66) statement -> . read
    (67) statement -> . call
    (89) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux
    (20) condition -> . IF conditionaux ELSE block
    (52) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (77) vars -> . type varsaux
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (86) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    type                           shift and go to state 13
    loop                           shift and go to state 48
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    vars                           shift and go to state 32
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    call                           shift and go to state 39
    condition                      shift and go to state 46
    statement                      shift and go to state 147
    blockreturnaux                 shift and go to state 148
    array                          shift and go to state 36
    empty                          shift and go to state 149

state 128

    (74) function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .

    FUNCTION        reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    INT             reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    FLOAT           reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    CHAR            reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    BOOL            reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    STRING          reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    PRIOMH          reduce using rule 74 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)


state 129

    (86) read -> READ LFTPAREN readaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 150


state 130

    (52) loop -> WHILE LFTPAREN expression RGTPAREN . block
    (16) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 151

state 131

    (53) write -> PRINT LFTPAREN constant RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 152


state 132

    (9) assignment -> assignmentaux EQUAL expression SEMICOLON .

    IF              reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    READ            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    ID              reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    INT             reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    STRING          reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 9 (assignment -> assignmentaux EQUAL expression SEMICOLON .)


state 133

    (82) call -> ID LFTPAREN exp callaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 153


state 134

    (83) callaux -> COMMA . exp callaux
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 154
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 135

    (84) callaux -> empty .

    RGTPAREN        reduce using rule 84 (callaux -> empty .)


state 136

    (5) array -> ID LFTBRACSQR exp RGTBRACSQR .

    EQUAL           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MULTIPLICATION  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DIVISION        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    PLUS            reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MINUS           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    AND             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DOUBEQUAL       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    NOT             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    OR              reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHANEQUAL   reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHANEQUAL  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHAN       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHAN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    SEMICOLON       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    COMMA           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTPAREN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTBRACSQR      reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)


state 137

    (21) conditionaux -> LFTPAREN expression RGTPAREN . block conditionaux2
    (16) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 155

state 138

    (20) condition -> IF conditionaux ELSE block .

    IF              reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    WHILE           reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    PRINT           reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    READ            reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    ID              reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    INT             reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    FLOAT           reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    CHAR            reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    BOOL            reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    STRING          reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    RGTBRAC         reduce using rule 20 (condition -> IF conditionaux ELSE block .)
    RETURN          reduce using rule 20 (condition -> IF conditionaux ELSE block .)


state 139

    (59) termaux -> DIVISION term termaux .

    MULTIPLICATION  reduce using rule 59 (termaux -> DIVISION term termaux .)
    DIVISION        reduce using rule 59 (termaux -> DIVISION term termaux .)
    PLUS            reduce using rule 59 (termaux -> DIVISION term termaux .)
    MINUS           reduce using rule 59 (termaux -> DIVISION term termaux .)
    AND             reduce using rule 59 (termaux -> DIVISION term termaux .)
    DOUBEQUAL       reduce using rule 59 (termaux -> DIVISION term termaux .)
    NOT             reduce using rule 59 (termaux -> DIVISION term termaux .)
    OR              reduce using rule 59 (termaux -> DIVISION term termaux .)
    LESSTHANEQUAL   reduce using rule 59 (termaux -> DIVISION term termaux .)
    GREATTHANEQUAL  reduce using rule 59 (termaux -> DIVISION term termaux .)
    GREATTHAN       reduce using rule 59 (termaux -> DIVISION term termaux .)
    LESSTHAN        reduce using rule 59 (termaux -> DIVISION term termaux .)
    SEMICOLON       reduce using rule 59 (termaux -> DIVISION term termaux .)
    COMMA           reduce using rule 59 (termaux -> DIVISION term termaux .)
    RGTPAREN        reduce using rule 59 (termaux -> DIVISION term termaux .)
    RGTBRACSQR      reduce using rule 59 (termaux -> DIVISION term termaux .)


state 140

    (58) termaux -> MULTIPLICATION term termaux .

    MULTIPLICATION  reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    DIVISION        reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    PLUS            reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    MINUS           reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    AND             reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    DOUBEQUAL       reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    NOT             reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    OR              reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    LESSTHANEQUAL   reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    GREATTHANEQUAL  reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    GREATTHAN       reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    LESSTHAN        reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    SEMICOLON       reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    COMMA           reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    RGTPAREN        reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)
    RGTBRACSQR      reduce using rule 58 (termaux -> MULTIPLICATION term termaux .)


state 141

    (85) call2 -> ID LFTPAREN exp callaux . RGTPAREN

    RGTPAREN        shift and go to state 156


state 142

    (35) expaux -> PLUS exp expaux .

    PLUS            reduce using rule 35 (expaux -> PLUS exp expaux .)
    MINUS           reduce using rule 35 (expaux -> PLUS exp expaux .)
    AND             reduce using rule 35 (expaux -> PLUS exp expaux .)
    DOUBEQUAL       reduce using rule 35 (expaux -> PLUS exp expaux .)
    NOT             reduce using rule 35 (expaux -> PLUS exp expaux .)
    OR              reduce using rule 35 (expaux -> PLUS exp expaux .)
    LESSTHANEQUAL   reduce using rule 35 (expaux -> PLUS exp expaux .)
    GREATTHANEQUAL  reduce using rule 35 (expaux -> PLUS exp expaux .)
    GREATTHAN       reduce using rule 35 (expaux -> PLUS exp expaux .)
    LESSTHAN        reduce using rule 35 (expaux -> PLUS exp expaux .)
    SEMICOLON       reduce using rule 35 (expaux -> PLUS exp expaux .)
    COMMA           reduce using rule 35 (expaux -> PLUS exp expaux .)
    RGTPAREN        reduce using rule 35 (expaux -> PLUS exp expaux .)
    RGTBRACSQR      reduce using rule 35 (expaux -> PLUS exp expaux .)


state 143

    (36) expaux -> MINUS exp expaux .

    PLUS            reduce using rule 36 (expaux -> MINUS exp expaux .)
    MINUS           reduce using rule 36 (expaux -> MINUS exp expaux .)
    AND             reduce using rule 36 (expaux -> MINUS exp expaux .)
    DOUBEQUAL       reduce using rule 36 (expaux -> MINUS exp expaux .)
    NOT             reduce using rule 36 (expaux -> MINUS exp expaux .)
    OR              reduce using rule 36 (expaux -> MINUS exp expaux .)
    LESSTHANEQUAL   reduce using rule 36 (expaux -> MINUS exp expaux .)
    GREATTHANEQUAL  reduce using rule 36 (expaux -> MINUS exp expaux .)
    GREATTHAN       reduce using rule 36 (expaux -> MINUS exp expaux .)
    LESSTHAN        reduce using rule 36 (expaux -> MINUS exp expaux .)
    SEMICOLON       reduce using rule 36 (expaux -> MINUS exp expaux .)
    COMMA           reduce using rule 36 (expaux -> MINUS exp expaux .)
    RGTPAREN        reduce using rule 36 (expaux -> MINUS exp expaux .)
    RGTBRACSQR      reduce using rule 36 (expaux -> MINUS exp expaux .)


state 144

    (6) arrayvalues -> LFTBRACSQR . arrayvaluesaux RGTBRACSQR
    (7) arrayvaluesaux -> . constant
    (8) arrayvaluesaux -> . constant COMMA arrayvaluesaux
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    constant                       shift and go to state 157
    call2                          shift and go to state 54
    array                          shift and go to state 51
    cteN                           shift and go to state 52
    arrayvaluesaux                 shift and go to state 158

state 145

    (80) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues . SEMICOLON
    (81) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues . COMMA varsaux

    SEMICOLON       shift and go to state 159
    COMMA           shift and go to state 160


state 146

    (55) parameter -> type ID COMMA parameter .

    RGTPAREN        reduce using rule 55 (parameter -> type ID COMMA parameter .)


state 147

    (14) blockreturnaux -> statement . blockreturnaux
    (14) blockreturnaux -> . statement blockreturnaux
    (15) blockreturnaux -> . empty
    (61) statement -> . assignment
    (62) statement -> . condition
    (63) statement -> . loop
    (64) statement -> . vars
    (65) statement -> . write
    (66) statement -> . read
    (67) statement -> . call
    (89) empty -> .
    (9) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (19) condition -> . IF conditionaux
    (20) condition -> . IF conditionaux ELSE block
    (52) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (77) vars -> . type varsaux
    (53) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (86) read -> . READ LFTPAREN readaux RGTPAREN SEMICOLON
    (82) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (10) assignmentaux -> . ID
    (11) assignmentaux -> . array
    (68) type -> . INT
    (69) type -> . FLOAT
    (70) type -> . CHAR
    (71) type -> . BOOL
    (72) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    type                           shift and go to state 13
    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    empty                          shift and go to state 149
    call                           shift and go to state 39
    condition                      shift and go to state 46
    statement                      shift and go to state 147
    blockreturnaux                 shift and go to state 161
    array                          shift and go to state 36
    loop                           shift and go to state 48

state 148

    (12) blockreturn -> LFTBRAC blockreturnaux . RGTBRAC
    (13) blockreturn -> LFTBRAC blockreturnaux . RETURN exp SEMICOLON RGTBRAC

    RGTBRAC         shift and go to state 163
    RETURN          shift and go to state 162


state 149

    (15) blockreturnaux -> empty .

    RGTBRAC         reduce using rule 15 (blockreturnaux -> empty .)
    RETURN          reduce using rule 15 (blockreturnaux -> empty .)


state 150

    (86) read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .

    IF              reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 86 (read -> READ LFTPAREN readaux RGTPAREN SEMICOLON .)


state 151

    (52) loop -> WHILE LFTPAREN expression RGTPAREN block .

    IF              reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    WHILE           reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    PRINT           reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    READ            reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    ID              reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    INT             reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    FLOAT           reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    CHAR            reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    BOOL            reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    STRING          reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    RGTBRAC         reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    RETURN          reduce using rule 52 (loop -> WHILE LFTPAREN expression RGTPAREN block .)


state 152

    (53) write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .

    IF              reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    READ            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    ID              reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    INT             reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    STRING          reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 53 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)


state 153

    (82) call -> ID LFTPAREN exp callaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 154

    (83) callaux -> COMMA exp . callaux
    (83) callaux -> . COMMA exp callaux
    (84) callaux -> . empty
    (89) empty -> .

    COMMA           shift and go to state 134
    RGTPAREN        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 135
    callaux                        shift and go to state 165

state 155

    (21) conditionaux -> LFTPAREN expression RGTPAREN block . conditionaux2
    (22) conditionaux2 -> . ELSEIF conditionaux
    (23) conditionaux2 -> . empty
    (89) empty -> .

    ELSEIF          shift and go to state 168
    ELSE            reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    PRINT           reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    INT             reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHAR            reduce using rule 89 (empty -> .)
    BOOL            reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    RGTBRAC         reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)

    empty                          shift and go to state 167
    conditionaux2                  shift and go to state 166

state 156

    (85) call2 -> ID LFTPAREN exp callaux RGTPAREN .

    MULTIPLICATION  reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DIVISION        reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    PLUS            reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    MINUS           reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    COMMA           reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTPAREN        reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    AND             reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    DOUBEQUAL       reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    NOT             reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    OR              reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    GREATTHAN       reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    LESSTHAN        reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    SEMICOLON       reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)
    RGTBRACSQR      reduce using rule 85 (call2 -> ID LFTPAREN exp callaux RGTPAREN .)


state 157

    (7) arrayvaluesaux -> constant .
    (8) arrayvaluesaux -> constant . COMMA arrayvaluesaux

    RGTBRACSQR      reduce using rule 7 (arrayvaluesaux -> constant .)
    COMMA           shift and go to state 169


state 158

    (6) arrayvalues -> LFTBRACSQR arrayvaluesaux . RGTBRACSQR

    RGTBRACSQR      shift and go to state 170


state 159

    (80) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .

    FUNCTION        reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    INT             reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    FLOAT           reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    CHAR            reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    BOOL            reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    STRING          reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    PRIOMH          reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    IF              reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    WHILE           reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    PRINT           reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    READ            reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    ID              reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    RGTBRAC         reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    RETURN          reduce using rule 80 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)


state 160

    (81) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA . varsaux
    (78) varsaux -> . ID EQUAL expression SEMICOLON
    (79) varsaux -> . ID EQUAL expression COMMA varsaux
    (80) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (81) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 171

state 161

    (14) blockreturnaux -> statement blockreturnaux .

    RGTBRAC         reduce using rule 14 (blockreturnaux -> statement blockreturnaux .)
    RETURN          reduce using rule 14 (blockreturnaux -> statement blockreturnaux .)


state 162

    (13) blockreturn -> LFTBRAC blockreturnaux RETURN . exp SEMICOLON RGTBRAC
    (34) exp -> . term expaux
    (57) term -> . factor termaux
    (38) factor -> . LFTPAREN expression RGTPAREN
    (39) factor -> . constant
    (40) factor -> . MINUS constant
    (41) factor -> . PLUS constant
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 57
    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    call2                          shift and go to state 54
    cteN                           shift and go to state 52
    exp                            shift and go to state 172
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 163

    (12) blockreturn -> LFTBRAC blockreturnaux RGTBRAC .

    FUNCTION        reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    INT             reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    FLOAT           reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    CHAR            reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    BOOL            reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    STRING          reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    PRIOMH          reduce using rule 12 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)


state 164

    (82) call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .

    IF              reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 82 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)


state 165

    (83) callaux -> COMMA exp callaux .

    RGTPAREN        reduce using rule 83 (callaux -> COMMA exp callaux .)


state 166

    (21) conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .

    ELSE            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    IF              reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    WHILE           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    PRINT           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    READ            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    ID              reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    INT             reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    FLOAT           reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    CHAR            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    BOOL            reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    STRING          reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RGTBRAC         reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RETURN          reduce using rule 21 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)


state 167

    (23) conditionaux2 -> empty .

    ELSE            reduce using rule 23 (conditionaux2 -> empty .)
    IF              reduce using rule 23 (conditionaux2 -> empty .)
    WHILE           reduce using rule 23 (conditionaux2 -> empty .)
    PRINT           reduce using rule 23 (conditionaux2 -> empty .)
    READ            reduce using rule 23 (conditionaux2 -> empty .)
    ID              reduce using rule 23 (conditionaux2 -> empty .)
    INT             reduce using rule 23 (conditionaux2 -> empty .)
    FLOAT           reduce using rule 23 (conditionaux2 -> empty .)
    CHAR            reduce using rule 23 (conditionaux2 -> empty .)
    BOOL            reduce using rule 23 (conditionaux2 -> empty .)
    STRING          reduce using rule 23 (conditionaux2 -> empty .)
    RGTBRAC         reduce using rule 23 (conditionaux2 -> empty .)
    RETURN          reduce using rule 23 (conditionaux2 -> empty .)


state 168

    (22) conditionaux2 -> ELSEIF . conditionaux
    (21) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 79

    conditionaux                   shift and go to state 173

state 169

    (8) arrayvaluesaux -> constant COMMA . arrayvaluesaux
    (7) arrayvaluesaux -> . constant
    (8) arrayvaluesaux -> . constant COMMA arrayvaluesaux
    (24) constant -> . ID
    (25) constant -> . array
    (26) constant -> . cteN
    (27) constant -> . cteS
    (28) constant -> . TRUE
    (29) constant -> . FALSE
    (30) constant -> . call2
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (31) cteN -> . FLOAT
    (32) cteN -> . INT
    (33) cteS -> . STRING
    (85) call2 -> . ID LFTPAREN exp callaux RGTPAREN

    ID              shift and go to state 60
    TRUE            shift and go to state 55
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    constant                       shift and go to state 157
    call2                          shift and go to state 54
    array                          shift and go to state 51
    cteN                           shift and go to state 52
    arrayvaluesaux                 shift and go to state 174

state 170

    (6) arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .

    SEMICOLON       reduce using rule 6 (arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .)
    COMMA           reduce using rule 6 (arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .)


state 171

    (81) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .

    FUNCTION        reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    INT             reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    FLOAT           reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    CHAR            reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    BOOL            reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    STRING          reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    PRIOMH          reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    IF              reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    WHILE           reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    PRINT           reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    READ            reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    ID              reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    RGTBRAC         reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    RETURN          reduce using rule 81 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)


state 172

    (13) blockreturn -> LFTBRAC blockreturnaux RETURN exp . SEMICOLON RGTBRAC

    SEMICOLON       shift and go to state 175


state 173

    (22) conditionaux2 -> ELSEIF conditionaux .

    ELSE            reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    IF              reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    WHILE           reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    PRINT           reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    READ            reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    ID              reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    INT             reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    FLOAT           reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    CHAR            reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    BOOL            reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    STRING          reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    RGTBRAC         reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)
    RETURN          reduce using rule 22 (conditionaux2 -> ELSEIF conditionaux .)


state 174

    (8) arrayvaluesaux -> constant COMMA arrayvaluesaux .

    RGTBRACSQR      reduce using rule 8 (arrayvaluesaux -> constant COMMA arrayvaluesaux .)


state 175

    (13) blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON . RGTBRAC

    RGTBRAC         shift and go to state 176


state 176

    (13) blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .

    FUNCTION        reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    INT             reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    FLOAT           reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    CHAR            reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    BOOL            reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    STRING          reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    PRIOMH          reduce using rule 13 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLICATION in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 117 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
