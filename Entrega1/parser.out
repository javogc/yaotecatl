Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC
Rule 2     auxprogram -> vars auxprogram
Rule 3     auxprogram -> function auxprogram
Rule 4     auxprogram -> empty
Rule 5     array -> ID LFTBRACSQR exp RGTBRACSQR
Rule 6     arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR
Rule 7     arrayvaluesaux -> cteN
Rule 8     arrayvaluesaux -> cteS
Rule 9     arrayvaluesaux -> cteN COMMA arrayvaluesaux
Rule 10    arrayvaluesaux -> cteS COMMA arrayvaluesaux
Rule 11    assignment -> assignmentaux EQUAL expression SEMICOLON
Rule 12    assignment -> assignmentaux EQUAL call
Rule 13    assignmentaux -> ID
Rule 14    assignmentaux -> array
Rule 15    blockreturn -> LFTBRAC blockreturnaux RGTBRAC
Rule 16    blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC
Rule 17    blockreturnaux -> statement blockreturnaux
Rule 18    blockreturnaux -> empty
Rule 19    block -> LFTBRAC blockaux RGTBRAC
Rule 20    blockaux -> statement blockaux
Rule 21    blockaux -> empty
Rule 22    condition -> IF conditionaux
Rule 23    condition -> IF conditionaux ELSE block
Rule 24    conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2
Rule 25    conditionaux2 -> ELSEIF conditionaux
Rule 26    conditionaux2 -> empty
Rule 27    constant -> ID
Rule 28    constant -> array
Rule 29    constant -> cteN
Rule 30    constant -> cteS
Rule 31    constant -> TRUE
Rule 32    constant -> FALSE
Rule 33    cteN -> FLOAT
Rule 34    cteN -> INT
Rule 35    cteS -> STRING
Rule 36    exp -> term expaux
Rule 37    expaux -> PLUS exp expaux
Rule 38    expaux -> MINUS exp expaux
Rule 39    expaux -> empty
Rule 40    factor -> LFTPAREN expression RGTPAREN
Rule 41    factor -> constant
Rule 42    factor -> MINUS constant
Rule 43    factor -> PLUS constant
Rule 44    expression -> exp
Rule 45    expression -> exp expressionaux exp
Rule 46    expressionaux -> AND
Rule 47    expressionaux -> DOUBEQUAL
Rule 48    expressionaux -> NOT
Rule 49    expressionaux -> OR
Rule 50    expressionaux -> LESSTHANEQUAL
Rule 51    expressionaux -> GREATTHANEQUAL
Rule 52    expressionaux -> GREATTHAN
Rule 53    expressionaux -> LESSTHAN
Rule 54    loop -> WHILE LFTPAREN expression RGTPAREN block
Rule 55    write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON
Rule 56    parameter -> type ID
Rule 57    parameter -> type ID COMMA parameter
Rule 58    parameter -> empty
Rule 59    term -> factor termaux
Rule 60    termaux -> MULTIPLICATION term termaux
Rule 61    termaux -> DIVISION term termaux
Rule 62    termaux -> empty
Rule 63    statement -> assignment
Rule 64    statement -> condition
Rule 65    statement -> vars
Rule 66    statement -> loop
Rule 67    statement -> write
Rule 68    statement -> read
Rule 69    statement -> call
Rule 70    type -> INT
Rule 71    type -> FLOAT
Rule 72    type -> CHAR
Rule 73    type -> BOOL
Rule 74    type -> STRING
Rule 75    main -> PRIOMH block
Rule 76    function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
Rule 77    functionaux -> VOID
Rule 78    functionaux -> type
Rule 79    vars -> type varsaux
Rule 80    varsaux -> ID EQUAL expression SEMICOLON
Rule 81    varsaux -> ID EQUAL call
Rule 82    varsaux -> ID EQUAL expression COMMA varsaux
Rule 83    varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
Rule 84    varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux
Rule 85    call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON
Rule 86    callaux -> COMMA exp callaux
Rule 87    callaux -> empty
Rule 88    read -> READ LFTPAREN ID RGTPAREN SEMICOLON
Rule 89    empty -> <empty>

Terminals, with rules where they appear

AND                  : 46
BOOL                 : 73
CHAR                 : 72
COMMA                : 9 10 57 82 84 86
DIVISION             : 61
DOUBEQUAL            : 47
ELSE                 : 23
ELSEIF               : 25
EQUAL                : 11 12 80 81 82 83 84
FALSE                : 32
FLOAT                : 33 71
FUNCTION             : 76
GREATTHAN            : 52
GREATTHANEQUAL       : 51
ID                   : 1 5 13 27 56 57 76 80 81 82 83 84 85 88
IF                   : 22 23
INT                  : 34 70 83 84
LESSTHAN             : 53
LESSTHANEQUAL        : 50
LFTBRAC              : 1 15 16 19
LFTBRACSQR           : 5 6 83 84
LFTPAREN             : 24 40 54 55 76 85 88
MINUS                : 38 42
MULTIPLICATION       : 60
NOT                  : 48
OR                   : 49
PLUS                 : 37 43
PRINT                : 55
PRIOMH               : 75
PROGRAM              : 1
READ                 : 88
RETURN               : 16
RGTBRAC              : 1 15 16 19
RGTBRACSQR           : 5 6 83 84
RGTPAREN             : 24 40 54 55 76 85 88
SEMICOLON            : 11 16 55 80 83 85 88
STRING               : 35 74
TRUE                 : 31
VOID                 : 77
WHILE                : 54
error                : 

Nonterminals, with rules where they appear

array                : 14 28
arrayvalues          : 83 84
arrayvaluesaux       : 6 9 10
assignment           : 63
assignmentaux        : 11 12
auxprogram           : 1 2 3
block                : 23 24 54 75
blockaux             : 19 20
blockreturn          : 76
blockreturnaux       : 15 16 17
call                 : 12 69 81
callaux              : 85 86
condition            : 64
conditionaux         : 22 23 25
conditionaux2        : 24
constant             : 41 42 43 55
cteN                 : 7 9 29
cteS                 : 8 10 30
empty                : 4 18 21 26 39 58 62 87
exp                  : 5 16 37 38 44 45 45 85 86
expaux               : 36 37 38
expression           : 11 24 40 54 80 82
expressionaux        : 45
factor               : 59
function             : 3
functionaux          : 76
loop                 : 66
main                 : 1
parameter            : 57 76
program              : 0
read                 : 68
statement            : 17 20
term                 : 36 60 61
termaux              : 59 60 61
type                 : 56 57 78 79
vars                 : 2 65
varsaux              : 79 82 84
write                : 67

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID LFTBRAC auxprogram main RGTBRAC

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID LFTBRAC auxprogram main RGTBRAC

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . LFTBRAC auxprogram main RGTBRAC

    LFTBRAC         shift and go to state 4


state 4

    (1) program -> PROGRAM ID LFTBRAC . auxprogram main RGTBRAC
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> . empty
    (79) vars -> . type varsaux
    (76) function -> . FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (89) empty -> .
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING

    FUNCTION        shift and go to state 5
    PRIOMH          reduce using rule 89 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    function                       shift and go to state 10
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 8
    type                           shift and go to state 13
    empty                          shift and go to state 9

state 5

    (76) function -> FUNCTION . functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (77) functionaux -> . VOID
    (78) functionaux -> . type
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING

    VOID            shift and go to state 18
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    functionaux                    shift and go to state 16
    type                           shift and go to state 17

state 6

    (2) auxprogram -> vars . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> . empty
    (79) vars -> . type varsaux
    (76) function -> . FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (89) empty -> .
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING

    FUNCTION        shift and go to state 5
    PRIOMH          reduce using rule 89 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    function                       shift and go to state 10
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 19
    type                           shift and go to state 13
    empty                          shift and go to state 9

state 7

    (72) type -> CHAR .

    ID              reduce using rule 72 (type -> CHAR .)


state 8

    (1) program -> PROGRAM ID LFTBRAC auxprogram . main RGTBRAC
    (75) main -> . PRIOMH block

    PRIOMH          shift and go to state 20

    main                           shift and go to state 21

state 9

    (4) auxprogram -> empty .

    PRIOMH          reduce using rule 4 (auxprogram -> empty .)


state 10

    (3) auxprogram -> function . auxprogram
    (2) auxprogram -> . vars auxprogram
    (3) auxprogram -> . function auxprogram
    (4) auxprogram -> . empty
    (79) vars -> . type varsaux
    (76) function -> . FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn
    (89) empty -> .
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING

    FUNCTION        shift and go to state 5
    PRIOMH          reduce using rule 89 (empty -> .)
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    function                       shift and go to state 10
    vars                           shift and go to state 6
    auxprogram                     shift and go to state 22
    type                           shift and go to state 13
    empty                          shift and go to state 9

state 11

    (74) type -> STRING .

    ID              reduce using rule 74 (type -> STRING .)


state 12

    (70) type -> INT .

    ID              reduce using rule 70 (type -> INT .)


state 13

    (79) vars -> type . varsaux
    (80) varsaux -> . ID EQUAL expression SEMICOLON
    (81) varsaux -> . ID EQUAL call
    (82) varsaux -> . ID EQUAL expression COMMA varsaux
    (83) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (84) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 24

state 14

    (71) type -> FLOAT .

    ID              reduce using rule 71 (type -> FLOAT .)


state 15

    (73) type -> BOOL .

    ID              reduce using rule 73 (type -> BOOL .)


state 16

    (76) function -> FUNCTION functionaux . ID LFTPAREN parameter RGTPAREN blockreturn

    ID              shift and go to state 25


state 17

    (78) functionaux -> type .

    ID              reduce using rule 78 (functionaux -> type .)


state 18

    (77) functionaux -> VOID .

    ID              reduce using rule 77 (functionaux -> VOID .)


state 19

    (2) auxprogram -> vars auxprogram .

    PRIOMH          reduce using rule 2 (auxprogram -> vars auxprogram .)


state 20

    (75) main -> PRIOMH . block
    (19) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 27

state 21

    (1) program -> PROGRAM ID LFTBRAC auxprogram main . RGTBRAC

    RGTBRAC         shift and go to state 28


state 22

    (3) auxprogram -> function auxprogram .

    PRIOMH          reduce using rule 3 (auxprogram -> function auxprogram .)


state 23

    (80) varsaux -> ID . EQUAL expression SEMICOLON
    (81) varsaux -> ID . EQUAL call
    (82) varsaux -> ID . EQUAL expression COMMA varsaux
    (83) varsaux -> ID . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (84) varsaux -> ID . LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    EQUAL           shift and go to state 29
    LFTBRACSQR      shift and go to state 30


state 24

    (79) vars -> type varsaux .

    IF              reduce using rule 79 (vars -> type varsaux .)
    WHILE           reduce using rule 79 (vars -> type varsaux .)
    PRINT           reduce using rule 79 (vars -> type varsaux .)
    READ            reduce using rule 79 (vars -> type varsaux .)
    ID              reduce using rule 79 (vars -> type varsaux .)
    INT             reduce using rule 79 (vars -> type varsaux .)
    FLOAT           reduce using rule 79 (vars -> type varsaux .)
    CHAR            reduce using rule 79 (vars -> type varsaux .)
    BOOL            reduce using rule 79 (vars -> type varsaux .)
    STRING          reduce using rule 79 (vars -> type varsaux .)
    RGTBRAC         reduce using rule 79 (vars -> type varsaux .)
    FUNCTION        reduce using rule 79 (vars -> type varsaux .)
    PRIOMH          reduce using rule 79 (vars -> type varsaux .)
    RETURN          reduce using rule 79 (vars -> type varsaux .)


state 25

    (76) function -> FUNCTION functionaux ID . LFTPAREN parameter RGTPAREN blockreturn

    LFTPAREN        shift and go to state 31


state 26

    (19) block -> LFTBRAC . blockaux RGTBRAC
    (20) blockaux -> . statement blockaux
    (21) blockaux -> . empty
    (63) statement -> . assignment
    (64) statement -> . condition
    (65) statement -> . vars
    (66) statement -> . loop
    (67) statement -> . write
    (68) statement -> . read
    (69) statement -> . call
    (89) empty -> .
    (11) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (12) assignment -> . assignmentaux EQUAL call
    (22) condition -> . IF conditionaux
    (23) condition -> . IF conditionaux ELSE block
    (79) vars -> . type varsaux
    (54) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (55) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (88) read -> . READ LFTPAREN ID RGTPAREN SEMICOLON
    (85) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (13) assignmentaux -> . ID
    (14) assignmentaux -> . array
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    type                           shift and go to state 13
    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    call                           shift and go to state 39
    empty                          shift and go to state 41
    statement                      shift and go to state 40
    loop                           shift and go to state 48
    array                          shift and go to state 36
    condition                      shift and go to state 46
    blockaux                       shift and go to state 42

state 27

    (75) main -> PRIOMH block .

    RGTBRAC         reduce using rule 75 (main -> PRIOMH block .)


state 28

    (1) program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .

    $end            reduce using rule 1 (program -> PROGRAM ID LFTBRAC auxprogram main RGTBRAC .)


state 29

    (80) varsaux -> ID EQUAL . expression SEMICOLON
    (81) varsaux -> ID EQUAL . call
    (82) varsaux -> ID EQUAL . expression COMMA varsaux
    (44) expression -> . exp
    (45) expression -> . exp expressionaux exp
    (85) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    ID              shift and go to state 60
    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call                           shift and go to state 57
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 66

state 30

    (83) varsaux -> ID LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (84) varsaux -> ID LFTBRACSQR . INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    INT             shift and go to state 67


state 31

    (76) function -> FUNCTION functionaux ID LFTPAREN . parameter RGTPAREN blockreturn
    (56) parameter -> . type ID
    (57) parameter -> . type ID COMMA parameter
    (58) parameter -> . empty
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING
    (89) empty -> .

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 89 (empty -> .)

    parameter                      shift and go to state 69
    empty                          shift and go to state 70
    type                           shift and go to state 68

state 32

    (65) statement -> vars .

    IF              reduce using rule 65 (statement -> vars .)
    WHILE           reduce using rule 65 (statement -> vars .)
    PRINT           reduce using rule 65 (statement -> vars .)
    READ            reduce using rule 65 (statement -> vars .)
    ID              reduce using rule 65 (statement -> vars .)
    INT             reduce using rule 65 (statement -> vars .)
    FLOAT           reduce using rule 65 (statement -> vars .)
    CHAR            reduce using rule 65 (statement -> vars .)
    BOOL            reduce using rule 65 (statement -> vars .)
    STRING          reduce using rule 65 (statement -> vars .)
    RGTBRAC         reduce using rule 65 (statement -> vars .)
    RETURN          reduce using rule 65 (statement -> vars .)


state 33

    (88) read -> READ . LFTPAREN ID RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 71


state 34

    (54) loop -> WHILE . LFTPAREN expression RGTPAREN block

    LFTPAREN        shift and go to state 72


state 35

    (55) write -> PRINT . LFTPAREN constant RGTPAREN SEMICOLON

    LFTPAREN        shift and go to state 73


state 36

    (14) assignmentaux -> array .

    EQUAL           reduce using rule 14 (assignmentaux -> array .)


state 37

    (67) statement -> write .

    IF              reduce using rule 67 (statement -> write .)
    WHILE           reduce using rule 67 (statement -> write .)
    PRINT           reduce using rule 67 (statement -> write .)
    READ            reduce using rule 67 (statement -> write .)
    ID              reduce using rule 67 (statement -> write .)
    INT             reduce using rule 67 (statement -> write .)
    FLOAT           reduce using rule 67 (statement -> write .)
    CHAR            reduce using rule 67 (statement -> write .)
    BOOL            reduce using rule 67 (statement -> write .)
    STRING          reduce using rule 67 (statement -> write .)
    RGTBRAC         reduce using rule 67 (statement -> write .)
    RETURN          reduce using rule 67 (statement -> write .)


state 38

    (68) statement -> read .

    IF              reduce using rule 68 (statement -> read .)
    WHILE           reduce using rule 68 (statement -> read .)
    PRINT           reduce using rule 68 (statement -> read .)
    READ            reduce using rule 68 (statement -> read .)
    ID              reduce using rule 68 (statement -> read .)
    INT             reduce using rule 68 (statement -> read .)
    FLOAT           reduce using rule 68 (statement -> read .)
    CHAR            reduce using rule 68 (statement -> read .)
    BOOL            reduce using rule 68 (statement -> read .)
    STRING          reduce using rule 68 (statement -> read .)
    RGTBRAC         reduce using rule 68 (statement -> read .)
    RETURN          reduce using rule 68 (statement -> read .)


state 39

    (69) statement -> call .

    IF              reduce using rule 69 (statement -> call .)
    WHILE           reduce using rule 69 (statement -> call .)
    PRINT           reduce using rule 69 (statement -> call .)
    READ            reduce using rule 69 (statement -> call .)
    ID              reduce using rule 69 (statement -> call .)
    INT             reduce using rule 69 (statement -> call .)
    FLOAT           reduce using rule 69 (statement -> call .)
    CHAR            reduce using rule 69 (statement -> call .)
    BOOL            reduce using rule 69 (statement -> call .)
    STRING          reduce using rule 69 (statement -> call .)
    RGTBRAC         reduce using rule 69 (statement -> call .)
    RETURN          reduce using rule 69 (statement -> call .)


state 40

    (20) blockaux -> statement . blockaux
    (20) blockaux -> . statement blockaux
    (21) blockaux -> . empty
    (63) statement -> . assignment
    (64) statement -> . condition
    (65) statement -> . vars
    (66) statement -> . loop
    (67) statement -> . write
    (68) statement -> . read
    (69) statement -> . call
    (89) empty -> .
    (11) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (12) assignment -> . assignmentaux EQUAL call
    (22) condition -> . IF conditionaux
    (23) condition -> . IF conditionaux ELSE block
    (79) vars -> . type varsaux
    (54) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (55) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (88) read -> . READ LFTPAREN ID RGTPAREN SEMICOLON
    (85) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (13) assignmentaux -> . ID
    (14) assignmentaux -> . array
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    type                           shift and go to state 13
    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    call                           shift and go to state 39
    empty                          shift and go to state 41
    statement                      shift and go to state 40
    loop                           shift and go to state 48
    array                          shift and go to state 36
    condition                      shift and go to state 46
    blockaux                       shift and go to state 74

state 41

    (21) blockaux -> empty .

    RGTBRAC         reduce using rule 21 (blockaux -> empty .)


state 42

    (19) block -> LFTBRAC blockaux . RGTBRAC

    RGTBRAC         shift and go to state 75


state 43

    (63) statement -> assignment .

    IF              reduce using rule 63 (statement -> assignment .)
    WHILE           reduce using rule 63 (statement -> assignment .)
    PRINT           reduce using rule 63 (statement -> assignment .)
    READ            reduce using rule 63 (statement -> assignment .)
    ID              reduce using rule 63 (statement -> assignment .)
    INT             reduce using rule 63 (statement -> assignment .)
    FLOAT           reduce using rule 63 (statement -> assignment .)
    CHAR            reduce using rule 63 (statement -> assignment .)
    BOOL            reduce using rule 63 (statement -> assignment .)
    STRING          reduce using rule 63 (statement -> assignment .)
    RGTBRAC         reduce using rule 63 (statement -> assignment .)
    RETURN          reduce using rule 63 (statement -> assignment .)


state 44

    (11) assignment -> assignmentaux . EQUAL expression SEMICOLON
    (12) assignment -> assignmentaux . EQUAL call

    EQUAL           shift and go to state 76


state 45

    (85) call -> ID . LFTPAREN exp callaux RGTPAREN SEMICOLON
    (13) assignmentaux -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    LFTPAREN        shift and go to state 77
    EQUAL           reduce using rule 13 (assignmentaux -> ID .)
    LFTBRACSQR      shift and go to state 78


state 46

    (64) statement -> condition .

    IF              reduce using rule 64 (statement -> condition .)
    WHILE           reduce using rule 64 (statement -> condition .)
    PRINT           reduce using rule 64 (statement -> condition .)
    READ            reduce using rule 64 (statement -> condition .)
    ID              reduce using rule 64 (statement -> condition .)
    INT             reduce using rule 64 (statement -> condition .)
    FLOAT           reduce using rule 64 (statement -> condition .)
    CHAR            reduce using rule 64 (statement -> condition .)
    BOOL            reduce using rule 64 (statement -> condition .)
    STRING          reduce using rule 64 (statement -> condition .)
    RGTBRAC         reduce using rule 64 (statement -> condition .)
    RETURN          reduce using rule 64 (statement -> condition .)


state 47

    (22) condition -> IF . conditionaux
    (23) condition -> IF . conditionaux ELSE block
    (24) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 79

    conditionaux                   shift and go to state 80

state 48

    (66) statement -> loop .

    IF              reduce using rule 66 (statement -> loop .)
    WHILE           reduce using rule 66 (statement -> loop .)
    PRINT           reduce using rule 66 (statement -> loop .)
    READ            reduce using rule 66 (statement -> loop .)
    ID              reduce using rule 66 (statement -> loop .)
    INT             reduce using rule 66 (statement -> loop .)
    FLOAT           reduce using rule 66 (statement -> loop .)
    CHAR            reduce using rule 66 (statement -> loop .)
    BOOL            reduce using rule 66 (statement -> loop .)
    STRING          reduce using rule 66 (statement -> loop .)
    RGTBRAC         reduce using rule 66 (statement -> loop .)
    RETURN          reduce using rule 66 (statement -> loop .)


state 49

    (41) factor -> constant .

    MULTIPLICATION  reduce using rule 41 (factor -> constant .)
    DIVISION        reduce using rule 41 (factor -> constant .)
    PLUS            reduce using rule 41 (factor -> constant .)
    MINUS           reduce using rule 41 (factor -> constant .)
    COMMA           reduce using rule 41 (factor -> constant .)
    RGTPAREN        reduce using rule 41 (factor -> constant .)
    AND             reduce using rule 41 (factor -> constant .)
    DOUBEQUAL       reduce using rule 41 (factor -> constant .)
    NOT             reduce using rule 41 (factor -> constant .)
    OR              reduce using rule 41 (factor -> constant .)
    LESSTHANEQUAL   reduce using rule 41 (factor -> constant .)
    GREATTHANEQUAL  reduce using rule 41 (factor -> constant .)
    GREATTHAN       reduce using rule 41 (factor -> constant .)
    LESSTHAN        reduce using rule 41 (factor -> constant .)
    SEMICOLON       reduce using rule 41 (factor -> constant .)
    RGTBRACSQR      reduce using rule 41 (factor -> constant .)


state 50

    (30) constant -> cteS .

    MULTIPLICATION  reduce using rule 30 (constant -> cteS .)
    DIVISION        reduce using rule 30 (constant -> cteS .)
    PLUS            reduce using rule 30 (constant -> cteS .)
    MINUS           reduce using rule 30 (constant -> cteS .)
    AND             reduce using rule 30 (constant -> cteS .)
    DOUBEQUAL       reduce using rule 30 (constant -> cteS .)
    NOT             reduce using rule 30 (constant -> cteS .)
    OR              reduce using rule 30 (constant -> cteS .)
    LESSTHANEQUAL   reduce using rule 30 (constant -> cteS .)
    GREATTHANEQUAL  reduce using rule 30 (constant -> cteS .)
    GREATTHAN       reduce using rule 30 (constant -> cteS .)
    LESSTHAN        reduce using rule 30 (constant -> cteS .)
    SEMICOLON       reduce using rule 30 (constant -> cteS .)
    COMMA           reduce using rule 30 (constant -> cteS .)
    RGTPAREN        reduce using rule 30 (constant -> cteS .)
    RGTBRACSQR      reduce using rule 30 (constant -> cteS .)


state 51

    (28) constant -> array .

    MULTIPLICATION  reduce using rule 28 (constant -> array .)
    DIVISION        reduce using rule 28 (constant -> array .)
    PLUS            reduce using rule 28 (constant -> array .)
    MINUS           reduce using rule 28 (constant -> array .)
    AND             reduce using rule 28 (constant -> array .)
    DOUBEQUAL       reduce using rule 28 (constant -> array .)
    NOT             reduce using rule 28 (constant -> array .)
    OR              reduce using rule 28 (constant -> array .)
    LESSTHANEQUAL   reduce using rule 28 (constant -> array .)
    GREATTHANEQUAL  reduce using rule 28 (constant -> array .)
    GREATTHAN       reduce using rule 28 (constant -> array .)
    LESSTHAN        reduce using rule 28 (constant -> array .)
    SEMICOLON       reduce using rule 28 (constant -> array .)
    COMMA           reduce using rule 28 (constant -> array .)
    RGTPAREN        reduce using rule 28 (constant -> array .)
    RGTBRACSQR      reduce using rule 28 (constant -> array .)


state 52

    (29) constant -> cteN .

    MULTIPLICATION  reduce using rule 29 (constant -> cteN .)
    DIVISION        reduce using rule 29 (constant -> cteN .)
    PLUS            reduce using rule 29 (constant -> cteN .)
    MINUS           reduce using rule 29 (constant -> cteN .)
    AND             reduce using rule 29 (constant -> cteN .)
    DOUBEQUAL       reduce using rule 29 (constant -> cteN .)
    NOT             reduce using rule 29 (constant -> cteN .)
    OR              reduce using rule 29 (constant -> cteN .)
    LESSTHANEQUAL   reduce using rule 29 (constant -> cteN .)
    GREATTHANEQUAL  reduce using rule 29 (constant -> cteN .)
    GREATTHAN       reduce using rule 29 (constant -> cteN .)
    LESSTHAN        reduce using rule 29 (constant -> cteN .)
    SEMICOLON       reduce using rule 29 (constant -> cteN .)
    COMMA           reduce using rule 29 (constant -> cteN .)
    RGTPAREN        reduce using rule 29 (constant -> cteN .)
    RGTBRACSQR      reduce using rule 29 (constant -> cteN .)


state 53

    (42) factor -> MINUS . constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteN                           shift and go to state 52
    array                          shift and go to state 51
    constant                       shift and go to state 81
    cteS                           shift and go to state 50

state 54

    (31) constant -> TRUE .

    MULTIPLICATION  reduce using rule 31 (constant -> TRUE .)
    DIVISION        reduce using rule 31 (constant -> TRUE .)
    PLUS            reduce using rule 31 (constant -> TRUE .)
    MINUS           reduce using rule 31 (constant -> TRUE .)
    AND             reduce using rule 31 (constant -> TRUE .)
    DOUBEQUAL       reduce using rule 31 (constant -> TRUE .)
    NOT             reduce using rule 31 (constant -> TRUE .)
    OR              reduce using rule 31 (constant -> TRUE .)
    LESSTHANEQUAL   reduce using rule 31 (constant -> TRUE .)
    GREATTHANEQUAL  reduce using rule 31 (constant -> TRUE .)
    GREATTHAN       reduce using rule 31 (constant -> TRUE .)
    LESSTHAN        reduce using rule 31 (constant -> TRUE .)
    SEMICOLON       reduce using rule 31 (constant -> TRUE .)
    COMMA           reduce using rule 31 (constant -> TRUE .)
    RGTPAREN        reduce using rule 31 (constant -> TRUE .)
    RGTBRACSQR      reduce using rule 31 (constant -> TRUE .)


state 55

    (43) factor -> PLUS . constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteN                           shift and go to state 52
    array                          shift and go to state 51
    constant                       shift and go to state 83
    cteS                           shift and go to state 50

state 56

    (59) term -> factor . termaux
    (60) termaux -> . MULTIPLICATION term termaux
    (61) termaux -> . DIVISION term termaux
    (62) termaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    MULTIPLICATION  shift and go to state 85
    DIVISION        shift and go to state 84
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! MULTIPLICATION  [ reduce using rule 89 (empty -> .) ]
  ! DIVISION        [ reduce using rule 89 (empty -> .) ]

    termaux                        shift and go to state 86
    empty                          shift and go to state 87

state 57

    (81) varsaux -> ID EQUAL call .

    FUNCTION        reduce using rule 81 (varsaux -> ID EQUAL call .)
    INT             reduce using rule 81 (varsaux -> ID EQUAL call .)
    FLOAT           reduce using rule 81 (varsaux -> ID EQUAL call .)
    CHAR            reduce using rule 81 (varsaux -> ID EQUAL call .)
    BOOL            reduce using rule 81 (varsaux -> ID EQUAL call .)
    STRING          reduce using rule 81 (varsaux -> ID EQUAL call .)
    PRIOMH          reduce using rule 81 (varsaux -> ID EQUAL call .)
    IF              reduce using rule 81 (varsaux -> ID EQUAL call .)
    WHILE           reduce using rule 81 (varsaux -> ID EQUAL call .)
    PRINT           reduce using rule 81 (varsaux -> ID EQUAL call .)
    READ            reduce using rule 81 (varsaux -> ID EQUAL call .)
    ID              reduce using rule 81 (varsaux -> ID EQUAL call .)
    RGTBRAC         reduce using rule 81 (varsaux -> ID EQUAL call .)
    RETURN          reduce using rule 81 (varsaux -> ID EQUAL call .)


state 58

    (35) cteS -> STRING .

    MULTIPLICATION  reduce using rule 35 (cteS -> STRING .)
    DIVISION        reduce using rule 35 (cteS -> STRING .)
    PLUS            reduce using rule 35 (cteS -> STRING .)
    MINUS           reduce using rule 35 (cteS -> STRING .)
    SEMICOLON       reduce using rule 35 (cteS -> STRING .)
    COMMA           reduce using rule 35 (cteS -> STRING .)
    RGTPAREN        reduce using rule 35 (cteS -> STRING .)
    AND             reduce using rule 35 (cteS -> STRING .)
    DOUBEQUAL       reduce using rule 35 (cteS -> STRING .)
    NOT             reduce using rule 35 (cteS -> STRING .)
    OR              reduce using rule 35 (cteS -> STRING .)
    LESSTHANEQUAL   reduce using rule 35 (cteS -> STRING .)
    GREATTHANEQUAL  reduce using rule 35 (cteS -> STRING .)
    GREATTHAN       reduce using rule 35 (cteS -> STRING .)
    LESSTHAN        reduce using rule 35 (cteS -> STRING .)
    RGTBRACSQR      reduce using rule 35 (cteS -> STRING .)


state 59

    (40) factor -> LFTPAREN . expression RGTPAREN
    (44) expression -> . exp
    (45) expression -> . exp expressionaux exp
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 88

state 60

    (85) call -> ID . LFTPAREN exp callaux RGTPAREN SEMICOLON
    (27) constant -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    LFTPAREN        shift and go to state 77
    MULTIPLICATION  reduce using rule 27 (constant -> ID .)
    DIVISION        reduce using rule 27 (constant -> ID .)
    PLUS            reduce using rule 27 (constant -> ID .)
    MINUS           reduce using rule 27 (constant -> ID .)
    AND             reduce using rule 27 (constant -> ID .)
    DOUBEQUAL       reduce using rule 27 (constant -> ID .)
    NOT             reduce using rule 27 (constant -> ID .)
    OR              reduce using rule 27 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> ID .)
    GREATTHAN       reduce using rule 27 (constant -> ID .)
    LESSTHAN        reduce using rule 27 (constant -> ID .)
    SEMICOLON       reduce using rule 27 (constant -> ID .)
    COMMA           reduce using rule 27 (constant -> ID .)
    LFTBRACSQR      shift and go to state 78


state 61

    (36) exp -> term . expaux
    (37) expaux -> . PLUS exp expaux
    (38) expaux -> . MINUS exp expaux
    (39) expaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! PLUS            [ reduce using rule 89 (empty -> .) ]
  ! MINUS           [ reduce using rule 89 (empty -> .) ]

    expaux                         shift and go to state 89
    empty                          shift and go to state 92

state 62

    (32) constant -> FALSE .

    MULTIPLICATION  reduce using rule 32 (constant -> FALSE .)
    DIVISION        reduce using rule 32 (constant -> FALSE .)
    PLUS            reduce using rule 32 (constant -> FALSE .)
    MINUS           reduce using rule 32 (constant -> FALSE .)
    AND             reduce using rule 32 (constant -> FALSE .)
    DOUBEQUAL       reduce using rule 32 (constant -> FALSE .)
    NOT             reduce using rule 32 (constant -> FALSE .)
    OR              reduce using rule 32 (constant -> FALSE .)
    LESSTHANEQUAL   reduce using rule 32 (constant -> FALSE .)
    GREATTHANEQUAL  reduce using rule 32 (constant -> FALSE .)
    GREATTHAN       reduce using rule 32 (constant -> FALSE .)
    LESSTHAN        reduce using rule 32 (constant -> FALSE .)
    SEMICOLON       reduce using rule 32 (constant -> FALSE .)
    COMMA           reduce using rule 32 (constant -> FALSE .)
    RGTPAREN        reduce using rule 32 (constant -> FALSE .)
    RGTBRACSQR      reduce using rule 32 (constant -> FALSE .)


state 63

    (34) cteN -> INT .

    MULTIPLICATION  reduce using rule 34 (cteN -> INT .)
    DIVISION        reduce using rule 34 (cteN -> INT .)
    PLUS            reduce using rule 34 (cteN -> INT .)
    MINUS           reduce using rule 34 (cteN -> INT .)
    RGTBRACSQR      reduce using rule 34 (cteN -> INT .)
    COMMA           reduce using rule 34 (cteN -> INT .)
    AND             reduce using rule 34 (cteN -> INT .)
    DOUBEQUAL       reduce using rule 34 (cteN -> INT .)
    NOT             reduce using rule 34 (cteN -> INT .)
    OR              reduce using rule 34 (cteN -> INT .)
    LESSTHANEQUAL   reduce using rule 34 (cteN -> INT .)
    GREATTHANEQUAL  reduce using rule 34 (cteN -> INT .)
    GREATTHAN       reduce using rule 34 (cteN -> INT .)
    LESSTHAN        reduce using rule 34 (cteN -> INT .)
    SEMICOLON       reduce using rule 34 (cteN -> INT .)
    RGTPAREN        reduce using rule 34 (cteN -> INT .)


state 64

    (33) cteN -> FLOAT .

    MULTIPLICATION  reduce using rule 33 (cteN -> FLOAT .)
    DIVISION        reduce using rule 33 (cteN -> FLOAT .)
    PLUS            reduce using rule 33 (cteN -> FLOAT .)
    MINUS           reduce using rule 33 (cteN -> FLOAT .)
    RGTBRACSQR      reduce using rule 33 (cteN -> FLOAT .)
    COMMA           reduce using rule 33 (cteN -> FLOAT .)
    AND             reduce using rule 33 (cteN -> FLOAT .)
    DOUBEQUAL       reduce using rule 33 (cteN -> FLOAT .)
    NOT             reduce using rule 33 (cteN -> FLOAT .)
    OR              reduce using rule 33 (cteN -> FLOAT .)
    LESSTHANEQUAL   reduce using rule 33 (cteN -> FLOAT .)
    GREATTHANEQUAL  reduce using rule 33 (cteN -> FLOAT .)
    GREATTHAN       reduce using rule 33 (cteN -> FLOAT .)
    LESSTHAN        reduce using rule 33 (cteN -> FLOAT .)
    SEMICOLON       reduce using rule 33 (cteN -> FLOAT .)
    RGTPAREN        reduce using rule 33 (cteN -> FLOAT .)


state 65

    (44) expression -> exp .
    (45) expression -> exp . expressionaux exp
    (46) expressionaux -> . AND
    (47) expressionaux -> . DOUBEQUAL
    (48) expressionaux -> . NOT
    (49) expressionaux -> . OR
    (50) expressionaux -> . LESSTHANEQUAL
    (51) expressionaux -> . GREATTHANEQUAL
    (52) expressionaux -> . GREATTHAN
    (53) expressionaux -> . LESSTHAN

    RGTPAREN        reduce using rule 44 (expression -> exp .)
    SEMICOLON       reduce using rule 44 (expression -> exp .)
    COMMA           reduce using rule 44 (expression -> exp .)
    AND             shift and go to state 93
    DOUBEQUAL       shift and go to state 100
    NOT             shift and go to state 99
    OR              shift and go to state 101
    LESSTHANEQUAL   shift and go to state 97
    GREATTHANEQUAL  shift and go to state 95
    GREATTHAN       shift and go to state 96
    LESSTHAN        shift and go to state 98

    expressionaux                  shift and go to state 94

state 66

    (80) varsaux -> ID EQUAL expression . SEMICOLON
    (82) varsaux -> ID EQUAL expression . COMMA varsaux

    SEMICOLON       shift and go to state 102
    COMMA           shift and go to state 103


state 67

    (83) varsaux -> ID LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (84) varsaux -> ID LFTBRACSQR INT . RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    RGTBRACSQR      shift and go to state 104


state 68

    (56) parameter -> type . ID
    (57) parameter -> type . ID COMMA parameter

    ID              shift and go to state 105


state 69

    (76) function -> FUNCTION functionaux ID LFTPAREN parameter . RGTPAREN blockreturn

    RGTPAREN        shift and go to state 106


state 70

    (58) parameter -> empty .

    RGTPAREN        reduce using rule 58 (parameter -> empty .)


state 71

    (88) read -> READ LFTPAREN . ID RGTPAREN SEMICOLON

    ID              shift and go to state 107


state 72

    (54) loop -> WHILE LFTPAREN . expression RGTPAREN block
    (44) expression -> . exp
    (45) expression -> . exp expressionaux exp
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 108

state 73

    (55) write -> PRINT LFTPAREN . constant RGTPAREN SEMICOLON
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteN                           shift and go to state 52
    array                          shift and go to state 51
    constant                       shift and go to state 109
    cteS                           shift and go to state 50

state 74

    (20) blockaux -> statement blockaux .

    RGTBRAC         reduce using rule 20 (blockaux -> statement blockaux .)


state 75

    (19) block -> LFTBRAC blockaux RGTBRAC .

    ELSEIF          reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    ELSE            reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    IF              reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    WHILE           reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    PRINT           reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    READ            reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    ID              reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    INT             reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    FLOAT           reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    CHAR            reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    BOOL            reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    STRING          reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    RGTBRAC         reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)
    RETURN          reduce using rule 19 (block -> LFTBRAC blockaux RGTBRAC .)


state 76

    (11) assignment -> assignmentaux EQUAL . expression SEMICOLON
    (12) assignment -> assignmentaux EQUAL . call
    (44) expression -> . exp
    (45) expression -> . exp expressionaux exp
    (85) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    ID              shift and go to state 60
    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    call                           shift and go to state 110
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 111

state 77

    (85) call -> ID LFTPAREN . exp callaux RGTPAREN SEMICOLON
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    exp                            shift and go to state 112
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 78

    (5) array -> ID LFTBRACSQR . exp RGTBRACSQR
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    exp                            shift and go to state 113
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 79

    (24) conditionaux -> LFTPAREN . expression RGTPAREN block conditionaux2
    (44) expression -> . exp
    (45) expression -> . exp expressionaux exp
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    exp                            shift and go to state 65
    factor                         shift and go to state 56
    array                          shift and go to state 51
    expression                     shift and go to state 114

state 80

    (22) condition -> IF conditionaux .
    (23) condition -> IF conditionaux . ELSE block

    IF              reduce using rule 22 (condition -> IF conditionaux .)
    WHILE           reduce using rule 22 (condition -> IF conditionaux .)
    PRINT           reduce using rule 22 (condition -> IF conditionaux .)
    READ            reduce using rule 22 (condition -> IF conditionaux .)
    ID              reduce using rule 22 (condition -> IF conditionaux .)
    INT             reduce using rule 22 (condition -> IF conditionaux .)
    FLOAT           reduce using rule 22 (condition -> IF conditionaux .)
    CHAR            reduce using rule 22 (condition -> IF conditionaux .)
    BOOL            reduce using rule 22 (condition -> IF conditionaux .)
    STRING          reduce using rule 22 (condition -> IF conditionaux .)
    RGTBRAC         reduce using rule 22 (condition -> IF conditionaux .)
    RETURN          reduce using rule 22 (condition -> IF conditionaux .)
    ELSE            shift and go to state 115


state 81

    (42) factor -> MINUS constant .

    MULTIPLICATION  reduce using rule 42 (factor -> MINUS constant .)
    DIVISION        reduce using rule 42 (factor -> MINUS constant .)
    PLUS            reduce using rule 42 (factor -> MINUS constant .)
    MINUS           reduce using rule 42 (factor -> MINUS constant .)
    COMMA           reduce using rule 42 (factor -> MINUS constant .)
    RGTPAREN        reduce using rule 42 (factor -> MINUS constant .)
    AND             reduce using rule 42 (factor -> MINUS constant .)
    DOUBEQUAL       reduce using rule 42 (factor -> MINUS constant .)
    NOT             reduce using rule 42 (factor -> MINUS constant .)
    OR              reduce using rule 42 (factor -> MINUS constant .)
    LESSTHANEQUAL   reduce using rule 42 (factor -> MINUS constant .)
    GREATTHANEQUAL  reduce using rule 42 (factor -> MINUS constant .)
    GREATTHAN       reduce using rule 42 (factor -> MINUS constant .)
    LESSTHAN        reduce using rule 42 (factor -> MINUS constant .)
    SEMICOLON       reduce using rule 42 (factor -> MINUS constant .)
    RGTBRACSQR      reduce using rule 42 (factor -> MINUS constant .)


state 82

    (27) constant -> ID .
    (5) array -> ID . LFTBRACSQR exp RGTBRACSQR

    MULTIPLICATION  reduce using rule 27 (constant -> ID .)
    DIVISION        reduce using rule 27 (constant -> ID .)
    PLUS            reduce using rule 27 (constant -> ID .)
    MINUS           reduce using rule 27 (constant -> ID .)
    AND             reduce using rule 27 (constant -> ID .)
    DOUBEQUAL       reduce using rule 27 (constant -> ID .)
    NOT             reduce using rule 27 (constant -> ID .)
    OR              reduce using rule 27 (constant -> ID .)
    LESSTHANEQUAL   reduce using rule 27 (constant -> ID .)
    GREATTHANEQUAL  reduce using rule 27 (constant -> ID .)
    GREATTHAN       reduce using rule 27 (constant -> ID .)
    LESSTHAN        reduce using rule 27 (constant -> ID .)
    SEMICOLON       reduce using rule 27 (constant -> ID .)
    COMMA           reduce using rule 27 (constant -> ID .)
    RGTPAREN        reduce using rule 27 (constant -> ID .)
    RGTBRACSQR      reduce using rule 27 (constant -> ID .)
    LFTBRACSQR      shift and go to state 78


state 83

    (43) factor -> PLUS constant .

    MULTIPLICATION  reduce using rule 43 (factor -> PLUS constant .)
    DIVISION        reduce using rule 43 (factor -> PLUS constant .)
    PLUS            reduce using rule 43 (factor -> PLUS constant .)
    MINUS           reduce using rule 43 (factor -> PLUS constant .)
    COMMA           reduce using rule 43 (factor -> PLUS constant .)
    RGTPAREN        reduce using rule 43 (factor -> PLUS constant .)
    AND             reduce using rule 43 (factor -> PLUS constant .)
    DOUBEQUAL       reduce using rule 43 (factor -> PLUS constant .)
    NOT             reduce using rule 43 (factor -> PLUS constant .)
    OR              reduce using rule 43 (factor -> PLUS constant .)
    LESSTHANEQUAL   reduce using rule 43 (factor -> PLUS constant .)
    GREATTHANEQUAL  reduce using rule 43 (factor -> PLUS constant .)
    GREATTHAN       reduce using rule 43 (factor -> PLUS constant .)
    LESSTHAN        reduce using rule 43 (factor -> PLUS constant .)
    SEMICOLON       reduce using rule 43 (factor -> PLUS constant .)
    RGTBRACSQR      reduce using rule 43 (factor -> PLUS constant .)


state 84

    (61) termaux -> DIVISION . term termaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 116
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 85

    (60) termaux -> MULTIPLICATION . term termaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 117
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 86

    (59) term -> factor termaux .

    PLUS            reduce using rule 59 (term -> factor termaux .)
    MINUS           reduce using rule 59 (term -> factor termaux .)
    AND             reduce using rule 59 (term -> factor termaux .)
    DOUBEQUAL       reduce using rule 59 (term -> factor termaux .)
    NOT             reduce using rule 59 (term -> factor termaux .)
    OR              reduce using rule 59 (term -> factor termaux .)
    LESSTHANEQUAL   reduce using rule 59 (term -> factor termaux .)
    GREATTHANEQUAL  reduce using rule 59 (term -> factor termaux .)
    GREATTHAN       reduce using rule 59 (term -> factor termaux .)
    LESSTHAN        reduce using rule 59 (term -> factor termaux .)
    RGTPAREN        reduce using rule 59 (term -> factor termaux .)
    RGTBRACSQR      reduce using rule 59 (term -> factor termaux .)
    SEMICOLON       reduce using rule 59 (term -> factor termaux .)
    COMMA           reduce using rule 59 (term -> factor termaux .)
    MULTIPLICATION  reduce using rule 59 (term -> factor termaux .)
    DIVISION        reduce using rule 59 (term -> factor termaux .)


state 87

    (62) termaux -> empty .

    MULTIPLICATION  reduce using rule 62 (termaux -> empty .)
    DIVISION        reduce using rule 62 (termaux -> empty .)
    PLUS            reduce using rule 62 (termaux -> empty .)
    MINUS           reduce using rule 62 (termaux -> empty .)
    AND             reduce using rule 62 (termaux -> empty .)
    DOUBEQUAL       reduce using rule 62 (termaux -> empty .)
    NOT             reduce using rule 62 (termaux -> empty .)
    OR              reduce using rule 62 (termaux -> empty .)
    LESSTHANEQUAL   reduce using rule 62 (termaux -> empty .)
    GREATTHANEQUAL  reduce using rule 62 (termaux -> empty .)
    GREATTHAN       reduce using rule 62 (termaux -> empty .)
    LESSTHAN        reduce using rule 62 (termaux -> empty .)
    SEMICOLON       reduce using rule 62 (termaux -> empty .)
    COMMA           reduce using rule 62 (termaux -> empty .)
    RGTPAREN        reduce using rule 62 (termaux -> empty .)
    RGTBRACSQR      reduce using rule 62 (termaux -> empty .)


state 88

    (40) factor -> LFTPAREN expression . RGTPAREN

    RGTPAREN        shift and go to state 118


state 89

    (36) exp -> term expaux .

    COMMA           reduce using rule 36 (exp -> term expaux .)
    RGTPAREN        reduce using rule 36 (exp -> term expaux .)
    AND             reduce using rule 36 (exp -> term expaux .)
    DOUBEQUAL       reduce using rule 36 (exp -> term expaux .)
    NOT             reduce using rule 36 (exp -> term expaux .)
    OR              reduce using rule 36 (exp -> term expaux .)
    LESSTHANEQUAL   reduce using rule 36 (exp -> term expaux .)
    GREATTHANEQUAL  reduce using rule 36 (exp -> term expaux .)
    GREATTHAN       reduce using rule 36 (exp -> term expaux .)
    LESSTHAN        reduce using rule 36 (exp -> term expaux .)
    SEMICOLON       reduce using rule 36 (exp -> term expaux .)
    PLUS            reduce using rule 36 (exp -> term expaux .)
    MINUS           reduce using rule 36 (exp -> term expaux .)
    RGTBRACSQR      reduce using rule 36 (exp -> term expaux .)


state 90

    (37) expaux -> PLUS . exp expaux
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    exp                            shift and go to state 119
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 91

    (38) expaux -> MINUS . exp expaux
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    exp                            shift and go to state 120
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 92

    (39) expaux -> empty .

    PLUS            reduce using rule 39 (expaux -> empty .)
    MINUS           reduce using rule 39 (expaux -> empty .)
    AND             reduce using rule 39 (expaux -> empty .)
    DOUBEQUAL       reduce using rule 39 (expaux -> empty .)
    NOT             reduce using rule 39 (expaux -> empty .)
    OR              reduce using rule 39 (expaux -> empty .)
    LESSTHANEQUAL   reduce using rule 39 (expaux -> empty .)
    GREATTHANEQUAL  reduce using rule 39 (expaux -> empty .)
    GREATTHAN       reduce using rule 39 (expaux -> empty .)
    LESSTHAN        reduce using rule 39 (expaux -> empty .)
    SEMICOLON       reduce using rule 39 (expaux -> empty .)
    COMMA           reduce using rule 39 (expaux -> empty .)
    RGTPAREN        reduce using rule 39 (expaux -> empty .)
    RGTBRACSQR      reduce using rule 39 (expaux -> empty .)


state 93

    (46) expressionaux -> AND .

    LFTPAREN        reduce using rule 46 (expressionaux -> AND .)
    MINUS           reduce using rule 46 (expressionaux -> AND .)
    PLUS            reduce using rule 46 (expressionaux -> AND .)
    ID              reduce using rule 46 (expressionaux -> AND .)
    TRUE            reduce using rule 46 (expressionaux -> AND .)
    FALSE           reduce using rule 46 (expressionaux -> AND .)
    FLOAT           reduce using rule 46 (expressionaux -> AND .)
    INT             reduce using rule 46 (expressionaux -> AND .)
    STRING          reduce using rule 46 (expressionaux -> AND .)


state 94

    (45) expression -> exp expressionaux . exp
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteS                           shift and go to state 50
    cteN                           shift and go to state 52
    exp                            shift and go to state 121
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 95

    (51) expressionaux -> GREATTHANEQUAL .

    LFTPAREN        reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    MINUS           reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    PLUS            reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    ID              reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    TRUE            reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    FALSE           reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    FLOAT           reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    INT             reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)
    STRING          reduce using rule 51 (expressionaux -> GREATTHANEQUAL .)


state 96

    (52) expressionaux -> GREATTHAN .

    LFTPAREN        reduce using rule 52 (expressionaux -> GREATTHAN .)
    MINUS           reduce using rule 52 (expressionaux -> GREATTHAN .)
    PLUS            reduce using rule 52 (expressionaux -> GREATTHAN .)
    ID              reduce using rule 52 (expressionaux -> GREATTHAN .)
    TRUE            reduce using rule 52 (expressionaux -> GREATTHAN .)
    FALSE           reduce using rule 52 (expressionaux -> GREATTHAN .)
    FLOAT           reduce using rule 52 (expressionaux -> GREATTHAN .)
    INT             reduce using rule 52 (expressionaux -> GREATTHAN .)
    STRING          reduce using rule 52 (expressionaux -> GREATTHAN .)


state 97

    (50) expressionaux -> LESSTHANEQUAL .

    LFTPAREN        reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    MINUS           reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    PLUS            reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    ID              reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    TRUE            reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    FALSE           reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    FLOAT           reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    INT             reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)
    STRING          reduce using rule 50 (expressionaux -> LESSTHANEQUAL .)


state 98

    (53) expressionaux -> LESSTHAN .

    LFTPAREN        reduce using rule 53 (expressionaux -> LESSTHAN .)
    MINUS           reduce using rule 53 (expressionaux -> LESSTHAN .)
    PLUS            reduce using rule 53 (expressionaux -> LESSTHAN .)
    ID              reduce using rule 53 (expressionaux -> LESSTHAN .)
    TRUE            reduce using rule 53 (expressionaux -> LESSTHAN .)
    FALSE           reduce using rule 53 (expressionaux -> LESSTHAN .)
    FLOAT           reduce using rule 53 (expressionaux -> LESSTHAN .)
    INT             reduce using rule 53 (expressionaux -> LESSTHAN .)
    STRING          reduce using rule 53 (expressionaux -> LESSTHAN .)


state 99

    (48) expressionaux -> NOT .

    LFTPAREN        reduce using rule 48 (expressionaux -> NOT .)
    MINUS           reduce using rule 48 (expressionaux -> NOT .)
    PLUS            reduce using rule 48 (expressionaux -> NOT .)
    ID              reduce using rule 48 (expressionaux -> NOT .)
    TRUE            reduce using rule 48 (expressionaux -> NOT .)
    FALSE           reduce using rule 48 (expressionaux -> NOT .)
    FLOAT           reduce using rule 48 (expressionaux -> NOT .)
    INT             reduce using rule 48 (expressionaux -> NOT .)
    STRING          reduce using rule 48 (expressionaux -> NOT .)


state 100

    (47) expressionaux -> DOUBEQUAL .

    LFTPAREN        reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    MINUS           reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    PLUS            reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    ID              reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    TRUE            reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    FALSE           reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    FLOAT           reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    INT             reduce using rule 47 (expressionaux -> DOUBEQUAL .)
    STRING          reduce using rule 47 (expressionaux -> DOUBEQUAL .)


state 101

    (49) expressionaux -> OR .

    LFTPAREN        reduce using rule 49 (expressionaux -> OR .)
    MINUS           reduce using rule 49 (expressionaux -> OR .)
    PLUS            reduce using rule 49 (expressionaux -> OR .)
    ID              reduce using rule 49 (expressionaux -> OR .)
    TRUE            reduce using rule 49 (expressionaux -> OR .)
    FALSE           reduce using rule 49 (expressionaux -> OR .)
    FLOAT           reduce using rule 49 (expressionaux -> OR .)
    INT             reduce using rule 49 (expressionaux -> OR .)
    STRING          reduce using rule 49 (expressionaux -> OR .)


state 102

    (80) varsaux -> ID EQUAL expression SEMICOLON .

    FUNCTION        reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    INT             reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    STRING          reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    PRIOMH          reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    IF              reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    READ            reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    ID              reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 80 (varsaux -> ID EQUAL expression SEMICOLON .)


state 103

    (82) varsaux -> ID EQUAL expression COMMA . varsaux
    (80) varsaux -> . ID EQUAL expression SEMICOLON
    (81) varsaux -> . ID EQUAL call
    (82) varsaux -> . ID EQUAL expression COMMA varsaux
    (83) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (84) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 122

state 104

    (83) varsaux -> ID LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvalues SEMICOLON
    (84) varsaux -> ID LFTBRACSQR INT RGTBRACSQR . EQUAL arrayvalues COMMA varsaux

    EQUAL           shift and go to state 123


state 105

    (56) parameter -> type ID .
    (57) parameter -> type ID . COMMA parameter

    RGTPAREN        reduce using rule 56 (parameter -> type ID .)
    COMMA           shift and go to state 124


state 106

    (76) function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN . blockreturn
    (15) blockreturn -> . LFTBRAC blockreturnaux RGTBRAC
    (16) blockreturn -> . LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC

    LFTBRAC         shift and go to state 125

    blockreturn                    shift and go to state 126

state 107

    (88) read -> READ LFTPAREN ID . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 127


state 108

    (54) loop -> WHILE LFTPAREN expression . RGTPAREN block

    RGTPAREN        shift and go to state 128


state 109

    (55) write -> PRINT LFTPAREN constant . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 129


state 110

    (12) assignment -> assignmentaux EQUAL call .

    IF              reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    WHILE           reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    PRINT           reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    READ            reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    ID              reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    INT             reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    FLOAT           reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    CHAR            reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    BOOL            reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    STRING          reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    RGTBRAC         reduce using rule 12 (assignment -> assignmentaux EQUAL call .)
    RETURN          reduce using rule 12 (assignment -> assignmentaux EQUAL call .)


state 111

    (11) assignment -> assignmentaux EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 130


state 112

    (85) call -> ID LFTPAREN exp . callaux RGTPAREN SEMICOLON
    (86) callaux -> . COMMA exp callaux
    (87) callaux -> . empty
    (89) empty -> .

    COMMA           shift and go to state 132
    RGTPAREN        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 133
    callaux                        shift and go to state 131

state 113

    (5) array -> ID LFTBRACSQR exp . RGTBRACSQR

    RGTBRACSQR      shift and go to state 134


state 114

    (24) conditionaux -> LFTPAREN expression . RGTPAREN block conditionaux2

    RGTPAREN        shift and go to state 135


state 115

    (23) condition -> IF conditionaux ELSE . block
    (19) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 136

state 116

    (61) termaux -> DIVISION term . termaux
    (60) termaux -> . MULTIPLICATION term termaux
    (61) termaux -> . DIVISION term termaux
    (62) termaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    MULTIPLICATION  shift and go to state 85
    DIVISION        shift and go to state 84
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! MULTIPLICATION  [ reduce using rule 89 (empty -> .) ]
  ! DIVISION        [ reduce using rule 89 (empty -> .) ]

    termaux                        shift and go to state 137
    empty                          shift and go to state 87

state 117

    (60) termaux -> MULTIPLICATION term . termaux
    (60) termaux -> . MULTIPLICATION term termaux
    (61) termaux -> . DIVISION term termaux
    (62) termaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
    MULTIPLICATION  shift and go to state 85
    DIVISION        shift and go to state 84
    PLUS            reduce using rule 89 (empty -> .)
    MINUS           reduce using rule 89 (empty -> .)
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! MULTIPLICATION  [ reduce using rule 89 (empty -> .) ]
  ! DIVISION        [ reduce using rule 89 (empty -> .) ]

    termaux                        shift and go to state 138
    empty                          shift and go to state 87

state 118

    (40) factor -> LFTPAREN expression RGTPAREN .

    MULTIPLICATION  reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    DIVISION        reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    PLUS            reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    MINUS           reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    COMMA           reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    RGTPAREN        reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    AND             reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    DOUBEQUAL       reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    NOT             reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    OR              reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    LESSTHANEQUAL   reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    GREATTHANEQUAL  reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    GREATTHAN       reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    LESSTHAN        reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    SEMICOLON       reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)
    RGTBRACSQR      reduce using rule 40 (factor -> LFTPAREN expression RGTPAREN .)


state 119

    (37) expaux -> PLUS exp . expaux
    (37) expaux -> . PLUS exp expaux
    (38) expaux -> . MINUS exp expaux
    (39) expaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! PLUS            [ reduce using rule 89 (empty -> .) ]
  ! MINUS           [ reduce using rule 89 (empty -> .) ]

    expaux                         shift and go to state 139
    empty                          shift and go to state 92

state 120

    (38) expaux -> MINUS exp . expaux
    (37) expaux -> . PLUS exp expaux
    (38) expaux -> . MINUS exp expaux
    (39) expaux -> . empty
    (89) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 90
    MINUS           shift and go to state 91
    AND             reduce using rule 89 (empty -> .)
    DOUBEQUAL       reduce using rule 89 (empty -> .)
    NOT             reduce using rule 89 (empty -> .)
    OR              reduce using rule 89 (empty -> .)
    LESSTHANEQUAL   reduce using rule 89 (empty -> .)
    GREATTHANEQUAL  reduce using rule 89 (empty -> .)
    GREATTHAN       reduce using rule 89 (empty -> .)
    LESSTHAN        reduce using rule 89 (empty -> .)
    SEMICOLON       reduce using rule 89 (empty -> .)
    COMMA           reduce using rule 89 (empty -> .)
    RGTPAREN        reduce using rule 89 (empty -> .)
    RGTBRACSQR      reduce using rule 89 (empty -> .)

  ! PLUS            [ reduce using rule 89 (empty -> .) ]
  ! MINUS           [ reduce using rule 89 (empty -> .) ]

    expaux                         shift and go to state 140
    empty                          shift and go to state 92

state 121

    (45) expression -> exp expressionaux exp .

    RGTPAREN        reduce using rule 45 (expression -> exp expressionaux exp .)
    SEMICOLON       reduce using rule 45 (expression -> exp expressionaux exp .)
    COMMA           reduce using rule 45 (expression -> exp expressionaux exp .)


state 122

    (82) varsaux -> ID EQUAL expression COMMA varsaux .

    FUNCTION        reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    INT             reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    FLOAT           reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    CHAR            reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    BOOL            reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    STRING          reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    PRIOMH          reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    IF              reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    WHILE           reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    PRINT           reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    READ            reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    ID              reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    RGTBRAC         reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)
    RETURN          reduce using rule 82 (varsaux -> ID EQUAL expression COMMA varsaux .)


state 123

    (83) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvalues SEMICOLON
    (84) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL . arrayvalues COMMA varsaux
    (6) arrayvalues -> . LFTBRACSQR arrayvaluesaux RGTBRACSQR

    LFTBRACSQR      shift and go to state 141

    arrayvalues                    shift and go to state 142

state 124

    (57) parameter -> type ID COMMA . parameter
    (56) parameter -> . type ID
    (57) parameter -> . type ID COMMA parameter
    (58) parameter -> . empty
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING
    (89) empty -> .

    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11
    RGTPAREN        reduce using rule 89 (empty -> .)

    parameter                      shift and go to state 143
    type                           shift and go to state 68
    empty                          shift and go to state 70

state 125

    (15) blockreturn -> LFTBRAC . blockreturnaux RGTBRAC
    (16) blockreturn -> LFTBRAC . blockreturnaux RETURN exp SEMICOLON RGTBRAC
    (17) blockreturnaux -> . statement blockreturnaux
    (18) blockreturnaux -> . empty
    (63) statement -> . assignment
    (64) statement -> . condition
    (65) statement -> . vars
    (66) statement -> . loop
    (67) statement -> . write
    (68) statement -> . read
    (69) statement -> . call
    (89) empty -> .
    (11) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (12) assignment -> . assignmentaux EQUAL call
    (22) condition -> . IF conditionaux
    (23) condition -> . IF conditionaux ELSE block
    (79) vars -> . type varsaux
    (54) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (55) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (88) read -> . READ LFTPAREN ID RGTPAREN SEMICOLON
    (85) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (13) assignmentaux -> . ID
    (14) assignmentaux -> . array
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    loop                           shift and go to state 48
    type                           shift and go to state 13
    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    call                           shift and go to state 39
    condition                      shift and go to state 46
    statement                      shift and go to state 144
    blockreturnaux                 shift and go to state 145
    array                          shift and go to state 36
    empty                          shift and go to state 146

state 126

    (76) function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .

    FUNCTION        reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    INT             reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    FLOAT           reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    CHAR            reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    BOOL            reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    STRING          reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)
    PRIOMH          reduce using rule 76 (function -> FUNCTION functionaux ID LFTPAREN parameter RGTPAREN blockreturn .)


state 127

    (88) read -> READ LFTPAREN ID RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 147


state 128

    (54) loop -> WHILE LFTPAREN expression RGTPAREN . block
    (19) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 148

state 129

    (55) write -> PRINT LFTPAREN constant RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 149


state 130

    (11) assignment -> assignmentaux EQUAL expression SEMICOLON .

    IF              reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    PRINT           reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    READ            reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    ID              reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    INT             reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    FLOAT           reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    CHAR            reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    BOOL            reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    STRING          reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RGTBRAC         reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)
    RETURN          reduce using rule 11 (assignment -> assignmentaux EQUAL expression SEMICOLON .)


state 131

    (85) call -> ID LFTPAREN exp callaux . RGTPAREN SEMICOLON

    RGTPAREN        shift and go to state 150


state 132

    (86) callaux -> COMMA . exp callaux
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    exp                            shift and go to state 151
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 133

    (87) callaux -> empty .

    RGTPAREN        reduce using rule 87 (callaux -> empty .)


state 134

    (5) array -> ID LFTBRACSQR exp RGTBRACSQR .

    MULTIPLICATION  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DIVISION        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    PLUS            reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    MINUS           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    SEMICOLON       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    AND             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    DOUBEQUAL       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    NOT             reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    OR              reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHANEQUAL   reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHANEQUAL  reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    GREATTHAN       reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    LESSTHAN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    COMMA           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTPAREN        reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    RGTBRACSQR      reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)
    EQUAL           reduce using rule 5 (array -> ID LFTBRACSQR exp RGTBRACSQR .)


state 135

    (24) conditionaux -> LFTPAREN expression RGTPAREN . block conditionaux2
    (19) block -> . LFTBRAC blockaux RGTBRAC

    LFTBRAC         shift and go to state 26

    block                          shift and go to state 152

state 136

    (23) condition -> IF conditionaux ELSE block .

    IF              reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    WHILE           reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    PRINT           reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    READ            reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    ID              reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    INT             reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    FLOAT           reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    CHAR            reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    BOOL            reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    STRING          reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    RGTBRAC         reduce using rule 23 (condition -> IF conditionaux ELSE block .)
    RETURN          reduce using rule 23 (condition -> IF conditionaux ELSE block .)


state 137

    (61) termaux -> DIVISION term termaux .

    MULTIPLICATION  reduce using rule 61 (termaux -> DIVISION term termaux .)
    DIVISION        reduce using rule 61 (termaux -> DIVISION term termaux .)
    PLUS            reduce using rule 61 (termaux -> DIVISION term termaux .)
    MINUS           reduce using rule 61 (termaux -> DIVISION term termaux .)
    AND             reduce using rule 61 (termaux -> DIVISION term termaux .)
    DOUBEQUAL       reduce using rule 61 (termaux -> DIVISION term termaux .)
    NOT             reduce using rule 61 (termaux -> DIVISION term termaux .)
    OR              reduce using rule 61 (termaux -> DIVISION term termaux .)
    LESSTHANEQUAL   reduce using rule 61 (termaux -> DIVISION term termaux .)
    GREATTHANEQUAL  reduce using rule 61 (termaux -> DIVISION term termaux .)
    GREATTHAN       reduce using rule 61 (termaux -> DIVISION term termaux .)
    LESSTHAN        reduce using rule 61 (termaux -> DIVISION term termaux .)
    SEMICOLON       reduce using rule 61 (termaux -> DIVISION term termaux .)
    COMMA           reduce using rule 61 (termaux -> DIVISION term termaux .)
    RGTPAREN        reduce using rule 61 (termaux -> DIVISION term termaux .)
    RGTBRACSQR      reduce using rule 61 (termaux -> DIVISION term termaux .)


state 138

    (60) termaux -> MULTIPLICATION term termaux .

    MULTIPLICATION  reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    DIVISION        reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    PLUS            reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    MINUS           reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    AND             reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    DOUBEQUAL       reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    NOT             reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    OR              reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    LESSTHANEQUAL   reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    GREATTHANEQUAL  reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    GREATTHAN       reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    LESSTHAN        reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    SEMICOLON       reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    COMMA           reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    RGTPAREN        reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)
    RGTBRACSQR      reduce using rule 60 (termaux -> MULTIPLICATION term termaux .)


state 139

    (37) expaux -> PLUS exp expaux .

    PLUS            reduce using rule 37 (expaux -> PLUS exp expaux .)
    MINUS           reduce using rule 37 (expaux -> PLUS exp expaux .)
    AND             reduce using rule 37 (expaux -> PLUS exp expaux .)
    DOUBEQUAL       reduce using rule 37 (expaux -> PLUS exp expaux .)
    NOT             reduce using rule 37 (expaux -> PLUS exp expaux .)
    OR              reduce using rule 37 (expaux -> PLUS exp expaux .)
    LESSTHANEQUAL   reduce using rule 37 (expaux -> PLUS exp expaux .)
    GREATTHANEQUAL  reduce using rule 37 (expaux -> PLUS exp expaux .)
    GREATTHAN       reduce using rule 37 (expaux -> PLUS exp expaux .)
    LESSTHAN        reduce using rule 37 (expaux -> PLUS exp expaux .)
    SEMICOLON       reduce using rule 37 (expaux -> PLUS exp expaux .)
    COMMA           reduce using rule 37 (expaux -> PLUS exp expaux .)
    RGTPAREN        reduce using rule 37 (expaux -> PLUS exp expaux .)
    RGTBRACSQR      reduce using rule 37 (expaux -> PLUS exp expaux .)


state 140

    (38) expaux -> MINUS exp expaux .

    PLUS            reduce using rule 38 (expaux -> MINUS exp expaux .)
    MINUS           reduce using rule 38 (expaux -> MINUS exp expaux .)
    AND             reduce using rule 38 (expaux -> MINUS exp expaux .)
    DOUBEQUAL       reduce using rule 38 (expaux -> MINUS exp expaux .)
    NOT             reduce using rule 38 (expaux -> MINUS exp expaux .)
    OR              reduce using rule 38 (expaux -> MINUS exp expaux .)
    LESSTHANEQUAL   reduce using rule 38 (expaux -> MINUS exp expaux .)
    GREATTHANEQUAL  reduce using rule 38 (expaux -> MINUS exp expaux .)
    GREATTHAN       reduce using rule 38 (expaux -> MINUS exp expaux .)
    LESSTHAN        reduce using rule 38 (expaux -> MINUS exp expaux .)
    SEMICOLON       reduce using rule 38 (expaux -> MINUS exp expaux .)
    COMMA           reduce using rule 38 (expaux -> MINUS exp expaux .)
    RGTPAREN        reduce using rule 38 (expaux -> MINUS exp expaux .)
    RGTBRACSQR      reduce using rule 38 (expaux -> MINUS exp expaux .)


state 141

    (6) arrayvalues -> LFTBRACSQR . arrayvaluesaux RGTBRACSQR
    (7) arrayvaluesaux -> . cteN
    (8) arrayvaluesaux -> . cteS
    (9) arrayvaluesaux -> . cteN COMMA arrayvaluesaux
    (10) arrayvaluesaux -> . cteS COMMA arrayvaluesaux
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 153
    cteN                           shift and go to state 154
    arrayvaluesaux                 shift and go to state 155

state 142

    (83) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues . SEMICOLON
    (84) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues . COMMA varsaux

    SEMICOLON       shift and go to state 156
    COMMA           shift and go to state 157


state 143

    (57) parameter -> type ID COMMA parameter .

    RGTPAREN        reduce using rule 57 (parameter -> type ID COMMA parameter .)


state 144

    (17) blockreturnaux -> statement . blockreturnaux
    (17) blockreturnaux -> . statement blockreturnaux
    (18) blockreturnaux -> . empty
    (63) statement -> . assignment
    (64) statement -> . condition
    (65) statement -> . vars
    (66) statement -> . loop
    (67) statement -> . write
    (68) statement -> . read
    (69) statement -> . call
    (89) empty -> .
    (11) assignment -> . assignmentaux EQUAL expression SEMICOLON
    (12) assignment -> . assignmentaux EQUAL call
    (22) condition -> . IF conditionaux
    (23) condition -> . IF conditionaux ELSE block
    (79) vars -> . type varsaux
    (54) loop -> . WHILE LFTPAREN expression RGTPAREN block
    (55) write -> . PRINT LFTPAREN constant RGTPAREN SEMICOLON
    (88) read -> . READ LFTPAREN ID RGTPAREN SEMICOLON
    (85) call -> . ID LFTPAREN exp callaux RGTPAREN SEMICOLON
    (13) assignmentaux -> . ID
    (14) assignmentaux -> . array
    (70) type -> . INT
    (71) type -> . FLOAT
    (72) type -> . CHAR
    (73) type -> . BOOL
    (74) type -> . STRING
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR

    RGTBRAC         reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)
    IF              shift and go to state 47
    WHILE           shift and go to state 34
    PRINT           shift and go to state 35
    READ            shift and go to state 33
    ID              shift and go to state 45
    INT             shift and go to state 12
    FLOAT           shift and go to state 14
    CHAR            shift and go to state 7
    BOOL            shift and go to state 15
    STRING          shift and go to state 11

    loop                           shift and go to state 48
    type                           shift and go to state 13
    vars                           shift and go to state 32
    read                           shift and go to state 38
    assignment                     shift and go to state 43
    write                          shift and go to state 37
    assignmentaux                  shift and go to state 44
    call                           shift and go to state 39
    empty                          shift and go to state 146
    statement                      shift and go to state 144
    blockreturnaux                 shift and go to state 158
    array                          shift and go to state 36
    condition                      shift and go to state 46

state 145

    (15) blockreturn -> LFTBRAC blockreturnaux . RGTBRAC
    (16) blockreturn -> LFTBRAC blockreturnaux . RETURN exp SEMICOLON RGTBRAC

    RGTBRAC         shift and go to state 160
    RETURN          shift and go to state 159


state 146

    (18) blockreturnaux -> empty .

    RGTBRAC         reduce using rule 18 (blockreturnaux -> empty .)
    RETURN          reduce using rule 18 (blockreturnaux -> empty .)


state 147

    (88) read -> READ LFTPAREN ID RGTPAREN SEMICOLON .

    IF              reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    READ            reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    ID              reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    INT             reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    STRING          reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 88 (read -> READ LFTPAREN ID RGTPAREN SEMICOLON .)


state 148

    (54) loop -> WHILE LFTPAREN expression RGTPAREN block .

    IF              reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    WHILE           reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    PRINT           reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    READ            reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    ID              reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    INT             reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    FLOAT           reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    CHAR            reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    BOOL            reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    STRING          reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    RGTBRAC         reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)
    RETURN          reduce using rule 54 (loop -> WHILE LFTPAREN expression RGTPAREN block .)


state 149

    (55) write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .

    IF              reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    READ            reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    ID              reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    INT             reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    STRING          reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 55 (write -> PRINT LFTPAREN constant RGTPAREN SEMICOLON .)


state 150

    (85) call -> ID LFTPAREN exp callaux RGTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 161


state 151

    (86) callaux -> COMMA exp . callaux
    (86) callaux -> . COMMA exp callaux
    (87) callaux -> . empty
    (89) empty -> .

    COMMA           shift and go to state 132
    RGTPAREN        reduce using rule 89 (empty -> .)

    empty                          shift and go to state 133
    callaux                        shift and go to state 162

state 152

    (24) conditionaux -> LFTPAREN expression RGTPAREN block . conditionaux2
    (25) conditionaux2 -> . ELSEIF conditionaux
    (26) conditionaux2 -> . empty
    (89) empty -> .

    ELSEIF          shift and go to state 165
    ELSE            reduce using rule 89 (empty -> .)
    IF              reduce using rule 89 (empty -> .)
    WHILE           reduce using rule 89 (empty -> .)
    PRINT           reduce using rule 89 (empty -> .)
    READ            reduce using rule 89 (empty -> .)
    ID              reduce using rule 89 (empty -> .)
    INT             reduce using rule 89 (empty -> .)
    FLOAT           reduce using rule 89 (empty -> .)
    CHAR            reduce using rule 89 (empty -> .)
    BOOL            reduce using rule 89 (empty -> .)
    STRING          reduce using rule 89 (empty -> .)
    RGTBRAC         reduce using rule 89 (empty -> .)
    RETURN          reduce using rule 89 (empty -> .)

    empty                          shift and go to state 164
    conditionaux2                  shift and go to state 163

state 153

    (8) arrayvaluesaux -> cteS .
    (10) arrayvaluesaux -> cteS . COMMA arrayvaluesaux

    RGTBRACSQR      reduce using rule 8 (arrayvaluesaux -> cteS .)
    COMMA           shift and go to state 166


state 154

    (7) arrayvaluesaux -> cteN .
    (9) arrayvaluesaux -> cteN . COMMA arrayvaluesaux

    RGTBRACSQR      reduce using rule 7 (arrayvaluesaux -> cteN .)
    COMMA           shift and go to state 167


state 155

    (6) arrayvalues -> LFTBRACSQR arrayvaluesaux . RGTBRACSQR

    RGTBRACSQR      shift and go to state 168


state 156

    (83) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .

    FUNCTION        reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    INT             reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    FLOAT           reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    CHAR            reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    BOOL            reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    STRING          reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    PRIOMH          reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    IF              reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    WHILE           reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    PRINT           reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    READ            reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    ID              reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    RGTBRAC         reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)
    RETURN          reduce using rule 83 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON .)


state 157

    (84) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA . varsaux
    (80) varsaux -> . ID EQUAL expression SEMICOLON
    (81) varsaux -> . ID EQUAL call
    (82) varsaux -> . ID EQUAL expression COMMA varsaux
    (83) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues SEMICOLON
    (84) varsaux -> . ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux

    ID              shift and go to state 23

    varsaux                        shift and go to state 169

state 158

    (17) blockreturnaux -> statement blockreturnaux .

    RGTBRAC         reduce using rule 17 (blockreturnaux -> statement blockreturnaux .)
    RETURN          reduce using rule 17 (blockreturnaux -> statement blockreturnaux .)


state 159

    (16) blockreturn -> LFTBRAC blockreturnaux RETURN . exp SEMICOLON RGTBRAC
    (36) exp -> . term expaux
    (59) term -> . factor termaux
    (40) factor -> . LFTPAREN expression RGTPAREN
    (41) factor -> . constant
    (42) factor -> . MINUS constant
    (43) factor -> . PLUS constant
    (27) constant -> . ID
    (28) constant -> . array
    (29) constant -> . cteN
    (30) constant -> . cteS
    (31) constant -> . TRUE
    (32) constant -> . FALSE
    (5) array -> . ID LFTBRACSQR exp RGTBRACSQR
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    LFTPAREN        shift and go to state 59
    MINUS           shift and go to state 53
    PLUS            shift and go to state 55
    ID              shift and go to state 82
    TRUE            shift and go to state 54
    FALSE           shift and go to state 62
    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 50
    term                           shift and go to state 61
    constant                       shift and go to state 49
    cteN                           shift and go to state 52
    exp                            shift and go to state 170
    factor                         shift and go to state 56
    array                          shift and go to state 51

state 160

    (15) blockreturn -> LFTBRAC blockreturnaux RGTBRAC .

    FUNCTION        reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    INT             reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    FLOAT           reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    CHAR            reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    BOOL            reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    STRING          reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)
    PRIOMH          reduce using rule 15 (blockreturn -> LFTBRAC blockreturnaux RGTBRAC .)


state 161

    (85) call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .

    IF              reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    WHILE           reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    PRINT           reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    READ            reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    ID              reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    INT             reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    FLOAT           reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    CHAR            reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    BOOL            reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    STRING          reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RGTBRAC         reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    RETURN          reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    FUNCTION        reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)
    PRIOMH          reduce using rule 85 (call -> ID LFTPAREN exp callaux RGTPAREN SEMICOLON .)


state 162

    (86) callaux -> COMMA exp callaux .

    RGTPAREN        reduce using rule 86 (callaux -> COMMA exp callaux .)


state 163

    (24) conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .

    ELSE            reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    IF              reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    WHILE           reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    PRINT           reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    READ            reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    ID              reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    INT             reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    FLOAT           reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    CHAR            reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    BOOL            reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    STRING          reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RGTBRAC         reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)
    RETURN          reduce using rule 24 (conditionaux -> LFTPAREN expression RGTPAREN block conditionaux2 .)


state 164

    (26) conditionaux2 -> empty .

    ELSE            reduce using rule 26 (conditionaux2 -> empty .)
    IF              reduce using rule 26 (conditionaux2 -> empty .)
    WHILE           reduce using rule 26 (conditionaux2 -> empty .)
    PRINT           reduce using rule 26 (conditionaux2 -> empty .)
    READ            reduce using rule 26 (conditionaux2 -> empty .)
    ID              reduce using rule 26 (conditionaux2 -> empty .)
    INT             reduce using rule 26 (conditionaux2 -> empty .)
    FLOAT           reduce using rule 26 (conditionaux2 -> empty .)
    CHAR            reduce using rule 26 (conditionaux2 -> empty .)
    BOOL            reduce using rule 26 (conditionaux2 -> empty .)
    STRING          reduce using rule 26 (conditionaux2 -> empty .)
    RGTBRAC         reduce using rule 26 (conditionaux2 -> empty .)
    RETURN          reduce using rule 26 (conditionaux2 -> empty .)


state 165

    (25) conditionaux2 -> ELSEIF . conditionaux
    (24) conditionaux -> . LFTPAREN expression RGTPAREN block conditionaux2

    LFTPAREN        shift and go to state 79

    conditionaux                   shift and go to state 171

state 166

    (10) arrayvaluesaux -> cteS COMMA . arrayvaluesaux
    (7) arrayvaluesaux -> . cteN
    (8) arrayvaluesaux -> . cteS
    (9) arrayvaluesaux -> . cteN COMMA arrayvaluesaux
    (10) arrayvaluesaux -> . cteS COMMA arrayvaluesaux
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 153
    cteN                           shift and go to state 154
    arrayvaluesaux                 shift and go to state 172

state 167

    (9) arrayvaluesaux -> cteN COMMA . arrayvaluesaux
    (7) arrayvaluesaux -> . cteN
    (8) arrayvaluesaux -> . cteS
    (9) arrayvaluesaux -> . cteN COMMA arrayvaluesaux
    (10) arrayvaluesaux -> . cteS COMMA arrayvaluesaux
    (33) cteN -> . FLOAT
    (34) cteN -> . INT
    (35) cteS -> . STRING

    FLOAT           shift and go to state 64
    INT             shift and go to state 63
    STRING          shift and go to state 58

    cteS                           shift and go to state 153
    cteN                           shift and go to state 154
    arrayvaluesaux                 shift and go to state 173

state 168

    (6) arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .

    SEMICOLON       reduce using rule 6 (arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .)
    COMMA           reduce using rule 6 (arrayvalues -> LFTBRACSQR arrayvaluesaux RGTBRACSQR .)


state 169

    (84) varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .

    FUNCTION        reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    INT             reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    FLOAT           reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    CHAR            reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    BOOL            reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    STRING          reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    PRIOMH          reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    IF              reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    WHILE           reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    PRINT           reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    READ            reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    ID              reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    RGTBRAC         reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)
    RETURN          reduce using rule 84 (varsaux -> ID LFTBRACSQR INT RGTBRACSQR EQUAL arrayvalues COMMA varsaux .)


state 170

    (16) blockreturn -> LFTBRAC blockreturnaux RETURN exp . SEMICOLON RGTBRAC

    SEMICOLON       shift and go to state 174


state 171

    (25) conditionaux2 -> ELSEIF conditionaux .

    ELSE            reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    IF              reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    WHILE           reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    PRINT           reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    READ            reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    ID              reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    INT             reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    FLOAT           reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    CHAR            reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    BOOL            reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    STRING          reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    RGTBRAC         reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)
    RETURN          reduce using rule 25 (conditionaux2 -> ELSEIF conditionaux .)


state 172

    (10) arrayvaluesaux -> cteS COMMA arrayvaluesaux .

    RGTBRACSQR      reduce using rule 10 (arrayvaluesaux -> cteS COMMA arrayvaluesaux .)


state 173

    (9) arrayvaluesaux -> cteN COMMA arrayvaluesaux .

    RGTBRACSQR      reduce using rule 9 (arrayvaluesaux -> cteN COMMA arrayvaluesaux .)


state 174

    (16) blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON . RGTBRAC

    RGTBRAC         shift and go to state 175


state 175

    (16) blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .

    FUNCTION        reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    INT             reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    FLOAT           reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    CHAR            reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    BOOL            reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    STRING          reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)
    PRIOMH          reduce using rule 16 (blockreturn -> LFTBRAC blockreturnaux RETURN exp SEMICOLON RGTBRAC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MULTIPLICATION in state 56 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 56 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 61 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 116 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
